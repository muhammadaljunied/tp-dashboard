[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003d T.A.rence"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T14-2/main[image:https://travis-ci.org/AY1920S1-CS2103-T14-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "https://ci.appveyor.com/project/Ellieyee/main[image:https://ci.appveyor.com/api/projects/status/7p2l4yoxhbvguwkt?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T14-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T14-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* This is T.A.rence, a class management system for NUS Teaching Assistants. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* T.A.rence allows NUS Teaching Assistants to organize their various classes and manage each student\u0027s information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* This application is optimized for those who prefer using the Command Line interface."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Original source: https://github.com/nus-cs2103-AY1920S1/addressbook-level3[AddressBook Level 3] created by https://se-education.org[SE-EDU initiative]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "mainClassName \u003d \u0027seedu.tarence.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    jcenter() // for fuzzywuzzy string matching"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    implementation \u0027me.xdrop:fuzzywuzzy:1.2.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    compile \"com.opencsv:opencsv:4.0\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    archiveName \u003d \u0027TArence.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u0027site-name\u0027: \u0027T.A.rence\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-T14-2/main\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 2,
      "Ellieyee": 4,
      "-": 151,
      "lumos309": 3
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "T.A.rence was developed by the https://github.com/AY1920S1-CS2103-T14-2[AY1920S1-CS2103-T14-2] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003d\u003d\u003d Ellie Yee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "image::ellieyee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "{empty}[https://github.com/Ellieyee[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003d\u003d\u003d Yew Kai Zhe"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "image::zihawkeye.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "{empty}[https://github.com/ZiHawkEye[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003d\u003d\u003d Ahmad Hatziq Bin Mohamad"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "image::ahmadhatziq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "{empty}[https://github.com/AhmadHatziq[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003d\u003d\u003d Tan YuGin"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "image::lumos309.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "{empty}[https://github.com/lumos309[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 17,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T14-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "﻿\u003d T.A.rence - Draft Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ":repoURL: https://github.com/Ellieyee/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* has a need to manage a significant number of tutorial classes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Value proposition*: manage TA-related tasks faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* * *` |TA |mark students attendance easily on computer |not have to keep a physical record of it"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* * *` |TA |add a new student to my class |easily track students without having to refer to LumiNUS"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* * *` |TA |delete a student |stop referring to LumiNUS due to students periodically dropping classes"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* * *` |TA |track students\u0027 performance |pay special attention to weaker students"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* * *` |TA |easily key in marks for assignments and mid-terms|view statistics such as mean and help the outlier students"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* *` |TA with busy schedule |keep track of my available slots | know when to schedule consultations"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`*` |TA|have a contact list of professors | easily contact them"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* * *` |TA overloading  | compare my personal timetable with the scheduled tutorial slots |plan out any potential clashes"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* *` |TA  | share my schedules with my other TA friends | assign a substitute TA if needed"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* *` |TA  |track all guest \u0026 students that crash | remember to manually submit their attendance and/or assignments"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "|`* *` |TA  | keep separate logs of the modules I taught for each semester | retrieve any information from the"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "previous semesters taught"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "(For all use cases below, the *System* is the `T.A.rence application` and the *Actor* is the `TA user`, unless specified otherwise)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: New module entry"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Pre-conditions*: User selects the command to add a new module."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1.  User requests to add a new module"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2.  System adds new module."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given module already exists."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given module already exists."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given input is in an invalid format"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: New tutorial entry"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Precondition: User selects the command to add a new tutorial."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User requests to add a new tutorial to a selected module."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. System adds the tutorial to the given module."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "3. System displays the newly added tutorial to the tutorial list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given tutorial already exists."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message showing that the given tutorial already exists."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given module does not exist."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. System shows an error message showing that the given module does not exist."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1c. The given input is in an invalid format"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1c1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: New student entry"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Precondition*: User selects the command to add a new student."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User requests to add a new student into the selected tutorial and module."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. System adds the new student into the selected tutorial and module."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "3. System displays the student\u0027s particulars under the student list."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given student already exists."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given student already exists within the selected"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "tutorial and module."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given tutorial does not exist."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. System shows an error message that the given tutorial does not exist."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1c. The given module does not exist."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1c1. System shows an error message that the given module does not exist."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1d. The given input is in an invalid format."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1d1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: Editing a student\u0027s particulars"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Precondition*: User selects the command to edit a student."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User requests to edit the particulars of a given student."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. System edits student particulars."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given student does not exist."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given student does not exist."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given input is in an invalid format."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: Deleting a student"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Preconditions:*"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. Given tutorial and module exists in the system."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. User selects the command to delete a student."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User request to delete a student from a particular tutorial and module."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. System prompts for confirmation with full details of student."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "3. User enters confirmation."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "4. System deletes student and shows confirmation."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given student does not exist."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given student does not exist."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given input is in an invalid format."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: Listing students"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Preconditions:*"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. Given module exists in the system."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. User selects the command to list students of a particular tutorial class."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User requests to list a given selected tutorial class."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. System displays the class list for a given tutorial."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given tutorial does not exist."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given tutorial does not exist."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given input is in an invalid format."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: Post class attendance."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Preconditions:*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. Given module exists in the system."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. User selects the command to mark a tutorial class\u0027 attendance."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User requests to enter attendance for class for particular week."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. Application enters attendance for class in the given week."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given tutorial does not exist."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given tutorial does not exist."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The given tutorial class already has its attendance marked for that week."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. Application shows an error message that the class already has its"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "attendance marked for that week"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1c. The given input is in an invalid format."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1c1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: Adding in hours clocked."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Preconditions:*"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User selects the command to add in the hours."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. Given module exists in the system."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User indicates the tutorial class that has been completed for the week."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. System adds the given hours to the tutorial slot"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "3. System displays response on the total number of hours clocked for the given tutorial"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1a. The given tutorial does not exist."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1a1. System shows an error message that the given tutorial does not exist."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1b. The hours of the tutorial class for that week has already been clocked."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1b1. Application shows an error message that the class already has its hours clocked"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "for that week"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 1c. The given input is in an invalid format."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 1c1. System shows an error message showing the correct format to add a module."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Use case: Adding and viewing assignment score to students"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User selects the command to add assignment and its\u0027 scores to the student."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. Given module and tutorial exists in the system."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. User adds assignment to the tutorial class in the module."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "2. User adds the score for each student for the assignment."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "3. User switches to the student performance window."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "4. System displays results across semester for each student."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* 2a. One of the students does not exist."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** 2a1. System shows an error message that the given student does not exist."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "** Steps 2-2a2 are repeated for all invalid students."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "_{More to be added soon. Stay tuned!}_"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Business/Domain Rules:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". System should be able to handle multiple modules and tutorials"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". Number of module and tutorial slots created should be of reasonable amount (\u003c 10)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". The application’s functionalities should be easily testable."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Constraints:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". System should be wholly usable by \u003c\u003cCLI, C.L.I\u003e\u003e. (No \u003c\u003cGUI, G.U.I\u003e\u003e -only functionality)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". The application should work without requiring an Internet connection."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Technical Requirements:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Performance Requirements:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". System should be able to hold up to 100 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Quality Requirements:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". The application should work even if the user enters partial commands/data and data in"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "different formats, or omits certain command prefixes."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". Product should be usable by someone who just became a Teaching Assistant."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Notes about Project Scope:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ". System does not need to handle exporting or importing of data from other programs."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "_{More to be added. Coming to stores near you!}_"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[[ta]] TA::"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "teaching assistant"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[[module]] module::"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "A module that comes with an associated code in the form of [XXX1234Y]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[[tutorial]] tutorial::"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "A tutorial class conducted by a \u003c\u003cta, TA\u003e\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[[CLI]] Command-Line Interface::"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "An interface that only requires textual inputs."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "[[GUI]] Graphical User Inferface::"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "An interface that requires the use of graphics such as the use of the mouse pointer."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "AhmadHatziq": 285,
      "-": 419
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "lumos309": 1
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ". Run the `seedu.tarence.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "e.g. `seedu.tarence.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "e.g. `seedu.tarence.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "e.g. `seedu.tarence.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "﻿\u003d T.A.rence - Draft User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ":repoURL: https://github.com/Ellieyee/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "By: `AY1920S1-CS2103-T14-2`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T.A.rence is for Teaching Assistants (TAs) who prefer to use a desktop app for managing their TA responsibilities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T.A.rence is *optimized for those who prefer to work with a Command Line Interface* (CLI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "If you can type fast, T.A.rence can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ".  Download the latest `.jar` link:{URL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "image::UiMock.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *`list`* : lists all contacts `[coming in v2.0]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com m/CS2100, tn/Tutorial-01` : adds a student named `John Doe` into the `Tutorial-01` class inside module `CS2100`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* **`delete`**`3` : deletes the student `[coming in v2.0]`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME e/EMAIL`, `e/EMAIL n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Viewing Help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Adding a Mdule: `addModule`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Adds a module to T.A.rence. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `addModule m/MODULE_CODE`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* `addModule m/CS1010`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* `addModule m/ST2132`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Adding a Tutorial Slot : `addTutorial`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Adds a tutorial slot into the specified module. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Pre-condition: Module must already exist inside application.  +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `addTutorial tn/TUTORIAL_NAME st/START_TIME dur/TUTORIAL_DURATION d/TUTORIAL_DAY w/TUTORIAL_WEEKS m/MODULE_CODE`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* `addTutorial tn/Tutorial-01 st/1300 dur/60 d/Mon w/1,2,3 m/CS1010S`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Explanation: Adds a tutorial slot called `Tutorial-01` which starts at `1300`, lasts for `60` minutes,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "             occurs every `Mon` during weeks `1,2,3` into module `CS1010`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Adding a Student : `addStudent`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Adds a student into a specified tutorial. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Pre-condition: Module and tutorial slot must already exist inside the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `addStudent n/NAME e/EMAIL mat/MATRICULATION_NUMBER nusid/NUSNET_ID tn/TUTORIAL_NAME m/MODULE_CODE`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* `addStudent n/Bob e/bob@gmail.com mat/A1234567Z1 nusid/E1234567 m/CS1010S tn/Tutorial-01`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Explanation: Adds a student called \u0027Bob\u0027; with matriculation number `A1234567Z1 and NUS ID `E1234567` into the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "             tutorial slot called `Tutorial-01` for module `CS1O1O`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Adding an Assignment : `addAssignment` [coming in v2.0]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Editing a Student : `editStudent` [coming in v2.0]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Allows user to edit an existing student information"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `editStudent n/[ORIGINAL_STUDENT] n/[EDITED_STUDENT_NAME]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* `editStudent n/Ben n/Ben Leong`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//-****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Searching Student by Name: `find` [coming in v2.0]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Searches and displays student particulars based on name. The search can be based on partial strings that match"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "and need not be the full name of the student. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `find n\\[SEARCH_TERM]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* `find n\\John` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Deleting a Student : `delete` [coming in v2.0]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Listing Students from a Tutorial : `list` [coming in v2.0]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Lists all students from a particular tutorial slot."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `list c/TUTORIAL_NAME`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Undo Previously-entered Commands : `undo` [coming in v2.0]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` [coming in v2.0]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Mark Participation for a Student : `classPart` [coming in v2.0]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Gives participation marks to a student of a particular tutorial slot"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `classPart c/[TUTORIAL_NAME] n/[STUDENT_NAME]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Store a Student\u0027s Results : `addMarks` [coming in v2.0]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Allows user to add test results of a student of a particular tutorial slot"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `addMarks c/[TUTORIAL_NAME] n/[STUDENT_NAME] marks/[MARK_OBTAINED]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Display Tutorial Class\u0027 Test Results : `display` [coming in v2.0]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Allows user to display overall results (graph) for an exam"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `display c/[TUTORIAL_NAME]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Add Personal Notes to a Student : `note`  [coming in v2.0]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Allows user to add personal notes about class or feedback received by students."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Format: `note t/[NOTES]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Saving the data [coming in v2.0]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *Add Module* `addModule m/MODULE_CODE` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "e.g. `add m/CS1010`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *Add Tutorial* `addTutorial tn/TUTORIAL_NAME st/START_TIME dur/TUTORIAL_DURATION d/TUTORIAL_DAY w/TUTORIAL_WEEKS m/MODULE_CODE`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "e.g. `addStudent n/Bob e/bob@gmail.com mat/A1234567Z1 nusid/E1234567 m/CS1010S tn/Tutorial-01`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *Add Student* `addStudent n/NAME e/EMAIL mat/MATRICULATION_NUMBER nusid/NUSNET_ID tn/TUTORIAL_NAME m/MODULE_CODE`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "+"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "e.g. `addStudent n/Bob e/bob@gmail.com mat/A1234567Z1 nusid/E1234567 m/CS1010S tn/Tutorial-01`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003d\u003d\u003d Commands coming in v2.0"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "* *Add Assignment* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "AhmadHatziq": 127,
      "-": 121
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(application)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 36
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.tarence.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`seedu.tarence.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/tarence/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/tarence/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/tarence/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Version;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.ApplicationStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.JsonApplicationStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class MainApp extends javafx.application.Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing T.A.rence ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ApplicationStorage applicationStorage \u003d new JsonApplicationStorage(userPrefs.getApplicationFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        storage \u003d new StorageManager(applicationStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s class list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The data from the sample class list will be used instead if {@code storage}\u0027s class list is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * or an empty class list will be used instead if errors occur when reading {@code storage}\u0027s class list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cReadOnlyApplication\u003e applicationOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ReadOnlyApplication initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            applicationOptional \u003d storage.readApplication();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (!applicationOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                logger.info(\"Data file not found. Will be starting the application with sample data\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            initialData \u003d applicationOptional.orElseGet(SampleDataUtil::getSampleApplication);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty class list\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            initialData \u003d new Application();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty class list\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            initialData \u003d new Application();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty class list\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        logger.info(\"Starting T.A.rence \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping T.A.rence ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 44,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String LOG_FILE \u003d \"tarence.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_IN_TUTORIAL \u003d \"No such assignment exists!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d \"The assignment index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE \u003d \"Invalid file\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_IN_APPLICATION \u003d \"No module of this code exists!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_IN_TUTORIAL \u003d \"No student of this name exists!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX \u003d \"The tutorial index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_IN_APPLICATION \u003d \"No tutorial of this name exists!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            \"Tutorial index should only be a positive integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_IN_MODULE \u003d \"No such tutorial in this module!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_MULTIPLE \u003d \"Multiple tutorials of the same name exist!\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"Please specify the module code.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEK_IN_TUTORIAL \u003d \"No such week exists!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_SUGGESTED_CORRECTIONS \u003d \"%1$s %2$s not found! Did you mean one of the following:\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"\\n(Enter a number to select that option and re-run the command)\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB \u003d \"No such tab exists!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 8,
      "Ellieyee": 2,
      "-": 10,
      "lumos309": 9
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Attendance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.storage.JsonAdaptedModule;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Invoked when saving an Attendance object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts an Attendance object to String."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param attendance Attendance object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String representation of Attendance object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String attendanceListToString(Attendance attendance) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Map\u003cWeek, Map\u003cStudent, Boolean\u003e\u003e attendanceMap \u003d attendance.getAttendanceMap();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e attendanceStringMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (Week week : attendanceMap.keySet()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Map\u003cStudent, Boolean\u003e singleWeek \u003d attendanceMap.get(week);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Each student is encompassed in []."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String attendanceString \u003d \"[\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            for (Student s : singleWeek.keySet()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                LinkedHashMap\u003cString, String\u003e studentMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_NAME, s.getName().toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_EMAIL, s.getEmail().toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_MATRIC_NUMBER, s.getMatricNum().toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_NUSNET_ID, s.getNusnetId().toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_MODULE_CODE, s.getModCode().toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_TUTORIAL_NAME, s.getTutName().toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMap.put(JsonAdaptedModule.STUDENT_ATTENDANCE_STATUS, singleWeek.get(s).toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                attendanceString \u003d attendanceString + studentMap.toString() + \"],[\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Case when there are no students."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (attendanceString.equals(\"[\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                attendanceString +\u003d \"]\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                // Remove the last square bracket"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                attendanceString \u003d attendanceString.substring(0, (attendanceString.length() - 2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Mapping of weeks to studentStrings example:  {1\u003d[{studentObe}],[{studentTwo}],"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            //                                               2\u003d[{studentOne}],[{studentTwo}]}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            //where \u00271\u0027 and \u00272\u0027 are the weeks and studentOne and studentTwo are the String representations of 2 Students"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            attendanceStringMap.put(week.toString(), attendanceString);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return attendanceStringMap.toString();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the exact field of an identifier."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Pre-condition: Desired field must not be the last field of the string."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param identifier Desired field to extract."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param nextIdentifier Subsequent identifier located after the desired identified."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param sequence String that contains the fields and identifiers."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Exact String field of the identifier."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String extractField(String identifier, String nextIdentifier, String sequence) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return sequence.substring(sequence.indexOf(identifier)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + identifier.length() + 1, sequence.indexOf(nextIdentifier) - 2).trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the last field of an identifier."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param identifier Last field to be extracted from a String sequence."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param sequence String that contains the last field and identifier."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Exact String field of the identifier."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String extractLastField(String identifier, String sequence) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return sequence.substring(sequence.indexOf(identifier)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + identifier.length() + 1).replace(\"}\", \"\").trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts a list of Students to a String."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. [{studentName\u003dEllie Yee, studentEmail\u003de0035152@u.nus.edu.sg, studentMatricNumber\u003dOptionalA0155413M,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * studentNusnetId\u003dOptionalE0031550, studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session}]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentList List of Student objects."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String representation of a Student List."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String studentListToString(List\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentListString \u003d \"[\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (Student s : studentList) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            LinkedHashMap\u003cString, String\u003e studentMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMap.put(JsonAdaptedModule.STUDENT_NAME, s.getName().toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMap.put(JsonAdaptedModule.STUDENT_EMAIL, s.getEmail().toString());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMap.put(JsonAdaptedModule.STUDENT_MATRIC_NUMBER, s.getMatricNum().toString());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMap.put(JsonAdaptedModule.STUDENT_NUSNET_ID, s.getNusnetId().toString());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMap.put(JsonAdaptedModule.STUDENT_MODULE_CODE, s.getModCode().toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMap.put(JsonAdaptedModule.STUDENT_TUTORIAL_NAME, s.getTutName().toString());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentListString \u003d studentListString + studentMap.toString() + \"],[\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Remove the last instance of \"[,]\" from studentListString"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (studentList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentListString \u003d studentListString.substring(0, (studentListString.length() - 2));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // There are no students in the list. studentListString is just \"[]\"."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentListString \u003d studentListString + \"]\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return studentListString;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Creates a Student Object with the given parsed String params."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentNameString Parsed student name string."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentEmailString Parsed student email string."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentMatricNumberString Parsed student matriculation number string."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentNusnetIdString Parsed student NUSNET ID string."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentModuleCodeString Parsed student module code string."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentTutorialNameString Parsed student tutorial string."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Student object."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Student studentStringsToStudent(String studentNameString, String studentEmailString,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                                                  String studentMatricNumberString, String studentNusnetIdString,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                                                  String studentModuleCodeString, String studentTutorialNameString) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Populates the fields needed to create a Student object."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Name studentName \u003d new Name(studentNameString);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Email studentEmail \u003d new Email(studentEmailString);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Optional\u003cMatricNum\u003e studentMatricNumber \u003d Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (studentMatricNumberString.contains(\"empty\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMatricNumber \u003d Optional.empty();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMatricNumberString \u003d studentMatricNumberString.replace(\"Optional\", \"\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentMatricNumber \u003d Optional.of(new MatricNum(studentMatricNumberString));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Optional\u003cNusnetId\u003e studentNusnetId \u003d Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (studentNusnetIdString.contains(\"empty\")) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentNusnetId \u003d Optional.empty();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentNusnetIdString \u003d studentNusnetIdString.replace(\"Optional\", \"\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentNusnetId \u003d Optional.of(new NusnetId(studentNusnetIdString));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ModCode studentModuleCode \u003d new ModCode(studentModuleCodeString);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        TutName studentTutorialName \u003d new TutName(studentTutorialNameString);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new Student(studentName, studentEmail, studentMatricNumber, studentNusnetId,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentModuleCode, studentTutorialName);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Checks if the tutorialString contains valid fields."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tutorialString"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Boolean isValidTutorialString(String tutorialString) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (tutorialString.contains(JsonAdaptedModule.TUTORIAL_WEEKS)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_DAY)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_DURATION)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_MODULE_CODE)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_NAME)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_START_TIME)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_STUDENT_LIST)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 tutorialString.contains(JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_NAME)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_DAY))"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_DAY)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_START_TIME))"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_START_TIME)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_WEEKS))"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_WEEKS)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_DURATION))"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_DURATION)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_STUDENT_LIST))"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_STUDENT_LIST)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST))"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c tutorialString.indexOf(JsonAdaptedModule.TUTORIAL_MODULE_CODE)));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Checks if the studentString contains valid fields and the order correct."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentString String representing a Student from Json object."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Boolean isValidStudentString(String studentString) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (studentString.contains(JsonAdaptedModule.STUDENT_EMAIL)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 studentString.contains(JsonAdaptedModule.STUDENT_MATRIC_NUMBER)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 studentString.contains(JsonAdaptedModule.STUDENT_MODULE_CODE)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 studentString.contains(JsonAdaptedModule.STUDENT_NAME)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 studentString.contains(JsonAdaptedModule.STUDENT_NUSNET_ID)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 studentString.contains(JsonAdaptedModule.STUDENT_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (studentString.indexOf(JsonAdaptedModule.STUDENT_NAME)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c studentString.indexOf(JsonAdaptedModule.STUDENT_EMAIL))"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (studentString.indexOf(JsonAdaptedModule.STUDENT_EMAIL)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c studentString.indexOf(JsonAdaptedModule.STUDENT_MATRIC_NUMBER))"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (studentString.indexOf(JsonAdaptedModule.STUDENT_MATRIC_NUMBER)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c studentString.indexOf(JsonAdaptedModule.STUDENT_NUSNET_ID))"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (studentString.indexOf(JsonAdaptedModule.STUDENT_NUSNET_ID)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c studentString.indexOf(JsonAdaptedModule.STUDENT_MODULE_CODE))"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 (studentString.indexOf(JsonAdaptedModule.STUDENT_MODULE_CODE)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003c studentString.indexOf(JsonAdaptedModule.STUDENT_TUTORIAL_NAME)));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts a tutorialString to a LinkedHashMap. Represents the components needed to construct a Tutorial object."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tutorialString String."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return LinkedHashMap."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e tutorialStringToMap(String tutorialString)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!isValidTutorialString(tutorialString)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new IllegalValueException(\"Tutorial string has invalid fields\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e tutorialStringToMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Extracts the correct Strings needed to populate the LinkedHashMap."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Relevant terms to extract are tutorialName, tutorialDayOfWeek, studentListString, tutorialModuleCode,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // tutorialStartTime, tutorialDuration, tutorialWeeks."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialNameFromTutorialString \u003d extractField(JsonAdaptedModule.TUTORIAL_NAME,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_DAY, tutorialString);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialDayOfWeek \u003d extractField(JsonAdaptedModule.TUTORIAL_DAY,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_START_TIME, tutorialString);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialStartTime \u003d extractField(JsonAdaptedModule.TUTORIAL_START_TIME,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_WEEKS, tutorialString);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialWeeks \u003d extractField(JsonAdaptedModule.TUTORIAL_WEEKS,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_DURATION, tutorialString);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialDuration \u003d extractField(JsonAdaptedModule.TUTORIAL_DURATION,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_STUDENT_LIST, tutorialString);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialStudentList \u003d extractField(JsonAdaptedModule.TUTORIAL_STUDENT_LIST,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST, tutorialString);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialAttendanceList \u003d extractField(JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.TUTORIAL_MODULE_CODE, tutorialString);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialModuleCode \u003d extractLastField(JsonAdaptedModule.TUTORIAL_MODULE_CODE, tutorialString);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Places the extracted Strings into a HashMap"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_NAME, tutorialNameFromTutorialString);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_DAY, tutorialDayOfWeek);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_START_TIME, tutorialStartTime);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_WEEKS, tutorialWeeks);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_DURATION, tutorialDuration);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_STUDENT_LIST, tutorialStudentList);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST, tutorialAttendanceList);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorialStringToMap.put(JsonAdaptedModule.TUTORIAL_MODULE_CODE, tutorialModuleCode);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return tutorialStringToMap;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts a studentString, representing a single student, to a Student object."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentString String sequence representing a single Student."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Student object."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Student studentStringToStudent(String studentString) throws IllegalValueException {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!isValidStudentString(studentString)) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new IllegalValueException(String.format(JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    Student.class.getSimpleName()));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Extracts the correct Strings needed to create a Student object."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentNameString \u003d extractField(JsonAdaptedModule.STUDENT_NAME,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.STUDENT_EMAIL, studentString);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentEmailString \u003d extractField(JsonAdaptedModule.STUDENT_EMAIL,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.STUDENT_MATRIC_NUMBER, studentString);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentMatricNumberString \u003d extractField(JsonAdaptedModule.STUDENT_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.STUDENT_NUSNET_ID, studentString);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentNusnetIdString \u003d extractField(JsonAdaptedModule.STUDENT_NUSNET_ID,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.STUDENT_MODULE_CODE, studentString);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentModuleCodeString \u003d extractField(JsonAdaptedModule.STUDENT_MODULE_CODE,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonAdaptedModule.STUDENT_TUTORIAL_NAME, studentString);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String studentTutorialNameString \u003d extractLastField(JsonAdaptedModule.STUDENT_TUTORIAL_NAME, studentString);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Student studentFromJson \u003d studentStringsToStudent(studentNameString, studentEmailString,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentMatricNumberString, studentNusnetIdString,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentModuleCodeString, studentTutorialNameString);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return studentFromJson;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts a student ListString to a list of Students."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentListString A String representing 0,1 or more Students."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return List of Student objects."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static List\u003cStudent\u003e studentStringToList(String studentListString) throws IllegalValueException {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (studentListString.equals(\"[]\")) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return studentList; //studentString is empty."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] students \u003d studentListString.split(\"\\\\]\\\\,\\\\[\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String s : students) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String studentString \u003d s.replace(\"[\", \"\").replace(\"]\", \"\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Student studentFromJson \u003d studentStringToStudent(studentString);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            studentList.add(studentFromJson);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Used to parse a studentString with attendance field, to a Map of Student objects and Booleans."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param studentAttendanceString A String representing students and their respective attendances for one week."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return A Map of Student-Boolean, which will be used to construct the Attendance object."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Map\u003cStudent, Boolean\u003e studentAttendanceStringToMap(String studentAttendanceString)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Map\u003cStudent, Boolean\u003e studentBooleanMap \u003d new LinkedHashMap\u003cStudent, Boolean\u003e();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Splits all the studentStrings to each individual student."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] students \u003d studentAttendanceString.split(\"\\\\]\\\\,\\\\[\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String stringForOneStudent : students) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Checks if the identifiers that represent a Student String is present"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // No error is thrown as some tutorials can be empty and have an empty list of students."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (isValidStudentString(stringForOneStudent)) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                // Removes all square brackets for each student string sequence."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                stringForOneStudent \u003d (stringForOneStudent.replace(\"]\", \"\").replace(\"[\", \"\"));"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                // Creates a Student Object \u0026 retrieves the Boolean Attendance status"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentNameString \u003d extractField(JsonAdaptedModule.STUDENT_NAME,"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        JsonAdaptedModule.STUDENT_EMAIL, stringForOneStudent);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentEmailString \u003d extractField(JsonAdaptedModule.STUDENT_EMAIL,"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        JsonAdaptedModule.STUDENT_MATRIC_NUMBER, stringForOneStudent);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentMatricNumberString \u003d extractField(JsonAdaptedModule.STUDENT_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        JsonAdaptedModule.STUDENT_NUSNET_ID,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        stringForOneStudent);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentNusnetIdString \u003d extractField(JsonAdaptedModule.STUDENT_NUSNET_ID,"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        JsonAdaptedModule.STUDENT_MODULE_CODE,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        stringForOneStudent);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentModuleCodeString \u003d extractField(JsonAdaptedModule.STUDENT_MODULE_CODE,"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        JsonAdaptedModule.STUDENT_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        stringForOneStudent);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentTutorialNameString \u003d extractField(JsonAdaptedModule.STUDENT_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        JsonAdaptedModule.STUDENT_ATTENDANCE_STATUS,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        stringForOneStudent);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                Student studentFromAttendance \u003d studentStringsToStudent(studentNameString, studentEmailString,"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        studentMatricNumberString, studentNusnetIdString,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        studentModuleCodeString, studentTutorialNameString);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentAttendanceStatus \u003d extractLastField(JsonAdaptedModule.STUDENT_ATTENDANCE_STATUS,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        stringForOneStudent);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                Boolean attendanceStatus \u003d Boolean.parseBoolean(studentAttendanceStatus);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentBooleanMap.put(studentFromAttendance, attendanceStatus);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return studentBooleanMap;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Invoked during reading from Json String."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts an attendanceString eg \"[{studentName\u003dEllie Yee, studentEmail\u003de0035152@u.nus.edu.sg,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * studentMatricNumber\u003dOptional[A0155413M], studentNusnetId\u003dOptional[E0031550],"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session, studentAttendance\u003dfalse}]\""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * to a Student-Boolean pair and then an Attendance object."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param attendanceString See above comments."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param weeks Set of Weeks."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return An attendance object."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IllegalValueException when there is an error during parsing."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Attendance attendanceStringToAttendance(String attendanceString, Set\u003cWeek\u003e weeks)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Map\u003cWeek, Map\u003cStudent, Boolean\u003e\u003e attendance \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Week largestWeek \u003d Collections.max(weeks);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Convert the set to an ordered arrayList of weeks,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cWeek\u003e arrayOfWeeks \u003d new ArrayList\u003cWeek\u003e();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        arrayOfWeeks.addAll(weeks);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayOfWeeks.size(); i++) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Week currentWeek \u003d arrayOfWeeks.get(i);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Map\u003cStudent, Boolean\u003e studentBooleanMap \u003d new HashMap\u003cStudent, Boolean\u003e();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (currentWeek !\u003d largestWeek) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                Week nextWeek \u003d arrayOfWeeks.get(i + 1);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentAttendanceString \u003d extractField(currentWeek.toString() + \"\u003d\","
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        nextWeek.toString() + \"\u003d\", attendanceString);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentBooleanMap \u003d studentAttendanceStringToMap(studentAttendanceString);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } else if (currentWeek \u003d\u003d largestWeek) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                String studentAttendanceString \u003d extractLastField(currentWeek.toString() + \"\u003d\","
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        attendanceString);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                studentBooleanMap \u003d studentAttendanceStringToMap(studentAttendanceString);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            attendance.put(currentWeek, studentBooleanMap);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new Attendance(attendance);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Invoked during reading of Json String."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Tutorial Object given the TutorialMap constructed from Json."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tutorialMap LinkedHashMap obtained after parsing Tutorial String."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Tutorial object."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IllegalValueException when Tutorial components are unable to be parsed correctly from Strings."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Tutorial tutorialMapToTutorial(LinkedHashMap\u003cString, String\u003e tutorialMap)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            List\u003cStudent\u003e studentList \u003d studentStringToList(tutorialMap.get(JsonAdaptedModule.TUTORIAL_STUDENT_LIST));"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            TutName tutorialName \u003d ParserUtil.parseTutorialName(tutorialMap.get(JsonAdaptedModule.TUTORIAL_NAME));"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            DayOfWeek day \u003d ParserUtil.parseDayOfWeek(tutorialMap.get(JsonAdaptedModule.TUTORIAL_DAY));"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Set\u003cWeek\u003e weeks \u003d ParserUtil.parseWeeks(tutorialMap.get(JsonAdaptedModule.TUTORIAL_WEEKS));"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            ModCode modCode \u003d ParserUtil.parseModCode(tutorialMap.get(JsonAdaptedModule.TUTORIAL_MODULE_CODE));"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Duration duration \u003d Duration.parse(tutorialMap.get(JsonAdaptedModule.TUTORIAL_DURATION));"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(tutorialMap.get(JsonAdaptedModule.TUTORIAL_START_TIME),"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Attendance attendance \u003d attendanceStringToAttendance(tutorialMap"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    .get(JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST), weeks);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Tutorial t \u003d new Tutorial(tutorialName, day, startTime, weeks, duration, studentList, modCode, attendance);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return t;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new IllegalValueException(JsonAdaptedModule.MISSING_GENERIC_FIELD + e.getMessage());"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Thrown by either Duration or LocalTime objects."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String errorMessage \u003d String.format(JsonAdaptedModule.INVALID_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    Duration.class.getSimpleName())"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    + \" Or \" + String.format(JsonAdaptedModule.INVALID_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    LocalTime.class.getSimpleName());"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new IllegalValueException(errorMessage);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "AhmadHatziq": 468,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/tarence/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/AutocompleteHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.ApplicationParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Handles autocompletion of partial inputs from user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AutocompleteHandler {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String ERROR_AUTOCOMPLETE_DATA_NOT_FOUND \u003d \"No autofill data found.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public AutocompleteHandler(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Main method for handling autocomplete requests from user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param input Partial input string from user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return Completed string to be filled into the input command box.."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException if the users tries to autocomplete an invalid/unsupported field."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String handle(String input) throws ParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput partialInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (model.hasInputChanged()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.setInputChangedToFalse();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                // find and display new suggested autocompletions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                partialInput \u003d new ApplicationParser()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        .parsePartialInput(input, model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.storeSuggestedCompletions(partialInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                // display next suggestion in stored list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                partialInput \u003d model.getSuggestedCompletions();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                // simulate wraparound of completions list by removing first item and placing at back of list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                partialInput.getCompletions().add(partialInput.getCompletions().remove(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return StringUtils.removeEnd(partialInput.getOriginalInput(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    partialInput.getLastArgument()) + partialInput.getCompletions().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new IndexOutOfBoundsException(ERROR_AUTOCOMPLETE_DATA_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 53
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Tries to complete the current data field the user is typing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param partialInput The partial input from the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return the autocomplete search result."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException If no results can be found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    String autocomplete(String partialInput) throws ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void markInputChanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @see seedu.tarence.model.Model#getApplication()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ReadOnlyApplication getApplication();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tutorials */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cTutorial\u003e getFilteredTutorialList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the user prefs\u0027 application file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Path getApplicationFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 24,
      "-": 38,
      "lumos309": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.TabNames;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.ApplicationParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final ApplicationParser applicationParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        applicationParser \u003d new ApplicationParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cTutorial\u003e tutorialToStore \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cTabNames\u003e tabToDisplay \u003d Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // processes multiple commands in user input if they exit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String[] commandStrings \u003d commandText.split(\"\u0026\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // pushes commands from back to front on top of the pending commands stack"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (int i \u003d commandStrings.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Command tempCommand \u003d applicationParser.parseCommand(commandStrings[i]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            model.storePendingCommand(tempCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        StringBuffer combinedFeedback \u003d new StringBuffer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // clears log of pending commands until it meets a command that requires further user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        while (model.hasPendingCommand() \u0026\u0026 !model.peekPendingCommand().needsInput()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            command \u003d model.getPendingCommand(); // first user-inputted command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // if next command requires user input, checks if current command is relevant"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (model.hasPendingCommand()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    \u0026\u0026 model.peekPendingCommand().needsInput()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    \u0026\u0026 !model.peekPendingCommand().needsCommand(command)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.getPendingCommand(); // clear any pending commands if user has entered a different command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            CommandResult currCommandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // concatenate all results into a single result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            combinedFeedback.append(currCommandResult.getFeedbackToUser() + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // check for exit/help condition"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (currCommandResult.isExit() || currCommandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                // this means that previous commands won\u0027t be shown if help is inside pending commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return currCommandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                storage.saveApplication(model.getApplication());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            // If attendance is to be displayed, it will be passed into the commandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (currCommandResult.isShowAttendance()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                tutorialToStore \u003d Optional.of(currCommandResult.getTutorialAttendance());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            // If tab is to be displayed, it will be passed into the commandResult"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (currCommandResult.isChangeTabs()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                tabToDisplay \u003d Optional.of(currCommandResult.getTabToDisplay());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // creates a new command concatenating all command result messages into a single result"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (tutorialToStore.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            commandResult \u003d new CommandResult(combinedFeedback.toString(), tutorialToStore.get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else if (tabToDisplay.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            commandResult \u003d new CommandResult(combinedFeedback.toString(), tabToDisplay.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            commandResult \u003d new CommandResult(combinedFeedback.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String autocomplete(String partialInput) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new AutocompleteHandler(model).handle(partialInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void markInputChanged() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.setInputChangedToTrue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return model.getApplication();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return model.getApplicationFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 34,
      "Ellieyee": 57,
      "-": 57,
      "lumos309": 12
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Adds a module into T.A.rence."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addModule\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(), \"addMod\", \"addmod\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Module to the Application. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + PREFIX_MODULE + \"CS1010S \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public AddModuleCommand(Module newModule) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(newModule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.module \u003d newModule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (model.hasModule(module)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new CommandException((MESSAGE_DUPLICATE_MODULE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, module));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "AhmadHatziq": 68
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/AddStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Adds a student into T.A.rence."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addStudent\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person into T.A.rence. \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Full format: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"Lab 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_MODULE + \"CS1010\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Shortcut Format: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_INDEX + \"TUTORIAL_INDEX\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This person already exists!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS \u003d \"No such module and/or tutorial class exists.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_TUTORIAL_IDX_OUT_OF_BOUNDS \u003d \"The given tutorial index %d is out of bounds.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        \"addstu\", \"addstud\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Student toAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Index tutIdx;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.toAdd \u003d student;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutIdx \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public AddStudentCommand(Student student, Index tutorialIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(tutorialIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.toAdd \u003d student;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutIdx \u003d tutorialIndex;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (tutIdx !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ObservableList\u003cTutorial\u003e tutList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Tutorial tutorial \u003d getTutorial(tutList, tutIdx.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            TutName tutName \u003d tutorial.getTutName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ModCode modCode \u003d tutorial.getModCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.toAdd \u003d new Student(toAdd.getName(), toAdd.getEmail(), toAdd.getMatricNum(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    toAdd.getNusnetId(), modCode, tutName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!model.hasTutorialInModule(toAdd.getModCode(), toAdd.getTutName())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode \u003d toAdd.getModCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            TutName tutName \u003d toAdd.getTutName();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            // find tutorials with same name and similar modcodes, and similar names and same modcode"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            List\u003cModCode\u003e similarModCodes \u003d getSimilarModCodesWithTutorial(modCode, tutName, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            List\u003cTutName\u003e similarTutNames \u003d getSimilarTutNamesWithModule(modCode, tutName, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (similarModCodes.size() \u003d\u003d 0 \u0026\u0026 similarTutNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_CLASS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            String suggestedCorrections \u003d createSuggestedCommands(similarModCodes, modCode,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    similarTutNames, tutName, toAdd, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    modCode.toString() + \" \" + tutName.toString()) + suggestedCorrections);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addStudentToTutorial(toAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code AddStudentCommand}s from a list of {@code ModCode}s."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the suggested {@code ModCode}s and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedCommands(List\u003cModCode\u003e similarModCodes, ModCode originalModCode,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                           List\u003cTutName\u003e similarTutNames, TutName originalTutName,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                           Student student, Model model) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Student newStudent \u003d new StudentBuilder(student).withModCode(similarModCode.toString()).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new AddStudentCommand(newStudent));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\", \").append(originalTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (TutName similarTutName: similarTutNames) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Student newStudent \u003d new StudentBuilder(student).withTutName(similarTutName.toString()).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            AddStudentCommand newCommand \u003d new AddStudentCommand(newStudent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (suggestedCommands.stream()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    .anyMatch(existingCommand -\u003e existingCommand.equals(newCommand))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(newCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(originalModCode).append(\", \").append(similarTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the tutorial based on the given index"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param tutList - existing list of tutorials"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param tutIdx - index provided by the user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws CommandException when the given tutorial is out of bounds"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tutorial getTutorial(ObservableList\u003cTutorial\u003e tutList, Integer tutIdx) throws CommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return tutList.get(tutIdx);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TUTORIAL_IDX_OUT_OF_BOUNDS, tutIdx + 1));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 13,
      "Ellieyee": 64,
      "AhmadHatziq": 3,
      "-": 33,
      "lumos309": 87
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/AddTutorialCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DURATION_IN_MINUTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.finder.Finder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Adds a tutorial into T.A.rence."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class AddTutorialCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTutorial\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Tutorial to the Application.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_DAY + \"DAY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKS + \"WEEKS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_DURATION_IN_MINUTES + \"DURATION_IN_MINUTES\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"Lab 01 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_MODULE + \"PC1431 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_DAY + \"MONDAY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + PREFIX_TUTORIAL_START_TIME + \"1200 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKS + \"7,10,12 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + PREFIX_TUTORIAL_DURATION_IN_MINUTES + \"120\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"Omit w/WEEKS field for default range (weeks 3-13), or specify in the form of a list (e.g. 1,2,3), a \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"range (4-6), or \u0027odd\u0027 or \u0027even\u0027 for those weeks only.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"Wow, this tutorial already exists!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Error: No such module exists.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tutorial added: %1$s. Day: %2$s. Weeks: %3$s. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                                                + \"Start Time: %4$s. Duration: %5$s MINS.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(), \"addtut\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Tutorial tutorial;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public AddTutorialCommand(Tutorial newTutorial) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(newTutorial);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorial \u003d newTutorial;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public CommandResult execute (Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // reject input if requested tutorial already exists in application"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (model.hasTutorial(tutorial)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModCode modCode \u003d tutorial.getModCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!model.hasModuleOfCode(modCode)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            List\u003cModCode\u003e similarModCodes \u003d new Finder(model).findSimilarModCodes(modCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (similarModCodes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            String suggestedCorrections \u003d createSuggestedCommands(similarModCodes, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Module\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    modCode) + suggestedCorrections);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        model.addTutorial(tutorial);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorialToModule(tutorial);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tutorial, tutorial.getTimeTable().getDay(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                tutorial.getTimeTable().getWeeks(), tutorial.getTimeTable().getStartTime(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                tutorial.getTimeTable().getDuration().toMinutes()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code AddTutorialCommand}s from a list of {@code ModCode}s."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the suggested {@code ModCode}s and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedCommands(List\u003cModCode\u003e similarModCodes, Model model) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Tutorial newTutorial \u003d new TutorialBuilder(tutorial).withModCode(similarModCode).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new AddTutorialCommand(newTutorial));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!(other instanceof AddTutorialCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return tutorial.equals(((AddTutorialCommand) other).tutorial);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 11,
      "AhmadHatziq": 65,
      "lumos309": 75
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/ChangeTabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Displays tab information to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ChangeTabCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s has been displayed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String[] modName \u003d {\"m\", \"mod\", \"mods\", \"module\", \"modules\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String[] tutNames \u003d {\"t\", \"tut\", \"tuts\", \"tutorial\", \"tutorials\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String[] studentNames \u003d {\"s\", \"stu\", \"students\", \"student\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \": Displays tab information to the user.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Parameters: tab to display\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mod\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String tabName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TabNames tabToDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ChangeTabCommand(String tabToDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tabName \u003d tabToDisplay.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (tabName.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tabToDisplay \u003d getTabvalue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tabToDisplay.toString().toLowerCase()), tabToDisplay);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the Tabname that matches user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * TODO: pretty sure there\u0027s a better way to do this. do let me know how i can improve iy"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TabNames getTabvalue() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (Arrays.stream(modName).anyMatch(name -\u003e name.equals(tabName))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return TabNames.MODULES;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (Arrays.stream(tutNames).anyMatch(name -\u003e name.equals(tabName))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return TabNames.TUTORIALS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (Arrays.stream(studentNames).anyMatch(name -\u003e name.equals(tabName))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return TabNames.STUDENTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new CommandException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!(other instanceof ChangeTabCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return tabName.equals(((ChangeTabCommand) other).tabName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 103
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.finder.Finder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if command requires prior user input, else false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public abstract boolean needsInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if prior command is required for execution, else false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Only needed for commands that require prior user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public abstract boolean needsCommand(Command command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns a list of {@code ModCode}s similar to the given one, and corresponding to a module containing a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * target tutorial. Used for generating suggested corrections to modcode input errors by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode The incorrectly entered modcode from the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName The target tutorial that must be present in the suggested modules."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The model in which to search."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a list of modcodes fulfilling the above criteria."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws CommandException if no similar modules are found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected List\u003cModCode\u003e getSimilarModCodesWithTutorial (ModCode modCode, TutName tutName, Model model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new Finder(model).findSimilarModCodes(modCode)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .stream().filter(similarModCode -\u003e model.hasTutorialInModule(similarModCode, tutName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns a list of {@code TutName}s similar to the given one, and corresponding to a tutorial belonging to a"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * target module. Used for generating suggested corrections to modcode input errors by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode The target module that must be present in the suggested tutorials."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName The incorrectly entered tutorial name from the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The model in which to search."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a list of tutnames fulfilling the above criteria."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws CommandException if no similar tutorial names are found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected List\u003cTutName\u003e getSimilarTutNamesWithModule (ModCode modCode, TutName tutName, Model model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new Finder(model).findSimilarTutNames(tutName)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .stream().filter(similarTutName -\u003e model.hasTutorialInModule(modCode, similarTutName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns a list of {@code Name}s similar to the given one, and corresponding to a student in a tutorial/module"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * combination. Used for generating suggested corrections to student name input errors by the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode The target module the suggested student must be in."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName The target tutorial the suggested student must be in."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param studName The incorrectly entered student name from the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The model in which to search."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a list of similar student names fulfilling the above criteria."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws CommandException if no similar students are found."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    List\u003cName\u003e getSimilarStudNamesWithTutorialAndModule (ModCode modCode, TutName tutName, Name studName, Model model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new Finder(model).findSimilarNames(studName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(similarStudName -\u003e model.hasStudentInTutorialAndModule(similarStudName, tutName, modCode))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 12,
      "Ellieyee": 3,
      "-": 17,
      "lumos309": 57
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** The application should changeTabs */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean changeTabs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** The application should display attendance */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean hasAttendanceDisplay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** The attendance to be displayed by the application */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tutorial tutorialAttendanceToDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** The type of tab to display **/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TabNames tabToDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.hasAttendanceDisplay \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.changeTabs \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * a specified {@code Tutorial} and other fields set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public CommandResult(String feedbackToUser, Tutorial tutorialAttendanceToDisplay) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.changeTabs \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutorialAttendanceToDisplay \u003d tutorialAttendanceToDisplay;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.hasAttendanceDisplay \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * a specified {@code tabToDisplay} and other fields set to their default value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public CommandResult(String feedbackToUser, TabNames tabToDisplay) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.hasAttendanceDisplay \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tabToDisplay \u003d tabToDisplay;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.changeTabs \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean isShowAttendance() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return hasAttendanceDisplay;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean isChangeTabs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return changeTabs;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TabNames getTabToDisplay() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.tabToDisplay;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Tutorial getTutorialAttendance() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.tutorialAttendanceToDisplay;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 hasAttendanceDisplay \u003d\u003d otherCommandResult.hasAttendanceDisplay"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 changeTabs \u003d\u003d otherCommandResult.changeTabs;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, hasAttendanceDisplay, changeTabs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 67,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/ConfirmNoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represent the user declining a previously stored command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * When executed, removes the stored command from the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class ConfirmNoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_CONFIRM_NO_SUCCESS \u003d \"Command cancelled\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD, \"no\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!model.hasPendingCommand()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             * While this is technically not an unknown command, from the user\u0027s point of view it is an illegal command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             * We can only check for the validity of this command here and not in the ApplicationParser, to which the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             * model is not available. Hence, the exception is only thrown at this point."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.getPendingCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(MESSAGE_CONFIRM_NO_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "lumos309": 50
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/ConfirmYesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represent the user confirming a previously stored command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * When executed, retrieves and execute the stored command, and returns its {@code CommandResult}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class ConfirmYesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"y\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD, \"yes\", \"confirm\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    // returns the result of executing the stored pending command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!model.hasPendingCommand()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             * While this is technically not an unknown command, from the user\u0027s point of view it is an illegal command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             * We can only check for the validity of this command here and not in the ApplicationParser, to which the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             * model is not available. Hence, the exception is only thrown at this point."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "             */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getPendingCommand().execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "lumos309": 48
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_MODULE_IN_APPLICATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.finder.Finder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Deletes a person identified using its displayed index from T.A.rence."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteMod\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_CONFIRM_DELETE_NONEMPTY_MODULE \u003d \"WARNING: Module %1$s \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"contains %2$d tutorial(s). Are you sure you want to delete it?\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"(y/n)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \": Deletes the module identified by either the index number used in the displayed module list,\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"or the specified module code.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" 1\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + COMMAND_WORD + \" m/GER1000\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        \"deletemod\", \"delmodule\", \"delmod\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final Optional\u003cModCode\u003e targetModCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteModuleCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetIndex \u003d Optional.of(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetModCode \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteModuleCommand(ModCode modCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetModCode \u003d Optional.of(modCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ObservableList\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module moduleToDelete \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (targetIndex.get().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            moduleToDelete \u003d lastShownList.get(targetIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode \u003d targetModCode.get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (!model.hasModuleOfCode(modCode)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                List\u003cModCode\u003e similarModCodes \u003d new Finder(model).findSimilarModCodes(modCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (similarModCodes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_MODULE_IN_APPLICATION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                String suggestedCorrections \u003d createSuggestedCommands(similarModCodes, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Module\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        modCode) + suggestedCorrections);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : lastShownList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (module.getModCode().equals(targetModCode.get())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    moduleToDelete \u003d module;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(moduleToDelete);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!moduleToDelete.getTutorials().isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            model.storePendingCommand(new DeleteModuleVerifiedCommand(moduleToDelete));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CONFIRM_DELETE_NONEMPTY_MODULE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    moduleToDelete,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    moduleToDelete.getTutorials().size()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteTutorialsFromModule(moduleToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code DeleteModuleCommand}s from a list of {@code ModCode}s."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the suggested {@code ModCode}s and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedCommands(List\u003cModCode\u003e similarModCodes, Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new DeleteModuleCommand(similarModCode));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Need to consider case where targetIndex is not specified"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteModuleCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 11,
      "lumos309": 142
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DeleteModuleVerifiedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represents a followup to {@code DeletedModuleCommand} where the {@code Module} to be deleted has been verified as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * a valid one in the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteModuleVerifiedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Module moduleToDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    DeleteModuleVerifiedCommand(Module moduleToDelete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.moduleToDelete \u003d moduleToDelete;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteTutorialsFromModule(moduleToDelete);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                moduleToDelete));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return command instanceof ConfirmYesCommand || command instanceof ConfirmNoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "lumos309": 26
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DeleteStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Deletes a student identified using its displayed index from T.A.rence."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteStudent\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        \"deletestu\", \"deletestud\", \"delstudent\", \"delstu\", \"delstud\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                || (other instanceof DeleteStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 12,
      "Ellieyee": 10,
      "-": 34,
      "lumos309": 25
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DeleteTutorialCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Deletes a tutorial identified using its displayed index from T.A.rence."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * TODO: disallow deleting non-empty tutorials?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteTutorialCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTutorial\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_DELETE_TUTORIAL_SUCCESS \u003d \"Deleted Tutorial: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_CONFIRM_DELETE_NONEMPTY_TUTORIAL \u003d \"WARNING: Tutorial %1$s \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"contains %2$d student(s). Are you sure you want to delete it?\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"(y/n)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \": Deletes the tutorial identified by the index number used in the displayed tutorial list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"or the specified tutorial name and module code.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + COMMAND_WORD + \"tn/tut1\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + COMMAND_WORD + \"tn/Lab 1 m/PC1431\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        \"deletetut\", \"deleteclass\", \"deltutorial\", \"deltut\", \"delclass\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final Optional\u003cModCode\u003e targetModCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final Optional\u003cTutName\u003e targetTutName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteTutorialCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetIndex \u003d Optional.of(targetIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetModCode \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetTutName \u003d Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteTutorialCommand(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetModCode \u003d Optional.of(modCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetTutName \u003d Optional.of(tutName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteTutorialCommand(TutName tutName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetModCode \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetTutName \u003d Optional.of(tutName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorialToDelete \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (targetIndex.get().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorialToDelete \u003d lastShownList.get(targetIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (targetModCode.isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode \u003d targetModCode.get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            TutName tutName \u003d targetTutName.get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (!model.hasTutorialInModule(modCode, tutName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                // find tutorials with same name and similar modcodes, and similar names and same modcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                List\u003cModCode\u003e similarModCodes \u003d getSimilarModCodesWithTutorial(modCode, tutName, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                List\u003cTutName\u003e similarTutNames \u003d getSimilarTutNamesWithModule(modCode, tutName, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (similarModCodes.size() \u003d\u003d 0 \u0026\u0026 similarTutNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                String suggestedCorrections \u003d createSuggestedCommands(similarModCodes, modCode,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        similarTutNames, tutName, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        modCode.toString() + \" \" + tutName.toString()) + suggestedCorrections);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Tutorial tutorial : lastShownList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (tutorial.getTutName().equals(targetTutName.get())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    \u0026\u0026 tutorial.getModCode().equals(targetModCode.get())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    tutorialToDelete \u003d tutorial;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            int numberOfTutorialsOfName \u003d model.getNumberOfTutorialsOfName(targetTutName.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (numberOfTutorialsOfName \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_IN_APPLICATION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            } else if (numberOfTutorialsOfName \u003e 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_MULTIPLE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Tutorial tutorial : lastShownList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (tutorial.getTutName().equals(targetTutName.get())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    tutorialToDelete \u003d tutorial;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorialToDelete);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!tutorialToDelete.getStudents().isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            model.storePendingCommand(new DeleteTutorialVerifiedCommand(tutorialToDelete));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CONFIRM_DELETE_NONEMPTY_TUTORIAL,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    tutorialToDelete,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    tutorialToDelete.getStudents().size()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteStudentsFromTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TUTORIAL_SUCCESS, tutorialToDelete));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code AddStudentCommand}s from a list of {@code ModCode}s."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the suggested {@code ModCode}s and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedCommands(List\u003cModCode\u003e similarModCodes, ModCode originalModCode,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                           List\u003cTutName\u003e similarTutNames, TutName originalTutName, Model model) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new DeleteTutorialCommand(similarModCode, originalTutName));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\", \").append(originalTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (TutName similarTutName: similarTutNames) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            DeleteTutorialCommand newCommand \u003d new DeleteTutorialCommand(originalModCode, similarTutName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (suggestedCommands.stream()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    .anyMatch(existingCommand -\u003e existingCommand.equals(newCommand))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(newCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(originalModCode).append(\", \").append(similarTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Need to consider case where targetIndex is not specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                || (other instanceof DeleteTutorialCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTutorialCommand) other).targetIndex)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 targetTutName.equals(((DeleteTutorialCommand) other).targetTutName)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 targetModCode.equals(((DeleteTutorialCommand) other).targetModCode)); // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 12,
      "lumos309": 181
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DeleteTutorialVerifiedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represents a followup to {@code DeletedTutorialCommand} where the {@code Tutorial} to be deleted has been verified as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * a valid one in the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteTutorialVerifiedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Tutorial tutorialToDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    DeleteTutorialVerifiedCommand(Tutorial tutorialToDelete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.tutorialToDelete \u003d tutorialToDelete;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteStudentsFromTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(DeleteTutorialCommand.MESSAGE_DELETE_TUTORIAL_SUCCESS,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                tutorialToDelete));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return command instanceof ConfirmYesCommand || command instanceof ConfirmNoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "lumos309": 26
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DisplayAttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Displays the selected tutorial attendance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DisplayAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"displayAttendance\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance is displayed!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(), \"displayatt\", \"showattendance\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        \"showatt\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \": Displays the tutorial attendance identified by the tutorial name and module code of the tutorial.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Full format: \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TUTORIAL_NAME + \"Lab 02 \" + PREFIX_MODULE + \"CS2040 \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Shortcut format: \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_INDEX + \"TUTORIAL_INDEX\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final ModCode DEFAULT_MOD_CODE \u003d new ModCode(\"MC1010\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final TutName DEFAULT_TUT_NAME \u003d new TutName(\"notARealTutorial\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Index DEFAULT_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TutName tutName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Default Constructor with module code and tutorial name provided"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DisplayAttendanceCommand(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.index \u003d DEFAULT_INDEX;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor based on shortcut index format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DisplayAttendanceCommand(Index index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.modCode \u003d DEFAULT_MOD_CODE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutName \u003d DEFAULT_TUT_NAME;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cTutorial\u003e lastShownTutorialList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (tutName.equals(DEFAULT_TUT_NAME)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownTutorialList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Tutorial tutorial \u003d lastShownTutorialList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, tutorial), tutorial);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial tutorialToDisplay \u003d getTutorial(lastShownTutorialList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (tutorialToDisplay !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, tutorialToDisplay), tutorialToDisplay);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return handleSuggestedCommands(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Retrieves tutorial based on module code and tutorial name provided by user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws CommandException if no such module code or tutorial name is found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Tutorial getTutorial(List\u003cTutorial\u003e tutorialList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : tutorialList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if ((tutorial.getTutName().equals(tutName)) \u0026\u0026 (tutorial.getModCode().equals(modCode))) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return tutorial;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Handles the creating and processing of suggested {@code DisplayAttendanceCommand}s, if the user\u0027s input does not"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * match any combination of modules, tutorials and students."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private CommandResult handleSuggestedCommands(Model model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cTutName\u003e similarTutNames \u003d getSimilarTutNamesWithModule(modCode, tutName, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cModCode\u003e similarModCodes \u003d getSimilarModCodesWithTutorial(modCode, tutName, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (similarTutNames.size() \u003d\u003d 0 \u0026\u0026 similarModCodes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d createSuggestedCommands(similarModCodes, similarTutNames, model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                modCode.toString() + \" \" + tutName.toString()) + suggestedCorrections);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code DisplayAttendanceCommand}s from a list of {@code ModCode}s and {@code TutName}s."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarTutNames List of {@code TutName}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the suggested {@code ModCode}s and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedCommands(List\u003cModCode\u003e similarModCodes, List\u003cTutName\u003e similarTutNames, Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new DisplayAttendanceCommand(similarModCode, tutName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\", \").append(tutName).append(\"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (TutName similarTutName: similarTutNames) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            DisplayAttendanceCommand newCommand \u003d new DisplayAttendanceCommand(modCode, similarTutName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (suggestedCommands.stream()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    .anyMatch(existingCommand -\u003e existingCommand.equals(newCommand))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(newCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(modCode).append(\", \").append(similarTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                || ((other instanceof DisplayAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 (modCode.equals(((DisplayAttendanceCommand) other).modCode))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 (tutName.equals(((DisplayAttendanceCommand) other).tutName))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 (index.equals(((DisplayAttendanceCommand) other).index)))); // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 3,
      "Ellieyee": 125,
      "lumos309": 62
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/DisplayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a command to display a message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    DisplayCommand(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 31
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Edits the details of an existing person in the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param editStudentDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode modCode \u003d editStudentDescriptor.getModCode().orElse(studentToEdit.getModCode());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName tutName \u003d editStudentDescriptor.getTutName().orElse(studentToEdit.getTutName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cNusnetId\u003e nusnetId;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cMatricNum\u003e matricNum;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (editStudentDescriptor.getNusnetId() \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            nusnetId \u003d studentToEdit.getNusnetId();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            nusnetId \u003d editStudentDescriptor.getNusnetId();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (editStudentDescriptor.getMatricNum() \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            matricNum \u003d studentToEdit.getMatricNum();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            matricNum \u003d editStudentDescriptor.getMatricNum();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new Student(updatedName, updatedEmail, matricNum, nusnetId, modCode, tutName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private TutName tutName;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private ModCode modCode;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private Optional\u003cMatricNum\u003e matricNum;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private Optional\u003cNusnetId\u003e nusnetId;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setModCode(toCopy.modCode);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setTutName(toCopy.tutName);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setMatricNum(toCopy.matricNum);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setNusnetId(toCopy.nusnetId);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, email, modCode, tutName, matricNum, nusnetId);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Optional\u003cTutName\u003e getTutName() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.ofNullable(tutName);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setTutName(TutName tutName) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Optional\u003cModCode\u003e getModCode() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.ofNullable(modCode);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setModCode(ModCode modCode) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Optional\u003cMatricNum\u003e getMatricNum() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return matricNum;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setMatricNum(Optional\u003cMatricNum\u003e matricNum) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.matricNum \u003d matricNum;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Optional\u003cNusnetId\u003e getNusnetId() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return nusnetId;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setNusnetId(Optional\u003cNusnetId\u003e nusnetId) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "Ellieyee": 157,
      "-": 132,
      "lumos309": 18
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting T.A.rence as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "Ellieyee": 3,
      "-": 16,
      "lumos309": 17
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/ExportAttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Marks attendance of student in a specified tutorial."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ExportAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_EXPORT_ATTENDANCE_SUCCESS \u003d \"Attendance of %1$s exported successfully to /data\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static final String EXPORT_PATH \u003d \"./data/%s.csv\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Update the message to include index format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the attendance of a tutorial in a csv file.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"Lab 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"CS1010 \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cModCode\u003e targetModCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cTutName\u003e targetTutName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private Optional\u003cString\u003e fileName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ExportAttendanceCommand(ModCode modCode, TutName tutName, Index index, String fileName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetModCode \u003d Optional.ofNullable(modCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutName \u003d Optional.ofNullable(tutName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetIndex \u003d Optional.ofNullable(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.fileName \u003d Optional.ofNullable(fileName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Consider cases with multiple matching tutorials, students"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial targetTutorial \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetModCode.isPresent() \u0026\u0026 targetTutName.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with modcode and tut name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            targetTutorial \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .filter(tut -\u003e tut.getTutName().equals(targetTutName.get())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    \u0026\u0026 tut.getModCode().equals(targetModCode.get()))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .orElse(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (targetTutorial \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with tutorial index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetTutorial \u003d lastShownList.get(targetIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            fileName \u003d Optional.of("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(\"Attendance_%1$s_%2$s\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    targetTutorial.getTutName(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    targetTutorial.getModCode()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cStudent\u003e students \u003d targetTutorial.getStudents();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d targetTutorial.getTimeTable().getWeeks();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance attendance \u003d targetTutorial.getAttendance();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // try-with-resources"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try ("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Writer writer \u003d Files.newBufferedWriter(Paths.get(String.format(EXPORT_PATH, fileName.get())));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            List\u003cString\u003e headerList \u003d weeks.stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .map(week -\u003e \"Week \" + week.toString())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            headerList.add(0, \"Name\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String[] header \u003d new String[weeks.size() + 1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            header \u003d headerList.toArray(header);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            csvWriter.writeNext(header);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (Student student : students) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                List\u003cString\u003e rowList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                rowList.add(student.getName().toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                for (Week week : weeks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    rowList.add(attendance.isPresent(week, student) + \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String[] row \u003d new String[weeks.size() + 1];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                row \u003d rowList.toArray(row);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                csvWriter.writeNext(row);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (IOException | InvalidPathException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_ATTENDANCE_SUCCESS, targetTutorial.getTutName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof ExportAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetModCode.equals(((ExportAttendanceCommand) other).targetModCode)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetTutName.equals(((ExportAttendanceCommand) other).targetTutName)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ExportAttendanceCommand) other).targetIndex)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 fileName.equals(((ExportAttendanceCommand) other).fileName)); // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 171
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Finds and lists all persons in a stated class slot whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredStudentList().size()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                TabNames.STUDENTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "Ellieyee": 9,
      "-": 34,
      "lumos309": 16
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "Ellieyee": 2,
      "-": 19,
      "lumos309": 17
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.StudentsInTutorialPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Lists all persons in the application (or class) to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        \"liststu\", \"liststud\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \": Lists the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            + \"To list all students, just type list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final StudentsInTutorialPredicate predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final boolean showAllStudents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ListCommand(boolean showAllStudents) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.showAllStudents \u003d showAllStudents;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ListCommand(StudentsInTutorialPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.showAllStudents \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (this.showAllStudents) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            setTutorialAndModule(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, TabNames.STUDENTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the required tutorial name and module code to be filtered out"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private void setTutorialAndModule(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ObservableList\u003cTutorial\u003e tutorialList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ObservableList\u003cModule\u003e modList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Tutorial tutorial \u003d tutorialList.get(predicate.getIndex());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            predicate.setTutName(tutorial.getTutName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            boolean match \u003d modList.stream().anyMatch(mod -\u003e mod.getTutorials().contains(tutorial));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                predicate.setModCode(modList.get(predicate.getIndex()).getModCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (predicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return other \u003d\u003d this || (other instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10,
      "Ellieyee": 67,
      "-": 15,
      "lumos309": 17
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/MarkAttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Marks attendance of student in a specified tutorial."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MarkAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_MARK_ATTENDANCE_SUCCESS \u003d \"Attendance of %1$s marked as %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONFIRM_MARK_ATTENDANCE_OF_STUDENT \u003d \"Do you want to mark \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"%1$s\u0027s attendance?\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"(y/n)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_MARK_ATTENDANCE_TUTORIAL \u003d \"Marking attendance of %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Update message to include index format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the attendance of a student in a tutorial.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKS + \"WEEK\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"Lab 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"CS1010 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_WEEKS + \"5\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cModCode\u003e targetModCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cTutName\u003e targetTutName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Week week;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Optional\u003cName\u003e targetStudName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public MarkAttendanceCommand(ModCode modCode, TutName tutName, Index index, Week week, Name studName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetModCode \u003d Optional.ofNullable(modCode);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutName \u003d Optional.ofNullable(tutName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetIndex \u003d Optional.ofNullable(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetStudName \u003d Optional.ofNullable(studName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private MarkAttendanceCommand(ModCode modCode, TutName tutName, Index index, Week week, Optional\u003cName\u003e studName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetModCode \u003d Optional.ofNullable(modCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetTutName \u003d Optional.ofNullable(tutName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetIndex \u003d Optional.ofNullable(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.targetStudName \u003d studName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Consider cases with multiple matching tutorials, students?"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial targetTutorial \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetModCode.isPresent() \u0026\u0026 targetTutName.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with modcode and tutname"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            targetTutorial \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .filter(tut -\u003e tut.getTutName().equals(targetTutName.get())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    \u0026\u0026 tut.getModCode().equals(targetModCode.get()))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .orElse(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (targetTutorial \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return handleSuggestedClassCommands(targetModCode.get(), targetTutName.get(), targetStudName, model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with tutorial index"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetTutorial \u003d lastShownList.get(targetIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d targetTutorial.getTimeTable().getWeeks();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!weeks.contains(week)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WEEK_IN_TUTORIAL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetStudName.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // stores the chain of commands to mark attendance of a class if targetStudName is not specified"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            List\u003cStudent\u003e students \u003d targetTutorial.getStudents();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (int i \u003d students.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                model.storePendingCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                        new MarkAttendanceVerifiedCommand(targetTutorial, week, students.get(i)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                model.storePendingCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                        new DisplayCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                        String.format(MESSAGE_CONFIRM_MARK_ATTENDANCE_OF_STUDENT, students.get(i).getName())));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(MESSAGE_MARK_ATTENDANCE_TUTORIAL, targetTutorial.getTutName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // otherwise marks attendance of individual student"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student targetStudent \u003d targetTutorial.getStudents().stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .filter(student -\u003e student.getName().equals(targetStudName.get()))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .orElse(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return handleSuggestedStudentCommands("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    targetModCode.get(), targetTutName.get(), targetStudName.get(), model);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        targetTutorial.setAttendance(week, targetStudent);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String isPresent \u003d targetTutorial.getAttendance().isPresent(week, targetStudent) ? \"present\" : \"absent\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_ATTENDANCE_SUCCESS,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                targetStudent.getName(), isPresent), targetTutorial);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Handles the creating and processing of suggested {@code MarkAttendanceCommand}s, if the user\u0027s input does not"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * match any combination of modules and tutorials."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode The module code entered by the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName The tutorial name entered by the user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param studName The student name entered by the user, if any."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The model to search in."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a string representation of the suggested alternative commands to the user\u0027s invalid input."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws CommandException if no suggested commands can be found."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private CommandResult handleSuggestedClassCommands("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode, TutName tutName, Optional\u003cName\u003e studName, Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // find tutorials with same name and similar modcodes, and similar names and same modcode"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cModCode\u003e similarModCodes \u003d getSimilarModCodesWithTutorial(modCode, tutName, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cTutName\u003e similarTutNames \u003d getSimilarTutNamesWithModule(modCode, tutName, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (similarModCodes.size() \u003d\u003d 0 \u0026\u0026 similarTutNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d createSuggestedClassCommands(similarModCodes, modCode,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarTutNames, tutName, targetStudName, model);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                modCode.toString() + \" \" + tutName.toString()) + suggestedCorrections);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Handles the creating and processing of suggested {@code MarkAttendanceCommand}s, if the user\u0027s input does not"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * match any combination of modules, tutorials and students."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode The module code entered by the user."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName The tutorial name entered by the user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param studName The student name entered by the user."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The model to search in."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a string representation of the suggested alternative commands to the user\u0027s invalid input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws CommandException if no suggested commands can be found."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private CommandResult handleSuggestedStudentCommands("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode, TutName tutName, Name studName, Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // find students with similar names in the given module/tutorial combination."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cName\u003e similarNames \u003d getSimilarStudNamesWithTutorialAndModule(modCode, tutName, studName, model);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (similarNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_IN_TUTORIAL);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d createSuggestedStudentCommands(modCode, tutName, similarNames, model);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Student\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                studName.toString()) + suggestedCorrections);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code MarkAttendanceCommand}s from a list of {@code ModCode}s and {@code TutName}s."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param originalModCode Original modcode input from user."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarTutNames List of {@code TutName}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param originalTutName Original tutorial name input from user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param studName Name of target student, if any."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the generated suggestions and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedClassCommands(List\u003cModCode\u003e similarModCodes, ModCode originalModCode,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                                List\u003cTutName\u003e similarTutNames, TutName originalTutName,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                                Optional\u003cName\u003e studName, Model model) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (studName.isPresent()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    \u0026\u0026 !model.hasStudentInTutorialAndModule(studName.get(), originalTutName, similarModCode)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                // if student name is specified, make sure the student exists in the tutorial/module combination."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                // else, skip the check as desired action is to mark attendance for all students."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new MarkAttendanceCommand(similarModCode, originalTutName, null,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    week, studName));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\", \").append(originalTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (TutName similarTutName: similarTutNames) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (studName.isPresent()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    \u0026\u0026 !model.hasStudentInTutorialAndModule(studName.get(), similarTutName, originalModCode)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            MarkAttendanceCommand newCommand \u003d new MarkAttendanceCommand(originalModCode, similarTutName, null,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    week, studName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (suggestedCommands.stream()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    .anyMatch(existingCommand -\u003e existingCommand.equals(newCommand))) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(newCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(originalModCode).append(\", \").append(similarTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Generates and stores {@code MarkAttendanceCommand}s from a list of {@code Name}s."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode Code of module that suggested student must be in."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName Name of tutorial that suggested student must be in."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param similarNames List of similar student names."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param model The {@code Model} to search in."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return string representing the generated suggestions and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String createSuggestedStudentCommands("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode, TutName tutName, List\u003cName\u003e similarNames, Model model) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Name similarName : similarNames) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            suggestedCommands.add(new MarkAttendanceCommand(modCode, tutName, null, week, similarName));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            s.append(index).append(\". \").append(similarName).append(\"\\n\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof MarkAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetModCode.equals(((MarkAttendanceCommand) other).targetModCode)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 week.equals(((MarkAttendanceCommand) other).week)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetTutName.equals(((MarkAttendanceCommand) other).targetTutName)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetStudName.equals(((MarkAttendanceCommand) other).targetStudName)); // state check"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 161,
      "Ellieyee": 1,
      "lumos309": 138
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/MarkAttendanceVerifiedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a followup to {@code MarkAttendanceCommand} where the {@code Student} to be marked has been verified as"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * a valid one in the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MarkAttendanceVerifiedCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Tutorial targetTutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Week week;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Student targetStudent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    MarkAttendanceVerifiedCommand(Tutorial targetTutorial, Week week, Student targetStudent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutorial \u003d targetTutorial;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetStudent \u003d targetStudent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        boolean isPresent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        targetTutorial.setAttendance(week, targetStudent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        isPresent \u003d targetTutorial.getAttendance().isPresent(week, targetStudent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MarkAttendanceCommand.MESSAGE_MARK_ATTENDANCE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetStudent.getName(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                isPresent ? \"present\" : \"absent\"), targetTutorial);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return command instanceof ConfirmYesCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || command instanceof ConfirmNoCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || command instanceof DisplayCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 47,
      "Ellieyee": 1
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/SelectSuggestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Executes one of the stored suggested commands in the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class SelectSuggestionCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"Invalid input- please enter a number corresponding to \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + \"one of the listed suggested commands.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public SelectSuggestionCommand(Index index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Used to create a \"dummy\" instance of the command, to act as a flag in the pending command stack to prompt the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * user for input of the desired index."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public SelectSuggestionCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns whether or not the input command is an integer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Integer.parseInt(userCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            // dummy command- return empty command result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new CommandResult(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (model.getSuggestedCommands().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (index.getOneBased() \u003e model.getSuggestedCommands().size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_OUT_OF_BOUNDS + \"\\n\" + model.getSuggestedCorrections());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Command commandToExecute \u003d model.getSuggestedCommands().get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.deleteSuggestedCommands();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return commandToExecute.execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return index \u003d\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 71
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/TabNames.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Names of tabs that the user can switch between."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public enum TabNames {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    MODULES, STUDENTS, TUTORIALS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/assignment/AddAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MAX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Adds Assignment to a Tutorial."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class AddAssignmentCommand extends AssignmentCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_ADD_ASSIGNMENT_SUCCESS \u003d \"%1$s created successfully\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAssign\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase(), \"addA\", \"addAsm\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Update message to include index format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an assignment for a tutorial.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_NAME + \"ASSIGNMENT NAME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MAX_SCORE + \"MAX SCORE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"Lab 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"CS1010 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_NAME + \"Lab01 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MAX_SCORE + \"10 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_START_DATE + \"09-11-2001 0000 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_END_DATE + \"31-10-2019 2359\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AddAssignmentCommand(ModCode modCode, TutName tutName, Index tutIndex,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String assignName, Integer maxScore, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super(modCode, tutName, tutIndex, null, assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AddAssignmentCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AssignmentCommand build(ModCode modCode, TutName tutName, Index tutIndex, Index assignIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String assignName, Integer maxScore, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new AddAssignmentCommand(modCode, tutName, tutIndex, assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Consider cases with multiple matching tutorials, students?"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial targetTutorial \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetModCode.isPresent() \u0026\u0026 targetTutName.isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with modcode and tutname"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            targetTutorial \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .filter(tut -\u003e tut.getTutName().equals(targetTutName.get())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    \u0026\u0026 tut.getModCode().equals(targetModCode.get()))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .orElse(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (targetTutorial \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return handleSuggestedCommands(model, new AddAssignmentCommand());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (targetTutIndex.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with tutorial index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetTutorial \u003d lastShownList.get(targetTutIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            targetTutorial.addAssignment(new Assignment("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                assignName.get(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                maxScore.get(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                startDate.get(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                endDate.get()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MESSAGE_ADD_ASSIGNMENT_SUCCESS, assignName.get()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof AddAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 super.equals(other)); // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 130
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/assignment/AssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.SelectSuggestionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Modifies an assignment in a specified tutorial."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public abstract class AssignmentCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cModCode\u003e targetModCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cTutName\u003e targetTutName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cIndex\u003e targetTutIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cIndex\u003e targetAssignIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cString\u003e assignName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cInteger\u003e maxScore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cDate\u003e startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Optional\u003cDate\u003e endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AssignmentCommand(ModCode modCode, TutName tutName, Index tutIndex, Index assignIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String assignName, Integer maxScore, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetModCode \u003d Optional.ofNullable(modCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutName \u003d Optional.ofNullable(tutName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutIndex \u003d Optional.ofNullable(tutIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetAssignIndex \u003d Optional.ofNullable(assignIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.assignName \u003d Optional.ofNullable(assignName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.maxScore \u003d Optional.ofNullable(maxScore);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startDate \u003d Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.endDate \u003d Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AssignmentCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetModCode \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutName \u003d Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetTutIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.targetAssignIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.assignName \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.maxScore \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.endDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public abstract AssignmentCommand build(ModCode modCode, TutName tutName, Index tutIndex, Index assignIndex,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String assignName, Integer maxScore, Date startDate, Date endDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Handles the creating and processing of suggested {@code AssignmentCommand}s, if the user\u0027s input does not"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * match any combination of modules and tutorials."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param model The model to search in."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param assignmentCommand The command used to build suggested commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return a string representation of the suggested alternative commands to the user\u0027s invalid input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws CommandException if no suggested commands can be found."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected CommandResult handleSuggestedCommands(Model model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            AssignmentCommand assignmentCommand) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode modCode \u003d targetModCode.get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName tutName \u003d targetTutName.get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // find tutorials with same name and similar modcodes, and similar names and same modcode"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cModCode\u003e similarModCodes \u003d getSimilarModCodesWithTutorial(modCode,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                tutName, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cTutName\u003e similarTutNames \u003d getSimilarTutNamesWithModule(modCode,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                tutName, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (similarModCodes.size() \u003d\u003d 0 \u0026\u0026 similarTutNames.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String suggestedCorrections \u003d createSuggestedCommands(similarModCodes,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                similarTutNames, model, assignmentCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        model.storePendingCommand(new SelectSuggestionCommand());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                modCode.toString() + \" \" + tutName.toString()) + suggestedCorrections);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Generates and stores {@code AssignmentCommand}s from a list of {@code ModCode}s and {@code TutName}s."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param similarModCodes List of {@code ModCode}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param similarTutNames List of {@code TutName}s similar to the user\u0027s input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param model The {@code Model} in which to store the generated commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param assignmentCommand The command used to build suggested comands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return string representing the generated suggestions and their corresponding indexes for user selection."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected String createSuggestedCommands(List\u003cModCode\u003e similarModCodes, List\u003cTutName\u003e similarTutNames,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                                           Model model, AssignmentCommand assignmentCommand) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode modCode \u003d targetModCode.get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName tutName \u003d targetTutName.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index tutIndex \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index assignIndex \u003d targetAssignIndex.orElse(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String assignName \u003d this.assignName.orElse(null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Integer maxScore \u003d this.maxScore.orElse(null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Date startDate \u003d this.startDate.orElse(null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Date endDate \u003d this.endDate.orElse(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (ModCode similarModCode : similarModCodes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            suggestedCommands.add(assignmentCommand.build("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    similarModCode,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    tutName,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    tutIndex,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    assignIndex,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    assignName,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    maxScore,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    startDate,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    endDate));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            s.append(index).append(\". \").append(similarModCode).append(\", \").append(tutName).append(\"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (TutName similarTutName: similarTutNames) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            AssignmentCommand newCommand \u003d assignmentCommand.build("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    modCode,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    similarTutName,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    tutIndex,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    assignIndex,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    assignName,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    maxScore,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    startDate,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    endDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (suggestedCommands.stream()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .anyMatch(existingCommand -\u003e existingCommand.equals(newCommand))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            suggestedCommands.add(newCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            s.append(index).append(\". \").append(modCode).append(\", \").append(similarTutName).append(\"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String suggestedCorrections \u003d s.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        model.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsInput() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean needsCommand(Command command) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof AssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetModCode.equals(((AssignmentCommand) other).targetModCode)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetTutName.equals(((AssignmentCommand) other).targetTutName)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 targetTutIndex.equals(((AssignmentCommand) other).targetTutIndex)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 assignName.equals(((AssignmentCommand) other).assignName)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 maxScore.equals(((AssignmentCommand) other).maxScore)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 startDate.equals(((AssignmentCommand) other).startDate)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 endDate.equals(((AssignmentCommand) other).endDate)); // state check"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 170
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/assignment/DeleteAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MAX_SCORE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Assignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Deletes assignment in a specified tutorial."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class DeleteAssignmentCommand extends AssignmentCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_DELETE_ASSIGNMENT_SUCCESS \u003d \"%1$s deleted successfully\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteAssign\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static final String[] COMMAND_SYNONYMS \u003d {COMMAND_WORD.toLowerCase()};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Update message to include index format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an assignment for a tutorial.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_NAME + \"ASSIGNMENT NAME \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MAX_SCORE + \"MAX SCORE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_TUTORIAL_NAME + \"Lab 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MODULE + \"CS1010 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_NAME + \"Lab01 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_MAX_SCORE + \"10 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_START_DATE + \"09-11-2001 0000 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + PREFIX_END_DATE + \"31-10-2019 2359\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public DeleteAssignmentCommand(ModCode modCode, TutName tutName, Index tutIndex, Index assignIndex,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String assignName, Integer maxScore, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super(modCode, tutName, tutIndex, assignIndex, assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public DeleteAssignmentCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AssignmentCommand build(ModCode modCode, TutName tutName, Index tutIndex, Index assignIndex,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String assignName, Integer maxScore, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new DeleteAssignmentCommand(modCode, tutName, tutIndex, assignIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cTutorial\u003e lastShownList \u003d model.getFilteredTutorialList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Consider cases with multiple matching tutorials, students?"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial targetTutorial \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetModCode.isPresent() \u0026\u0026 targetTutName.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with modcode and tutname"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            targetTutorial \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .filter(tut -\u003e tut.getTutName().equals(targetTutName.get())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    \u0026\u0026 tut.getModCode().equals(targetModCode.get()))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    .orElse(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (targetTutorial \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return handleSuggestedCommands(model,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                        new DeleteAssignmentCommand());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (targetTutIndex.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with tutorial index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetTutorial \u003d lastShownList.get(targetTutIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Assignment targetAssignment;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (targetAssignIndex.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with assignment details"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            targetAssignment \u003d new Assignment("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    assignName.get(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    maxScore.get(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    startDate.get(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    endDate.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            boolean isRemoved \u003d targetTutorial.deleteAssignment(targetAssignment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (!isRemoved) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_IN_TUTORIAL);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // format with assignment index"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetAssignment \u003d targetTutorial.getAssignment(targetAssignIndex.get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetTutorial.deleteAssignment(targetAssignment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    String.format(MESSAGE_DELETE_ASSIGNMENT_SUCCESS, targetAssignment.getAssignName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if user command matches command word or any defined synonyms, and false otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param userCommand command word from user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return whether user command matches specified command word or synonyms."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isMatchingCommandWord(String userCommand) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (String synonym : COMMAND_SYNONYMS) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (synonym.equals(userCommand.toLowerCase())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof DeleteAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 super.equals(other)); // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 142
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/finder/Finder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.finder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import me.xdrop.fuzzywuzzy.FuzzySearch;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Supports the autocorrect and autocomplete features of the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Provides methods for searching for objects similar to a user\u0027s input when an exact match is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Uses fuzzy string matching to search for names with a high degree of similarity."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Also provides methods for searching for string values that complete a partial input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class Finder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    // thresholds for similarity differ between parameters due to their varying expected lengths"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private int thresholdModCode \u003d 80;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private int thresholdTutName \u003d 70;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private int thresholdStudentName \u003d 80;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Finder(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for modules in the application with a {@code ModCode} similar to the given one."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param modCode target module code to match against."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a {@code List} of similar {@code ModCode}s."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cModCode\u003e findSimilarModCodes (ModCode modCode) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cModCode\u003e similarModCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Module module : model.getFilteredModuleList()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (FuzzySearch.ratio(modCode.toString(), module.getModCode().toString()) \u003e thresholdModCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarModCodes.add(module.getModCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return similarModCodes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for tutorials in the application with a {@code TutName} similar to the given one."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param tutName target tutorial name to match against."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a {@code List} of similar {@code TutName}s."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cTutName\u003e findSimilarTutNames (TutName tutName) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cTutName\u003e similarTutNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : model.getFilteredTutorialList()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (FuzzySearch.ratio(tutName.toString(), tutorial.getTutName().toString()) \u003e thresholdTutName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarTutNames.add(tutorial.getTutName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return similarTutNames;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for students in the application with a {@code Name} similar to the given one."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param name target name to match against."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a {@code List} of similar {@code Name}s."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cName\u003e findSimilarNames (Name name) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cName\u003e similarNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Student student : model.getFilteredStudentList()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (FuzzySearch.ratio(name.toString(), student.getName().toString()) \u003e thresholdStudentName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarNames.add(student.getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return similarNames;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for emails in the application beginning with the current partial input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteEmail (String partialEmail) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getFilteredStudentList().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .map(student -\u003e student.getEmail().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(studentEmail -\u003e studentEmail.toLowerCase().startsWith(partialEmail.toLowerCase()))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for student names in the application beginning with the current partial input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteMatNo (String partialMatNo) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getFilteredStudentList().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(student -\u003e student.getMatricNum().isPresent()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        \u0026\u0026 student.getMatricNum().get().toString().toLowerCase().startsWith(partialMatNo.toLowerCase()))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .map(student -\u003e student.getMatricNum().get().toString())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for module codes in the application beginning with the current partial input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteModCode (String partialModCode) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .map(module -\u003e module.getModCode().toString())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(moduleCode -\u003e moduleCode.toLowerCase().startsWith(partialModCode.toLowerCase()))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for emails in the application beginning with the current partial input."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteName (String partialName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getFilteredStudentList().stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .map(student -\u003e student.getName().toString())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(studentName -\u003e studentName.toLowerCase().startsWith(partialName.toLowerCase()))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for student names in the application beginning with the current partial input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteNusId (String partialNusId) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getFilteredStudentList().stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(student -\u003e student.getNusnetId().isPresent()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        \u0026\u0026 student.getNusnetId().get().toString().toLowerCase().startsWith(partialNusId.toLowerCase()))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .map(student -\u003e student.getNusnetId().get().toString())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for tutorial names in the application beginning with the current partial input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteTutName (String partialTutName) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return model.getFilteredTutorialList().stream()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .map(tutorial -\u003e tutorial.getTutName().toString())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(tutorialName -\u003e tutorialName.toLowerCase().startsWith(partialTutName.toLowerCase()))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for day names beginning with the current partial input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e autocompleteDay (String partialDay) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Stream.of(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .filter(day -\u003e day.toLowerCase().startsWith(partialDay.toLowerCase()))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 153
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/AddAssignmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MAX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.assignment.AddAssignmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.assignment.AssignmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class AddAssignmentCommandParser implements Parser\u003cAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAssignmentCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns an AddAssignmentCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws ParseException if the user input does not match the expected formats for the module code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public AddAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_INDEX, PREFIX_NAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MAX_SCORE, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode modCode \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName tutName \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index tutIndex \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (validateModCodeTutNameFormat(argMultimap)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (validateIndexFormat(argMultimap)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    AddAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String assignName \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Integer maxScore;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            maxScore \u003d Integer.parseInt(argMultimap.getValue(PREFIX_MAX_SCORE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(Assignment.MESSAGE_CONSTRAINTS_MAX_SCORE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(Assignment.DATE_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Date startDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Date endDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            startDate \u003d dateFormatter.parse(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            endDate \u003d dateFormatter.parse(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(Assignment.MESSAGE_CONSTRAINTS_START_END_DATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new AddAssignmentCommand(modCode, tutName, tutIndex, assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the first format with modcode and tutorial name,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateModCodeTutNameFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode, tutorial name present without tutorial index - first format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_NAME,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MAX_SCORE, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_INDEX));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the second format with tutorial index,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateIndexFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // tutorial index present without modcode or tutorial name - second format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_NAME,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MAX_SCORE, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesAbsent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 113
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/AddModuleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if the user input does not match the expected formats for the module code."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Empty list of Tutorials is added for a new module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cTutorial\u003e emptyListOfTutorials \u003d new ArrayList\u003cTutorial\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Module newModule \u003d new Module(modCode, emptyListOfTutorials);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new AddModuleCommand(newModule);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 53
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MATNO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NUSID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddStudentCommandParser extends CommandParser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final ModCode TEMP_MOD_CODE \u003d new ModCode(\"AB1231\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final TutName TEMP_TUT_NAME \u003d new TutName(\"temp tutorial\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final boolean IS_FULL_FORMAT \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final OptionalArgument[] optionalArgs \u003d {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        OptionalArgument.OPTIONAL_MATNO,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        OptionalArgument.OPTIONAL_NUSID"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cArgumentMultimap\u003e argumentMultimap;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Check for invalid parsing: combination of first \u0026 second format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (formatIsUnclear(args)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parse first format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        argumentMultimap \u003d validateIndexFormat(args);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (argumentMultimap.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return parseCommand(argumentMultimap.get(), !IS_FULL_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parse second format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        argumentMultimap \u003d validateFullFormat(args);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (argumentMultimap.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return parseCommand(argumentMultimap.get(), IS_FULL_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // If both fail, format is invalid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Initial check if argument contains a combination of both first and second format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param args - user input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean formatIsUnclear(String args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                OptionalArgumentTokenizer.tokenize(args, optionalArgs,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                        PREFIX_INDEX, PREFIX_NAME, PREFIX_EMAIL, PREFIX_MODULE, PREFIX_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Tutorial name, module name and index are all present"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_NAME, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                PREFIX_MODULE, PREFIX_TUTORIAL_NAME)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Tutorial name and index are present"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_NAME, PREFIX_EMAIL, PREFIX_TUTORIAL_NAME)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Module name and index are all present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_NAME, PREFIX_EMAIL, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Validates the given argument format based on the shortcut index method"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional.empty() if the format is invalid. Else returns Optional of multimap containing"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * mapped prefixes"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Optional\u003cArgumentMultimap\u003e validateIndexFormat(String args) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                OptionalArgumentTokenizer.tokenize(args, optionalArgs,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                        PREFIX_INDEX, PREFIX_NAME, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_NAME, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return Optional.of(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Validates the given arguments format based on the full format"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional.empty() if the format is invalid. Else returns Optional of multimap containing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * mapped prefixes"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Optional\u003cArgumentMultimap\u003e validateFullFormat(String args) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                OptionalArgumentTokenizer.tokenize(args, optionalArgs,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        PREFIX_NAME, PREFIX_EMAIL, PREFIX_MODULE, PREFIX_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EMAIL, PREFIX_MODULE, PREFIX_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return Optional.of(argMultimap);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private AddStudentCommand parseCommand (ArgumentMultimap argMultimap, boolean isFullFormat)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode modCode;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName tutName;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index tutIdx;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Retrieve optional arguments"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Optional\u003cMatricNum\u003e matricNum;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATNO).isPresent()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            matricNum \u003d Optional.of(ParserUtil.parseMatricNum(argMultimap.getValue(PREFIX_MATNO).get()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            matricNum \u003d Optional.empty();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Optional\u003cNusnetId\u003e nusnetId;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUSID).isPresent()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            nusnetId \u003d Optional.of(ParserUtil.parseNusnetId(argMultimap.getValue(PREFIX_NUSID).get()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            nusnetId \u003d Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student student;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Retrieve tutorial and module code based on index"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (isFullFormat) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            student \u003d new Student(name, email, matricNum, nusnetId, modCode, tutName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            argMultimap.getValue(PREFIX_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            tutIdx \u003d retrieveIndex(argMultimap);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            student \u003d new Student(name, email, matricNum, nusnetId, TEMP_MOD_CODE, TEMP_TUT_NAME);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new AddStudentCommand(student, tutIdx);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Retrieves index entered by user and parses through the Indexing format"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Index retrieveIndex(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return Index.fromOneBased(Integer.valueOf(argumentMultimap.getValue(PREFIX_INDEX).get()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 14,
      "Ellieyee": 115,
      "AhmadHatziq": 1,
      "-": 20,
      "lumos309": 33
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/AddTutorialCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DURATION_IN_MINUTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.commands.AddTutorialCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TimeTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Parses input arguments and creates a new AddMTutorialCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class AddTutorialCommandParser implements Parser\u003cAddTutorialCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTutorialCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * and returns an AddTutorialCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if the user input does not match the expected formats for all the required arguments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public AddTutorialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_DAY, PREFIX_MODULE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                PREFIX_TUTORIAL_DURATION_IN_MINUTES, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                PREFIX_TUTORIAL_START_TIME, PREFIX_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_DAY, PREFIX_MODULE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                PREFIX_TUTORIAL_DURATION_IN_MINUTES, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                PREFIX_TUTORIAL_START_TIME)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTutorialCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialName \u003d argMultimap.getValue(PREFIX_TUTORIAL_NAME).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        TutName tutName \u003d ParserUtil.parseTutorialName(tutorialName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Attributes for TimeTable class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialDay \u003d argMultimap.getValue(PREFIX_TUTORIAL_DAY).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialDuration \u003d argMultimap.getValue(PREFIX_TUTORIAL_DURATION_IN_MINUTES).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String tutorialStartTime \u003d argMultimap.getValue(PREFIX_TUTORIAL_START_TIME).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String tutorialWeeks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_WEEKS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorialWeeks \u003d argMultimap.getValue(PREFIX_TUTORIAL_WEEKS).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorialWeeks \u003d TimeTable.DEFAULT_WEEKS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        DayOfWeek day \u003d ParserUtil.parseDayOfWeek(tutorialDay);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(tutorialDuration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d ParserUtil.parseWeeks(tutorialWeeks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LocalTime startTime \u003d ParserUtil.parseLocalTime(tutorialStartTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Empty list of Students is created for a new Tutorial"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cStudent\u003e emptyListOfStudents \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Creates a new Tutorial object with the user String."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial newTutorial \u003d new Tutorial(tutName, day, startTime, weeks, duration, emptyListOfStudents, modCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new AddTutorialCommand(newTutorial);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 3,
      "AhmadHatziq": 69,
      "lumos309": 14
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ApplicationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.commands.AddTutorialCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ChangeTabCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.ConfirmNoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.ConfirmYesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteTutorialCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.DisplayAttendanceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.ExportAttendanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.SelectSuggestionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.assignment.AddAssignmentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.assignment.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ApplicationParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (AddStudentCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (EditCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (DeleteStudentCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new DeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (DeleteModuleCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (DeleteTutorialCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new DeleteTutorialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (FindCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (ListCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (ExitCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (HelpCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (AddModuleCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (AddTutorialCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return new AddTutorialCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (MarkAttendanceCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new MarkAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (ConfirmNoCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new ConfirmNoCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (ConfirmYesCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new ConfirmYesCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (SelectSuggestionCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new SelectSuggestionCommandParser().parse(commandWord);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (ExportAttendanceCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new ExportAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else if (DisplayAttendanceCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new DisplayAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (AddAssignmentCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new AddAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (DeleteAssignmentCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new DeleteAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else if (ChangeTabCommand.isMatchingCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new ChangeTabCommand(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public PartialInput parsePartialInput(String partialInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return PartialInputParser.parse(partialInput, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 12,
      "Ellieyee": 18,
      "AhmadHatziq": 7,
      "-": 40,
      "lumos309": 32
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ArgumentPatterns.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Contains Student field name patterns. Assumes each pattern is prefixed by a whitespace."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class ArgumentPatterns {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Pattern PATTERN_EMAIL \u003d Pattern.compile(\"\\\\s[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,}\\b\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Pattern PATTERN_MATNO \u003d Pattern.compile(\"\\\\b[aA][0-9]{7}[a-zA-Z](?!@)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Pattern PATTERN_NUSID \u003d Pattern.compile(\"\\\\b[eE][0-9]{7}(?!@)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Pattern PATTERN_MODCODE \u003d Pattern.compile(\"\\\\b[A-Z]{2,3}[0-9]{4}[A-Z]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Pattern PATTERN_WEEKRANGE \u003d Pattern.compile(\"\\\\b[0-9]+-[0-9]+\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 1,
      "lumos309": 15
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ArgumentSingleValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represents a single prefix and its corresponding argument value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "class ArgumentSingleValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Prefix prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    ArgumentSingleValue(Prefix prefix, String value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    Prefix getPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    String getValue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 22
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String ERROR_AUTOFILL_DETECTION \u003d \"Unable to detect valid field for autofilling.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * {@see tokenize}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static ArgumentSingleValue tokenizeLastArgument(String argsString, Prefix... prefixes)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Optional\u003cPrefixPosition\u003e position \u003d findLastPrefixPosition(argsString, prefixes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (position.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new ParseException(ERROR_AUTOFILL_DETECTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return extractLastArgument(argsString, position.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    static Optional\u003cPrefixPosition\u003e findLastPrefixPosition(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .max(Comparator.comparingInt(PrefixPosition::getStartPosition));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Gets the argument value of the last prefix in an input string."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param argsString The full input from the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param prefixPosition The {@code PrefixPosition} representing the last prefix in the string."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return a {@code PrefixValue} containing the last prefix and its argument value."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    static ArgumentSingleValue extractLastArgument(String argsString, PrefixPosition prefixPosition) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Prefix prefix \u003d prefixPosition.getPrefix();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new ArgumentSingleValue(prefix,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                argsString.substring(prefixPosition.getStartPosition()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + prefix.getPrefix().length()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    protected static class PrefixPosition {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 144,
      "lumos309": 44
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Prefix PREFIX_MATNO \u003d new Prefix(\"mat/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Prefix PREFIX_NUSID \u003d new Prefix(\"nusid/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Prefix PREFIX_MAX_SCORE \u003d new Prefix(\"max/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_NAME \u003d new Prefix(\"tn/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_WEEKS \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_DURATION_IN_MINUTES \u003d new Prefix(\"dur/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 5,
      "Ellieyee": 1,
      "AhmadHatziq": 6,
      "-": 10,
      "lumos309": 2
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Framework for all {@code Parser}s meant for user inputs. Contains methods to check if specified prefixes are"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * present or absent."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public abstract class CommandParser\u003cT extends Command\u003e implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public abstract Command parse(String args) throws ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    protected static boolean areAllPrefixesAbsent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 31
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/DeleteAssignmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MAX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.assignment.AssignmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.assignment.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new DeleteAssignmentCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class DeleteAssignmentCommandParser implements Parser\u003cAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAssignmentCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns a DeleteAssignmentCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws ParseException if the user input does not match the expected formats for the module code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public DeleteAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_INDEX, PREFIX_NAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MAX_SCORE, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode modCode \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName tutName \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index tutIndex \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index assignIndex \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String assignName \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Integer maxScore \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Date startDate \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Date endDate \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (validateModCodeTutNameFormat(argMultimap)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (validateTutIndexFormat(argMultimap)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutIndex \u003d ParserUtil.parseIndex(argMultimap.getAllValues(PREFIX_INDEX).get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    DeleteAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (validateAssignmentFormat(argMultimap)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            assignName \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                maxScore \u003d Integer.parseInt(argMultimap.getValue(PREFIX_MAX_SCORE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new ParseException(Assignment.MESSAGE_CONSTRAINTS_MAX_SCORE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(Assignment.DATE_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                startDate \u003d dateFormatter.parse(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                endDate \u003d dateFormatter.parse(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new ParseException(Assignment.MESSAGE_CONSTRAINTS_START_END_DATE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (validateAssignIndexFormat(argMultimap)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            assignIndex \u003d ParserUtil.parseIndex(argMultimap.getAllValues(PREFIX_INDEX).get(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    DeleteAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new DeleteAssignmentCommand(modCode, tutName, tutIndex, assignIndex,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the first format with modcode and tutorial name,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateModCodeTutNameFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // student name not checked since it is optional"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode, tutorial name present without tutorial index - first format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_INDEX));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the second format with tutorial index,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateTutIndexFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_INDEX)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the format with assignment name,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * max score, start and end date, else false."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateAssignmentFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MAX_SCORE, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 argMultimap.getAllValues(PREFIX_INDEX).size() \u003c\u003d 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the format with assignment index,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateAssignIndexFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (argMultimap.getAllValues(PREFIX_INDEX).size() \u003d\u003d 2"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_NAME, PREFIX_MAX_SCORE, PREFIX_START_DATE, PREFIX_END_DATE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesAbsent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 141
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/DeleteModuleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteModuleCommandParser extends CommandParser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: implement optionalArgs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final OptionalArgument[] optionalArgs \u003d {};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                OptionalArgumentTokenizer.tokenize(args, optionalArgs,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        PREFIX_MODULE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (areAllPrefixesAbsent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return new DeleteModuleCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return new DeleteModuleCommand(modCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 4,
      "lumos309": 38
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/DeleteStudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 3,
      "Ellieyee": 4,
      "-": 17,
      "lumos309": 5
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/DeleteTutorialCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteTutorialCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new DeleteTutorialCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteTutorialCommandParser extends CommandParser\u003cDeleteTutorialCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: implement optionalArgs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final OptionalArgument[] optionalArgs \u003d {};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTutorialCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns a DeleteTutorialCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public DeleteTutorialCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                OptionalArgumentTokenizer.tokenize(args, optionalArgs,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        PREFIX_MODULE, PREFIX_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (areAllPrefixesAbsent(argMultimap, PREFIX_TUTORIAL_NAME)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return new DeleteTutorialCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                TutName tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                ModCode modCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    return new DeleteTutorialCommand(modCode, tutName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    return new DeleteTutorialCommand(tutName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTutorialCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 4,
      "lumos309": 46
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/DisplayAttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.DisplayAttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Parses input arguments and creates a new DisplayAttendanceCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DisplayAttendanceCommandParser extends CommandParser\u003cDisplayAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplayAttendanceCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * and returns a DisplayAttendanceCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DisplayAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // If all prefixes are present, the format is ambiguous"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parse first format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Index index \u003d retrieveIndex(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new DisplayAttendanceCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parse second format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new DisplayAttendanceCommand(modCode, tutName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Retrieves index entered by user and parses through the Indexing format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Index retrieveIndex(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return Index.fromOneBased(Integer.valueOf(argumentMultimap.getValue(PREFIX_INDEX).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    DisplayAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 5,
      "Ellieyee": 57
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MATNO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NUSID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_MATNO, PREFIX_NUSID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATNO).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            editStudentDescriptor.setMatricNum("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    Optional.of(ParserUtil.parseMatricNum(argMultimap.getValue(PREFIX_MATNO).get())));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUSID).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            editStudentDescriptor.setNusnetId("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    Optional.of(ParserUtil.parseNusnetId(argMultimap.getValue(PREFIX_NUSID).get())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 26,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ExportAttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.ExportAttendanceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new ExportAttendanceCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ExportAttendanceCommandParser implements Parser\u003cExportAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportAttendanceCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns an ExportAttendanceCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws ParseException if the user input does not match the expected formats for the module code."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ExportAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_INDEX, PREFIX_FILE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode modCode \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName tutName \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index tutIndex \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String fileName \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (validateModCodeTutNameFormat(argMultimap)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (validateIndexFormat(argMultimap)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            fileName \u003d argMultimap.getValue(PREFIX_FILE).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new ExportAttendanceCommand(modCode, tutName, tutIndex, fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the first format with modcode and tutorial name,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateModCodeTutNameFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // file name not checked since it is optional"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode, tutorial name present without tutorial index - first format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_INDEX));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the second format with tutorial index,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateIndexFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // file name not checked since it is optional"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // tutorial index present without modcode or tutorial name - second format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_INDEX)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesAbsent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 91
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.StudentsInTutorialPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final boolean SHOW_ALL_STUDENTS \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new ListCommand(SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new ListCommand(new StudentsInTutorialPredicate(index));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 33
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/MarkAttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Parses input arguments and creates a new MarkAttendanceCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MarkAttendanceCommandParser implements Parser\u003cMarkAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAttendanceCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * and returns a MarkAttendanceCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws ParseException if the user input does not match the expected formats for the module code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public MarkAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_INDEX, PREFIX_NAME, PREFIX_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode modCode \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName tutName \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index tutIndex \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Name studName \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (validateModCodeTutNameFormat(argMultimap)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            modCode \u003d ParserUtil.parseModCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutName \u003d ParserUtil.parseTutorialName(argMultimap.getValue(PREFIX_TUTORIAL_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else if (validateIndexFormat(argMultimap)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    MarkAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Week week \u003d ParserUtil.parseWeek(argMultimap.getValue(PREFIX_TUTORIAL_WEEKS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            studName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new MarkAttendanceCommand(modCode, tutName, tutIndex, week, studName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the first format with modcode and tutorial name,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateModCodeTutNameFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // student name not checked since it is optional"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode, tutorial name present without tutorial index - first format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                PREFIX_TUTORIAL_WEEKS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_INDEX));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Checks the argument multimap if it contains the correct combination of arguments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return True if argument multimap contains the combination for the second format with tutorial index,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * else false."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean validateIndexFormat(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // student name not checked since it is optional"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // tutorial index present without modcode or tutorial name - second format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return (arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_TUTORIAL_WEEKS)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 arePrefixesAbsent(argMultimap, PREFIX_MODULE, PREFIX_TUTORIAL_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private static boolean arePrefixesAbsent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 98
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/OptionalArgument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represents possible optional arguments that may be found in user inputs. Each contains a pattern for regex"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * matching and the corresponding prefix."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class OptionalArgument {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final OptionalArgument OPTIONAL_EMAIL \u003d new OptionalArgument(ArgumentPatterns.PATTERN_EMAIL,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            CliSyntax.PREFIX_EMAIL);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final OptionalArgument OPTIONAL_MATNO \u003d new OptionalArgument(ArgumentPatterns.PATTERN_MATNO,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            CliSyntax.PREFIX_MATNO);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final OptionalArgument OPTIONAL_NUSID \u003d new OptionalArgument(ArgumentPatterns.PATTERN_NUSID,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            CliSyntax.PREFIX_NUSID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public final Pattern pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public final Prefix prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public OptionalArgument(Pattern pattern, Prefix prefix) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.pattern \u003d pattern;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Pattern getPattern() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return pattern;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 33
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/OptionalArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Tokenizes arguments in the same way as {@code ArgumentTokenizer}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Additionally, looks out for optional arguments without prefixes, such as matriculation number, NUSNET ID, and email."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * These are detected via regex pattern matching.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class OptionalArgumentTokenizer extends ArgumentTokenizer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Additionally, detects and maps matriculation number, NUSNET ID, and email fields, even if they come without"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * prefix tags."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, OptionalArgument[] optionalArgs, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // Step 1: Detect and extract optional arguments not specified by a prefix"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentMultimap argMultimap \u003d extractOptionalArguments(argsString, optionalArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Prefix[] optionalPrefixes \u003d Arrays.stream(optionalArgs).map(a -\u003e a.getPrefix()).toArray(Prefix[]::new);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Prefix p : optionalPrefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (argMultimap.getValue(p).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                argsString \u003d argsString.replace(\" \" + argMultimap.getValue(p).get(), \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // Step 2: Extract required arguments specified by prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentMultimap requiredArgMultimap \u003d extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Prefix p : prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (requiredArgMultimap.getValue(p).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                argMultimap.put(p, requiredArgMultimap.getValue(p).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Prefix preamblePrefix \u003d new Prefix(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (requiredArgMultimap.getValue(preamblePrefix).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            argMultimap.put(preamblePrefix, requiredArgMultimap.getValue(preamblePrefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Extracts optional arguments defined at the start of the class, if present, from the given string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static ArgumentMultimap extractOptionalArguments(String argsString, OptionalArgument[] optionalArgs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (OptionalArgument optionalArg : optionalArgs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Matcher m \u003d optionalArg.pattern.matcher(argsString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (m.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                argMultimap.put(optionalArg.prefix, m.group());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 70
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.ArgumentPatterns.PATTERN_WEEKRANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Parses a {@code String matricNum} into an {@code MatricNum}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException if the given {@code matricNum} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static MatricNum parseMatricNum(String matricNum) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(matricNum);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String trimmedMatricNum \u003d matricNum.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!MatricNum.isValidMatricNum(trimmedMatricNum)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new ParseException(MatricNum.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new MatricNum(trimmedMatricNum);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses a {@code String nusnetId} into a {@code NusnetId}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException if the given {@code nusnetId} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static NusnetId parseNusnetId(String nusnetId) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(nusnetId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String trimmedNusnetId \u003d nusnetId.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (!NusnetId.isValidNusnetId(trimmedNusnetId)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new ParseException(MatricNum.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new NusnetId(trimmedNusnetId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses a {@code String modCode} into a {@code ModCode}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param modCode User string."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return ModCode object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if the given {@code modCode} doesn\u0027t match the regex."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static ModCode parseModCode(String modCode) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String trimmedModCode \u003d modCode.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!ModCode.isValidModCode(trimmedModCode)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(ModCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new ModCode(trimmedModCode.toUpperCase());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses a {@code String modCode} into an {@code ModCode}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tutorialName User string."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return TutName object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if the given {@code tutorialName} doesn\u0027t match the regex."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static TutName parseTutorialName(String tutorialName) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(tutorialName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String trimmedTutorialName \u003d tutorialName.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!TutName.isValidTutName(trimmedTutorialName)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(TutName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new TutName(trimmedTutorialName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses a {@code String tutorialDay} into an {@code DayOfWeek}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Accepts both normal spelling eg MONDAY, monday and short forms ie MON, mon"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if the given {@code tutorialDay} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static DayOfWeek parseDayOfWeek(String tutorialDay) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(tutorialDay);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String trimmedTutorialDay \u003d tutorialDay.trim().toUpperCase();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Converts short-form days to normal-form."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] shortFormDays \u003d new String[]{\"MON\", \"TUES\", \"WED\", \"THURS\", \"FRI\", \"SAT\", \"SUN\"};"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] normalFormDays \u003d new String[]{\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                                               \"FRIDAY\", \"SATURDAY\", \"SUNDAY\"};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (int i \u003d 0; i \u003c shortFormDays.length; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (trimmedTutorialDay.equals(shortFormDays[i])) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                trimmedTutorialDay \u003d normalFormDays[i];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return DayOfWeek.valueOf(trimmedTutorialDay);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(\"Invalid day entered\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses a {@code String localTime} into a {@code LocalTime}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param localTime User String."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return LocalTime object."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if user String is not 4 chars in length."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LocalTime parseLocalTime(String localTime) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(localTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (localTime.length() !\u003d 4) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(\"Time entered should be in 24HR format eg 0900\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Converts a string from \u00271200\u0027 to \u002712:00:00\u0027."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        localTime \u003d localTime.substring(0, 2) + \":\" + localTime.substring(2, 4) + \":00\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return LocalTime.parse(localTime, DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses a {@code String weeks} into an Set of Weeks."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param weeks User string. Eg 1,2,7"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return Set of Weeks."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws ParseException if unable to parse the string into a Set of Weeks."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static Set\u003cWeek\u003e parseWeeks(String weeks) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(weeks);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e listOfWeeks \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Remove \u0027[\u0027, \u0027]\u0027 and blank spaces. For parsing from saved Json file."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        weeks \u003d weeks.replace(\"[\", \"\").replace(\"]\", \"\").replace(\" \", \"\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // check for user input of \"odd\" or \"even\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (weeks.toLowerCase().equals(\"odd\")) { // weeks 3, 5, 7, 9, 11, 13"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (int i \u003d 3; i \u003c\u003d 13; i +\u003d 2) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                listOfWeeks.add(new Week(i));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return listOfWeeks;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (weeks.toLowerCase().equals(\"even\")) { // weeks 2, 4, 6, 8, 10, 12"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (int i \u003d 4; i \u003c\u003d 12; i +\u003d 2) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                listOfWeeks.add(new Week(i));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return listOfWeeks;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // check for user input of range \"x-y\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Matcher m \u003d PATTERN_WEEKRANGE.matcher(weeks);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (m.find()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            String[] weekRange \u003d m.group().split(\"-\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            int start \u003d Integer.parseInt(weekRange[0]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            int end \u003d Integer.parseInt(weekRange[1]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (start \u003c 1 || end \u003e 13) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                throw new ParseException(Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                listOfWeeks.add(new Week(i));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return listOfWeeks;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // default - assume user input of list of weeks"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] weekNumbers \u003d weeks.split(\",\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String weekNumber : weekNumbers) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            listOfWeeks.add(parseWeek(weekNumber));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return listOfWeeks;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Parses a {@code String weekNumber} into a Week."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @param weekNumber User string. Eg 1,2,7"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @return Week."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * @throws ParseException if unable to parse the string into a Week."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static Week parseWeek(String weekNumber) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(weekNumber);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Week week;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            week \u003d new Week(Integer.parseInt(weekNumber));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new ParseException(\"Invalid week number(s) entered. Should contain only numbers from 1 to 13.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return week;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parses a {@code String weeks} into a Duration object."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param duration User string of the duration in minutes. Eg 120"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Duration object."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws ParseException if unable to parse the string into Integers."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Integer minutes \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return Duration.ofMinutes(minutes);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ParseException(\"Invalid duration entered. Duration should contain only numbers\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 30,
      "Ellieyee": 6,
      "AhmadHatziq": 121,
      "-": 54,
      "lumos309": 61
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/PartialInput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represents the result of searching for autocomplete options to a user\u0027s partial input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class PartialInput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String originalInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String lastArgument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private List\u003cString\u003e completions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public PartialInput(String originalInput, String lastArgument, List\u003cString\u003e completions) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.originalInput \u003d originalInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.lastArgument \u003d lastArgument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.completions \u003d completions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String getOriginalInput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return originalInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String getLastArgument() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return lastArgument;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cString\u003e getCompletions() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return completions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                || (other instanceof PartialInput"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    \u0026\u0026 originalInput.equals(((PartialInput) other).originalInput)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    \u0026\u0026 lastArgument.equals(((PartialInput) other).lastArgument)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    \u0026\u0026 completions.equals(((PartialInput) other).completions));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 39
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/PartialInputParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MATNO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NUSID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.finder.Finder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Handles parsing of the user\u0027s input when an autocomplete is requested."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class PartialInputParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Searches for autocomplete results based on the user\u0027s input and the provided application model."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static PartialInput parse(String partialInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Finder finder \u003d new Finder(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentSingleValue lastPrefixValue \u003d ArgumentTokenizer.tokenizeLastArgument(partialInput, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                PREFIX_NAME, PREFIX_NUSID, PREFIX_MATNO, PREFIX_MODULE, PREFIX_TUTORIAL_NAME, PREFIX_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Prefix prefix \u003d lastPrefixValue.getPrefix();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String value \u003d lastPrefixValue.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cString\u003e completions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (prefix.equals(PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteEmail(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (prefix.equals(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteName(value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (prefix.equals(PREFIX_NUSID)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteNusId(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (prefix.equals(PREFIX_MATNO)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteMatNo(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (prefix.equals(PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteModCode(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (prefix.equals(PREFIX_TUTORIAL_NAME)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteTutName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (prefix.equals(PREFIX_TUTORIAL_DAY)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            completions \u003d finder.autocompleteDay(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new PartialInput(partialInput, value, completions);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 56
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/SelectSuggestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.SelectSuggestionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class SelectSuggestionCommandParser implements Parser\u003cSelectSuggestionCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks if the top command in the pending command stack is a {@code SelectSuggestionCommand}. If it is, pop it off"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * the stack, modify it to include the input index, and return it command for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @throws ParseException if the user input is out of range, or when there is no pending"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * {@code SelectSuggestionCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public SelectSuggestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index index \u003d Index.fromOneBased(Integer.parseInt(args));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new SelectSuggestionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lumos309": 35
    }
  },
  {
    "path": "src/main/java/seedu/tarence/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/Application.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.UniqueTutorialList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Wraps all data at the application level"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class Application implements ReadOnlyApplication {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final UniquePersonList students;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private final UniqueTutorialList tutorials;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private Stack\u003cCommand\u003e pendingCommands;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private List\u003cCommand\u003e suggestedCommands;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private String suggestedCorrections;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private PartialInput suggestedCompletions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private boolean isInputChanged;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        students \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorials \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        pendingCommands \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCompletions \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        isInputChanged \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Application() {}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Creates an application using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Application(ReadOnlyApplication toBeCopied) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    //// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d list overwrite operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code persons} must not contain duplicate students."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            personList.add(student);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.students.setPersons(personList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the contents of the module list with {@code Module}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code Module} must not contain duplicate modules."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the contents of the tutorials list with {@code Tutorial}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code Tutorial} must not contain duplicate tutorials."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutorials.setTutorials(tutorials);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Resets the existing data of this {@code Application} with {@code newData}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData(ReadOnlyApplication newData) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        setTutorials(newData.getTutorialList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d person-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the application."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds a person to the application."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The person must not already exist in the application."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the application."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Removes {@code key} from this {@code Application}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code key} must exist in the application."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Adds a student to their associated tutorial in its associated module."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module targetModule \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (module.getModCode().equals(student.getModCode())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                targetModule \u003d module;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : targetModule.getTutorials()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (tutorial.getTutName().equals(student.getTutName())) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                tutorial.addStudent(student);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d student-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds a student to the application."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The student must not already exist in the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void addStudent(Student s) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        students.add(s);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The person identity of {@code editedStudent} must not be the same as another existing student in the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial targetTutorial \u003d null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (tutorial.getTutName().equals(target.getTutName())) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                targetTutorial \u003d tutorial;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        removeTutorial(targetTutorial);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        targetTutorial.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        addTutorial(targetTutorial);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        addTutorialToModule(targetTutorial);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Removes {@code key} from this {@code Application}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code key} must exist in the application."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Delete students from the main list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Delete students from existing tutorials"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (tutorial.getTutName().equals(key.getTutName())) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                tutorial.deleteStudent(key);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Delete students from existing modules"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (module.getModCode().equals(key.getModCode())) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                module.deleteStudent(key);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks whether a combination of the given student name, tutorial name, and module code exists in the application."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (!module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Tutorial tutorial : module.getTutorials()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (!tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                for (Student student : tutorial.getStudents()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    if (student.getName().equals(studName)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d module-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Adds a module to the application."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * The module must not already exist in the application."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void addModule(Module newModule) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(newModule);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        modules.add(newModule);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the application."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if a module of the given code exists. Used to check whether a tutorial command contains a valid"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * module code."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return modules.getModuleByCode(modCode).isPresent();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes a module from the application. Assumes the module exists in the application."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void removeModule(Module module) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modules.remove(module);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes all tutorials in a given module from the application."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void removeTutorialsFromModule(Module module) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : module.getTutorials()) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            removeStudentsFromTutorial(tutorial);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorials.remove(tutorial);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Can merge with addTutorial()?"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Adds a tutorial to its associated module. Assumes that a module of the given code exists."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module targetModule \u003d modules.getModuleByCode(tutorial.getModCode()).get();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        targetModule.addTutorial(tutorial);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d tutorial-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Adds a tutorial to the application."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * The tutorial must not already exist in the application."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void addTutorial(Tutorial newTutorial) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(newTutorial);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorials.add(newTutorial);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if a tutorial with the same identity as {@code tutorial} exists in the application."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return tutorials.contains(tutorial);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if a module with a tutorial of the given name exists. Used to check whether a student command"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * contains a valid module code and tutorial name."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireAllNonNull(modCode, tutName);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Optional\u003cModule\u003e module \u003d modules.getModuleByCode(modCode);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (module.isEmpty()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        boolean hasTut \u003d false;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : module.get().getTutorials()) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                hasTut \u003d true;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return hasTut;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns number of tutorials with equal names exists in the application."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public int getNumberOfTutorialsOfName(TutName tutName) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutName);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        int tutCount \u003d 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                tutCount++;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return tutCount;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes a tutorial from the application. Assumes the tutorial exists."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void removeTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        tutorials.remove(tutorial);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Delete from existing modules"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (module.getModCode().equals(tutorial.getModCode())) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                module.deleteTutorial(tutorial);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes all students from the given tutorial."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void removeStudentsFromTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Student student : tutorial.getStudents()) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            students.remove(student);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return (ObservableList\u003cStudent\u003e) (ObservableList\u003c?\u003e) students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getTutorialList() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return tutorials.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Stores a command for later execution, pending user confirmation."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storePendingCommand(Command command) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        pendingCommands.push(command);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Removes pending command from application and returns it for execution."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Command retrievePendingCommand() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (hasPendingCommand()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return pendingCommands.pop();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks whether a pending command exists in the application."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasPendingCommand() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return pendingCommands.size() \u003e 0;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns the pending command at the top of the execution stack if it exists, else null."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Command peekPendingCommand() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (hasPendingCommand()) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return pendingCommands.peek();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Stores a list of suggested commands for future selection and execution."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.suggestedCommands \u003d suggestedCommands;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.suggestedCorrections \u003d suggestedCorrections;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Gets the stored list of suggested commands for selection and execution."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCommands;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Gets the string representing the corrections in the suggested commands."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    String getSuggestedCorrections() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCorrections;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes the stored list of suggested commands."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteSuggestedCommands() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCommands \u003d null;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCorrections \u003d null;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void storeSuggestedCompletions(PartialInput suggestedCompletions) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.suggestedCompletions \u003d suggestedCompletions;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    PartialInput getSuggestedCompletions() {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCompletions;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteSuggestedCompletions() {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCompletions \u003d null;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasSuggestionCompletions() {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return suggestedCompletions \u003d\u003d null;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void setInputChangedToTrue() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        isInputChanged \u003d true;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void setInputChangedToFalse() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        isInputChanged \u003d false;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasInputChanged() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return isInputChanged;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                || (other instanceof Application // instanceof handles nulls"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 persons.equals(((Application) other).persons)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 students.equals(((Application) other).students)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 modules.equals(((Application) other).modules)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 tutorials.equals(((Application) other).tutorials));"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 38,
      "Ellieyee": 129,
      "AhmadHatziq": 47,
      "-": 97,
      "lumos309": 222
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the user prefs\u0027 application file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Path getApplicationFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the user prefs\u0027 application file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void setApplicationFilePath(Path applicationFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces application data with the data in {@code application}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void setApplication(ReadOnlyApplication application);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns the application */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ReadOnlyApplication getApplication();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the application."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The person must exist in the application."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code person} must not already exist in the application."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Removes the student from the studentList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code student} must already exist in the application."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void deleteStudent(Student student);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * existing student in the application."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code student} must not already exist in the application."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks if the combination of a given student name, tutorial name, and module code exists in the model."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered tutorial list */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cTutorial\u003e getFilteredTutorialList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Special case only used for find command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void updateFilteredStudentList(NameContainsKeywordsPredicate predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates the filter of the filtered tutorial list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks if a module of the given code exists."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasModuleOfCode(ModCode modCode);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * {@code module} must not already exist in the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Assumes the module exists in the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteModule(Module module);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteTutorialsFromModule(Module module);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    boolean hasTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    void addTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteStudentsFromTutorial(Tutorial tutorial);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void addTutorialToModule(Tutorial tutorial);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void addStudentToTutorial(Student student);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks if a tutorial of the given name exists in a module of the given code."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasTutorialInModule(ModCode modCode, TutName tutName);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks if there are multiple tutorials of the same name in the application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    int getNumberOfTutorialsOfName(TutName tutName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Stores a command to be executed pending user confirmation."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void storePendingCommand(Command command);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Removes pending command and returns it for execution if it exists, else null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    Command getPendingCommand();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks if a pending command exists in the application."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasPendingCommand();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns the pending command at the top of the execution stack if it exists, else null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    Command peekPendingCommand();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Stores a list of suggested commands for future selection and execution."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Gets the stored list of suggested commands for selection and execution."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    List\u003cCommand\u003e getSuggestedCommands();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Gets the string representing the corrections in the suggested commands."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    String getSuggestedCorrections();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes the stored list of suggested commands."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteSuggestedCommands();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Stores a list of suggested completions for the current partial input."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void storeSuggestedCompletions(PartialInput suggestedCompletions);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Gets the list of suggested completions for the current partial input."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    PartialInput getSuggestedCompletions();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Deletes the stored list of suggested completions."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void deleteSuggestedCompletions();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns whether there are suggested completions currently stored in the application."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasSuggestedCompletions();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void setInputChangedToTrue();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    void setInputChangedToFalse();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks whether the user\u0027s input has changed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    boolean hasInputChanged();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 6,
      "Ellieyee": 83,
      "AhmadHatziq": 17,
      "-": 71,
      "lumos309": 106
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Represents the in-memory model of the application data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final Application application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final FilteredList\u003cTutorial\u003e filteredTutorials;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Initializes a ModelManager with the given student and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ModelManager(ReadOnlyApplication application, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(application, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        logger.fine(\"Initializing with application: \" + application + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.application \u003d new Application(application);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.application.getStudentList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.application.getPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.application.getModuleList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredTutorials \u003d new FilteredList\u003c\u003e(this.application.getTutorialList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this(new Application(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return userPrefs.getApplicationFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setApplicationFilePath(Path applicationFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(applicationFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        userPrefs.setApplicationFilePath(applicationFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d T.A.rence: Person methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setApplication(ReadOnlyApplication application) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.application.resetData(application);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return application;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return application.hasPerson(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.removePerson(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d T.A.rence: Student methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return application.hasStudent(student);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addStudent(student);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.removeStudent(student);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.addStudentToTutorial(student);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireAllNonNull(studName, tutName, modCode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.hasStudentInTutorialAndModule(studName, tutName, modCode);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d T.A.rence: Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        application.addModule(module);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return application.hasModule(module);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.removeModule(module);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteTutorialsFromModule(Module module) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.removeTutorialsFromModule(module);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.hasModuleOfCode(modCode);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.addTutorialToModule(tutorial);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d T.A.rence: Tutorial methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        application.addTutorial(tutorial);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return application.hasTutorial(tutorial);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireAllNonNull(modCode, tutName);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.hasTutorialInModule(modCode, tutName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public int getNumberOfTutorialsOfName(TutName tutName) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.getNumberOfTutorialsOfName(tutName);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.removeTutorial(tutorial);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteStudentsFromTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutorial);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.removeStudentsFromTutorial(tutorial);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code versionedApplication}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} containing students backed by"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * the internal list of {@code versionedApplication}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code versionedApplication}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Tutorial} backed by the internal list of"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code versionedApplication}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return filteredTutorials;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredStudentList(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        filteredTutorials.setPredicate(predicate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storePendingCommand(Command command) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.storePendingCommand(command);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Command getPendingCommand() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.retrievePendingCommand();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasPendingCommand() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.hasPendingCommand();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Command peekPendingCommand() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return application.peekPendingCommand();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                       String suggestedCorrections) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireAllNonNull(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.storeSuggestedCommands(suggestedCommands, suggestedCorrections);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.getSuggestedCommands();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String getSuggestedCorrections() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.getSuggestedCorrections();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteSuggestedCommands() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.deleteSuggestedCommands();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storeSuggestedCompletions(PartialInput suggestedCompletions) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.storeSuggestedCompletions(suggestedCompletions);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public PartialInput getSuggestedCompletions() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.getSuggestedCompletions();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteSuggestedCompletions() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.deleteSuggestedCompletions();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasSuggestedCompletions() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.hasSuggestionCompletions();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setInputChangedToTrue() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.setInputChangedToTrue();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setInputChangedToFalse() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        application.setInputChangedToFalse();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasInputChanged() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return application.hasInputChanged();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return application.equals(other.application)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 filteredTutorials.equals(other.filteredTutorials);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 5,
      "Ellieyee": 119,
      "AhmadHatziq": 33,
      "-": 119,
      "lumos309": 139
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/ReadOnlyApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Unmodifiable view of T.A.rence"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public interface ReadOnlyApplication {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an unmodifiable view of the tutorial list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * This list will not contain any duplicate tutorials."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ObservableList\u003cTutorial\u003e getTutorialList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 24,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Path getApplicationFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Path applicationFilePath \u003d Paths.get(\"data\" , \"application.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        setApplicationFilePath(newUserPrefs.getApplicationFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return applicationFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setApplicationFilePath(Path applicationFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(applicationFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.applicationFilePath \u003d applicationFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 applicationFilePath.equals(o.applicationFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return Objects.hash(guiSettings, applicationFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + applicationFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/builder/ModuleBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.model.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String DEFAULT_MODCODE \u003d \"CS2100\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final List\u003cTutorial\u003e DEFAULT_TUTORIALS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private List\u003cTutorial\u003e tutorials;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modCode \u003d new ModCode(DEFAULT_MODCODE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        tutorials \u003d DEFAULT_TUTORIALS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modCode \u003d moduleToCopy.getModCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        tutorials \u003d moduleToCopy.getTutorials();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code ModCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ModuleBuilder withModCode(String modCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.modCode \u003d new ModCode(modCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code List\u003cClass\u003e} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ModuleBuilder withTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.tutorials \u003d tutorials;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new Module(modCode, tutorials);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 54,
      "lumos309": 1
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/builder/PersonBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.model.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new Person(name, email);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 2,
      "Ellieyee": 4,
      "lumos309": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/builder/StudentBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.model.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class StudentBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String DEFAULT_MATRIC \u003d \"A0123456X\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_MODULE \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String DEFAULT_NUSNETID \u003d \"e0123456\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_TUTORIAL \u003d \"T01\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private Optional\u003cMatricNum\u003e matricNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private Optional\u003cNusnetId\u003e nusnetId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private TutName tutName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        matricNum \u003d Optional.\u003cMatricNum\u003eof(new MatricNum(DEFAULT_MATRIC));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modCode \u003d new ModCode(DEFAULT_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        nusnetId \u003d Optional.\u003cNusnetId\u003eof(new NusnetId(DEFAULT_NUSNETID));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        tutName \u003d new TutName(DEFAULT_TUTORIAL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super(studentToCopy);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        matricNum \u003d studentToCopy.getMatricNum();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        nusnetId \u003d studentToCopy.getNusnetId();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modCode \u003d studentToCopy.getModCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        tutName \u003d studentToCopy.getTutName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code MatricNum} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentBuilder withMatricNum(String matricNum) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.matricNum \u003d Optional.\u003cMatricNum\u003eof(new MatricNum(matricNum));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code MatricNum} of the {@code Student} that we are building to empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public StudentBuilder withoutMatricNum() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.matricNum \u003d Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code NusnetId} of the {@code Student} that we are building to empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public StudentBuilder withoutNusnetId() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.nusnetId \u003d Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code NusnetId} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentBuilder withNusnetId(String nusnetId) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.nusnetId \u003d Optional.\u003cNusnetId\u003eof(new NusnetId(nusnetId));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code ModCode} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public StudentBuilder withModCode(String modCode) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.modCode \u003d new ModCode(modCode);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code TutName} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public StudentBuilder withTutName(String tutName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.tutName \u003d new TutName(tutName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new Student(name, email, matricNum, nusnetId, modCode, tutName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 72,
      "lumos309": 44
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/builder/TimeTableBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.model.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class TimeTableBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String DEFAULT_STARTTIME \u003d \"12:00:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Set\u003cWeek\u003e DEFAULT_WEEKS \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private Set\u003cWeek\u003e weeks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TimeTableBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        duration \u003d Duration.ofMinutes(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        day \u003d DayOfWeek.valueOf(DEFAULT_DAY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        startTime \u003d LocalTime.parse(DEFAULT_STARTTIME, DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DEFAULT_WEEKS.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (int w \u003d 3; w \u003c\u003d 13; w++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            DEFAULT_WEEKS.add(new Week(w));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        weeks \u003d DEFAULT_WEEKS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        weeks \u003d DEFAULT_WEEKS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Initializes the TimeTableBuilder with the data of {@code timeTableToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TimeTableBuilder(TimeTable timeTableToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        duration \u003d timeTableToCopy.getDuration();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        day \u003d timeTableToCopy.getDay();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        startTime \u003d timeTableToCopy.getStartTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        weeks \u003d timeTableToCopy.getWeeks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code Duration} of the {@code TimeTable} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TimeTableBuilder withDuration(int duration) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.duration \u003d Duration.ofMinutes(duration);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code DayOfWeek} of the {@code TimeTable} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TimeTableBuilder withDayOfWeek(String day) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.day \u003d DayOfWeek.valueOf(day);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code Time} of the {@code TimeTable} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TimeTableBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code Weeks} of the {@code TimeTable} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TimeTableBuilder withWeeks(Set\u003cWeek\u003e weeks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TimeTable build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new TimeTable(day, startTime, weeks, duration);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 13,
      "lumos309": 74
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/builder/TutorialBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.model.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TimeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class TutorialBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_MODCODE \u003d \"CS2100\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_TUTNAME \u003d \"T01\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d 100;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String DEFAULT_STARTTIME \u003d \"12:00:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Set\u003cWeek\u003e DEFAULT_WEEKS \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final List\u003cStudent\u003e DEFAULT_STUDENTS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private Set\u003cWeek\u003e weeks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private TutName tutName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private List\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutorialBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modCode \u003d new ModCode(DEFAULT_MODCODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        duration \u003d Duration.ofMinutes(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        day \u003d DayOfWeek.valueOf(DEFAULT_DAY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        startTime \u003d LocalTime.parse(DEFAULT_STARTTIME, DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DEFAULT_WEEKS.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (int w \u003d 3; w \u003c\u003d 13; w++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            DEFAULT_WEEKS.add(new Week(w));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        weeks \u003d DEFAULT_WEEKS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        tutName \u003d new TutName(DEFAULT_TUTNAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        students \u003d DEFAULT_STUDENTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code m}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutorialBuilder(Tutorial tutorialToCopy) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.modCode \u003d tutorialToCopy.getModCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.duration \u003d tutorialToCopy.getTimeTable().getDuration();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.day \u003d tutorialToCopy.getTimeTable().getDay();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startTime \u003d tutorialToCopy.getTimeTable().getStartTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.weeks \u003d tutorialToCopy.getTimeTable().getWeeks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.tutName \u003d tutorialToCopy.getTutName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.students \u003d tutorialToCopy.getStudents();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code ModCode} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutorialBuilder withModCode(String modCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.modCode \u003d new ModCode(modCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code ModCode} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutorialBuilder withModCode(ModCode modCode) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code TimeTable} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutorialBuilder withTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.duration \u003d timeTable.getDuration();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.day \u003d timeTable.getDay();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startTime \u003d timeTable.getStartTime();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.weeks \u003d timeTable.getWeeks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Sets the {@code TutName} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutorialBuilder withTutName(String tutName) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.tutName \u003d new TutName(tutName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets the {@code List\u003cStudent\u003e} of the {@code Tutorial} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TutorialBuilder withStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Tutorial build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return new Tutorial(tutName, day, startTime, weeks, duration, students, modCode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 22,
      "lumos309": 93
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/module/ModCode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Module Code."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ModCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            \"Module code consists of a two- or three-letter prefix that denotes the discipline, and four digits.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \" It may end with a single letter.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \" It should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * The first character of the module code must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z]{2,3}[0-9]{4}[a-zA-Z]?$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public final String modCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ModCode(String modCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidModCode(modCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidModCode(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof ModCode // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 modCode.equalsIgnoreCase(((ModCode) other).modCode)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return modCode.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 58,
      "lumos309": 1
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.exceptions.InvalidTutorialModCodeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final ModCode modCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected List\u003cTutorial\u003e tutorials;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Module(ModCode modCode, List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(modCode, tutorials);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.tutorials \u003d tutorials;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public ModCode getModCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public List\u003cTutorial\u003e getTutorials() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return tutorials;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Deletes the given tutorial from the module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void deleteTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutorials.remove(tutorial);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Deletes the given student from the module"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (tutorial.getTutName().equals(student.getTutName())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                tutorial.deleteStudent(student);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Adds tutorial to module. Throws an error if tutorial does not belong to module"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void addTutorial(Tutorial tutorial) throws InvalidTutorialModCodeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (tutorial.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new InvalidTutorialModCodeException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return otherModule.getModCode().equals(getModCode())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherModule.getTutorials().equals(getTutorials());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Objects.hash(modCode, tutorials);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        builder.append(getModCode())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .append(\" | \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (Tutorial t : tutorials) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            builder.append(t.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if both modules have the same code."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 otherModule.getModCode().equals(getModCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 77,
      "Ellieyee": 19,
      "AhmadHatziq": 18,
      "lumos309": 3
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/module/UniqueModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Represents a list of modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if the list contains an equivalent tutorial with the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean containsModCode(ModCode modCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return internalList.stream().anyMatch(module -\u003e module.getModCode().equals(modCode));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void add(Module newModule) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(newModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (contains(newModule)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        internalList.add(newModule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the contents of this UniqueModuleList with {@code Module}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the contents of this list with {@code Module}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns the {@code Module} of the given {@code ModCode}, or {@code Optional\u003cEmpty\u003e} if it does not exist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Optional\u003cModule\u003e getModuleByCode(ModCode modCode) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(modCode);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Module module : internalList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return Optional.of(module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 74,
      "AhmadHatziq": 63,
      "lumos309": 13
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * code)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 11
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/module/exceptions/InvalidTutorialModCodeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class InvalidTutorialModCodeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public InvalidTutorialModCodeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super (\"Operation cannot add tutorial to module due to modcode mismatch.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public ModuleNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super (\"Operation is unable to find the specified module.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Represents a Person\u0027s email in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param email A valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Represents a Person\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The first character of the student must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "Ellieyee": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Represents a Person in the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final Email email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Person(Name name, Email email) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(name, email);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if both persons have the same name and same email"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both persons have the same identity or data fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return Objects.hash(name, email);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 3,
      "Ellieyee": 10,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public PersonNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super (\"Operation is unable to find the specified person.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "AhmadHatziq": 5,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/student/MatricNum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Student\u0027s matriculation number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MatricNum {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Matriculation numbers should be of the format [AU]*******[A-Z] \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"1. The matriculation number should start with an `A` or `U` and should end with a letter [A-Z].\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"2. There should be 7 numbers [0-9] between the first and last characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[auAU][0-9]{7}[a-zA-Z]$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Constructs an {@code MatricNum}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param matricNum A valid matriculation number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public MatricNum(String matricNum) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireNonNull(matricNum);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidMatricNum(matricNum.toUpperCase()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        value \u003d matricNum.toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns if a given string is a valid matric."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidMatricNum(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof MatricNum // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 value.equalsIgnoreCase(((MatricNum) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 56,
      "AhmadHatziq": 1
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/student/NusnetId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Represents an NUSNETID field of a Student."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class NusnetId {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            \"NUSNETID consists of a \u0027E\u0027 followed by 7 numbers.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Matriculation number is an \"E\", followed by exactly 7 numbers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[eE][0-9]{7}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public final String nusnetId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Constructs a {@code NusnetId}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * @param nusnetId A matriculation number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public NusnetId(String nusnetId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(nusnetId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        checkArgument(isValidNusnetId(nusnetId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns true if a given string is a valid NUSNET ID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static boolean isValidNusnetId(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return nusnetId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                || (other instanceof NusnetId // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 nusnetId.equalsIgnoreCase(((NusnetId) other).nusnetId)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return nusnetId.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 3,
      "lumos309": 53
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Student."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class Student extends Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected Optional\u003cMatricNum\u003e matricNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected Optional\u003cNusnetId\u003e nusnetId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Assumes student can only belong to one module and tutorial?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    protected ModCode modCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    protected TutName tutName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Student(Name name, Email email,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Optional\u003cMatricNum\u003e matricNum, Optional\u003cNusnetId\u003e nusnetId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super(name, email);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(matricNum, nusnetId);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.matricNum \u003d matricNum;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Optional\u003cMatricNum\u003e getMatricNum() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return matricNum;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Optional\u003cNusnetId\u003e getNusnetId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return nusnetId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public ModCode getModCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public TutName getTutName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return tutName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both students have the same name and share one other attribute."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 (otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || otherStudent.getMatricNum().equals(getMatricNum())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || otherStudent.getNusnetId().equals(getNusnetId()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both students have the same identity or data fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherStudent.getMatricNum().equals(getMatricNum())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 otherStudent.getNusnetId().equals(getNusnetId())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 otherStudent.getTutName().equals(getTutName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 otherStudent.getModCode().equals(getModCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Objects.hash(name, email, matricNum, nusnetId);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Matric Number: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getMatricNum())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" NUSNET Id: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getNusnetId());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 96,
      "lumos309": 20
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/student/StudentsInTutorialPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code TutName} matches the given index"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class StudentsInTutorialPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final Index tutorialIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TutName tutName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ModCode modCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public StudentsInTutorialPredicate(Index tutorialIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutorialIndex \u003d tutorialIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutName(TutName tutName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModCode(ModCode modCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.tutorialIndex.getZeroBased();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return (student.tutName.equals(this.tutName) \u0026\u0026 student.modCode.equals(this.modCode));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                || (other instanceof StudentsInTutorialPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 tutorialIndex.equals(((StudentsInTutorialPredicate) other).tutorialIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 44
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents an Assignment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class Assignment implements Comparable\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_ASSIGNMENT_NAME \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            \"Assignment name should not be blank nor start/end with whitespace.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_MAX_SCORE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            \"Max score should be a non-negative integer\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd-MM-yyyy HHmm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_START_END_DATE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            String.format(\"Dates should be of the format %s. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            + \"Start date should be earlier than end date.\", DATE_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * The first character of the assignment name must not be a whitespace,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\S+.*\\\\S+$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final String assignName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final int maxScore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Assignment(String assignName, int maxScore, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidAssignName(assignName), MESSAGE_CONSTRAINTS_ASSIGNMENT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidMaxScore(maxScore), MESSAGE_CONSTRAINTS_MAX_SCORE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidStartEndDates(startDate, endDate), MESSAGE_CONSTRAINTS_START_END_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.assignName \u003d assignName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.maxScore \u003d maxScore;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if a given string is a valid name, else false."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidAssignName(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if a given int is a valid max score, else false."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidMaxScore(int maxScore) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return maxScore \u003e\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if given start and end dates are valid, else false."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidStartEndDates(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return startDate.before(endDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String getAssignName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return assignName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int getMaxScore() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return maxScore;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        builder.append(getAssignName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Max Score: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getMaxScore())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getEndDate());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof Assignment // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 assignName.equalsIgnoreCase(((Assignment) other).assignName))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 maxScore \u003d\u003d ((Assignment) other).maxScore"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 startDate.equals(((Assignment) other).startDate)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 endDate.equals(((Assignment) other).endDate); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Compares first on the basis of end date, then start date and finally assignment name."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int compareTo(Assignment other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return endDate.compareTo(other.endDate) !\u003d 0"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                ? endDate.compareTo(other.endDate)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                : startDate.compareTo(other.startDate) !\u003d 0"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                ? startDate.compareTo(other.startDate)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                : assignName.compareTo(other.assignName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Objects.hash(assignName, maxScore, startDate, endDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Change to valid JSON output"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toJsonString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 131
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/Attendance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.WeekNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents an Attendance for a Tutorial."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Map\u003cWeek, Map\u003cStudent, Boolean\u003e\u003e attendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Attendance(Set\u003cWeek\u003e weeks, List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(weeks, students);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        attendance \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (Week week : weeks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            attendance.put(week, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (Student student: students) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                attendance.get(week).put(student, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Constructor for creating an Attendance from Json string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param attendance"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Attendance(Map\u003cWeek, Map\u003cStudent, Boolean\u003e\u003e attendance) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Map\u003cWeek, Map\u003cStudent, Boolean\u003e\u003e getAttendance() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns attendance for that week if it exists, else throws an error."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Map\u003cStudent, Boolean\u003e getWeek(Week week) throws WeekNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!attendance.containsKey(week)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new WeekNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return attendance.get(week);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if Student is present for the week, else false."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Throws error if Student or week does not exist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean isPresent(Week week, Student student) throws StudentNotFoundException, WeekNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!this.getWeek(week).containsKey(student)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return attendance.get(week).get(student);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets attendance of Student in specified Week."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Throws error if Week does not exist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setAttendance(Week week,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Student student, boolean isPresent) throws WeekNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            this.isPresent(week, student);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            getWeek(week).replace(student, isPresent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (StudentNotFoundException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            getWeek(week).put(student, isPresent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Toggles attendance of Student in specified Week."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Throws error if Week does not exist."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setAttendance(Week week,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Student student) throws WeekNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            setAttendance(week, student, !isPresent(week, student));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        } catch (StudentNotFoundException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            setAttendance(week, student, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Adds Student to Attendance, used when adding a Student to a Tutorial."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d attendance.keySet();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (Week week : weeks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            setAttendance(week, student, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Deletes Student from Attendance, used when deleting a Student from a Tutorial."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d attendance.keySet();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (Week week : weeks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            getWeek(week).remove(student);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both attendances have the same identity or data fields."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!(other instanceof Attendance)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance otherAttendance \u003d (Attendance) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return otherAttendance.getAttendance().equals(this.getAttendance());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Objects.hash(attendance);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return attendance.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return attendance.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Map\u003cWeek, Map\u003cStudent, Boolean\u003e\u003e getAttendanceMap() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 135,
      "AhmadHatziq": 22
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/TimeTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a TimeTable for a Tutorial. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    // By default, tutorials run from weeks 3-13"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String DEFAULT_WEEKS \u003d \"3-13\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Set\u003cWeek\u003e weeks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TimeTable(DayOfWeek day, LocalTime startTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Set\u003cWeek\u003e weeks, Duration duration) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(day, startTime, weeks, duration);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Set\u003cWeek\u003e getWeeks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both timetables have the same identity or data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!(other instanceof TimeTable)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable otherTimeTable \u003d (TimeTable) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return otherTimeTable.getDay().equals(getDay())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTimeTable.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTimeTable.getWeeks().equals(getWeeks())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTimeTable.getDuration().equals(getDuration());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Objects.hash(day, startTime, weeks, duration);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        builder.append(getWeeks())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Day: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getDay())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Start Time: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Weeks: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getWeeks())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .append(getDuration());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 91,
      "AhmadHatziq": 1,
      "lumos309": 3
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/TutName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Tutorial\u0027s Name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TutName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            \"Tutorial name should not be blank and should not start or end with whitespace.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * The first character of the tutorial name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\S+.*\\\\S+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public final String tutName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TutName(String tutName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(tutName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidTutName(tutName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidTutName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return tutName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof TutName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 tutName.equalsIgnoreCase(((TutName) other).tutName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return tutName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 56,
      "AhmadHatziq": 1
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/Tutorial.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Tutorial."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final int NOT_SUBMITTED \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final TutName tutName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected final TimeTable timeTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected List\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    protected ModCode modCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected Attendance attendance;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Add assignments to storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    protected Map\u003cAssignment, Map\u003cStudent, Integer\u003e\u003e assignments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Tutorial(TutName tutName, DayOfWeek day, LocalTime startTime,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Set\u003cWeek\u003e weeks, Duration duration,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            List\u003cStudent\u003e students, ModCode modCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireAllNonNull(tutName, day, startTime, weeks, students, modCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.timeTable \u003d new TimeTable(day, startTime, weeks, duration);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.attendance \u003d new Attendance(weeks, students);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.assignments \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Constructor for a tutorial read from saved file. Difference is that the attendance objact is specified."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Tutorial(TutName tutName, DayOfWeek day, LocalTime startTime,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    Set\u003cWeek\u003e weeks, Duration duration,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    List\u003cStudent\u003e students, ModCode modCode, Attendance attendance) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireAllNonNull(tutName, day, startTime, weeks, students, modCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.tutName \u003d tutName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.timeTable \u003d new TimeTable(day, startTime, weeks, duration);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TutName getTutName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return tutName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public List\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public ModCode getModCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Assignment getAssignment(Index assignIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cAssignment\u003e keys \u003d ((TreeMap\u003cAssignment, Map\u003cStudent, Integer\u003e\u003e) assignments).navigableKeySet();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Integer index \u003d assignIndex.getZeroBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (Assignment assignment : keys) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (index \u003d\u003d i) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return assignment;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Adds a Student to a Tutorial."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        attendance.addStudent(student);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * The person identity of {@code editedStudent} must not be the same as another existing student in the application."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (students.get(i).isSameStudent(target)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                students.set(i, editedStudent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Removes a Student from a Tutorial."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        students.remove(student);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        attendance.deleteStudent(student);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets a Student\u0027s Attendance."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setAttendance(Week week, Student student) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        attendance.setAttendance(week, student);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Adds an Assignment to a Tutorial."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assignments.put(assignment, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            assignments.get(assignment).put(student, NOT_SUBMITTED);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Removes an Assignment from a Tutorial. Returns true if removal is successful"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean deleteAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return assignments.remove(assignment) !\u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Sets an Assignment in a Tutorial."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setAssignment(Assignment target, Assignment assignment) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        addAssignment(assignment);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assignments.get(target).putAll(assignments.get(assignment));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        deleteAssignment(target);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both tutorials have the same identity or data fields."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        if (!(other instanceof Tutorial)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial otherTutorial \u003d (Tutorial) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return otherTutorial.getTutName().equals(getTutName())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTutorial.getStudents().equals(getStudents())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTutorial.getModCode().equals(getModCode())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTutorial.getTimeTable().equals(getTimeTable())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 otherTutorial.getAttendance().equals(getAttendance());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Objects.hash(tutName, timeTable, students);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        builder.append(getTutName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(\" | \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(getTimeTable().getDay().toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(\" | \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(getTimeTable().getStartTime().toString());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(\" | \");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(getTimeTable().getWeeks().toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(\" | \");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(getTimeTable().getDuration().toString());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(\" | Students: \");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (Student s : students) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            builder.append(s.toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(\" | \");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        builder.append(getModCode().toString());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if both Tutorials have the same name, timetable and modcode."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean isSameTutorial(Tutorial otherTutorial) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (otherTutorial \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return otherTutorial !\u003d null"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 otherTutorial.getTimeTable().equals(getTimeTable())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 otherTutorial.getTutName().equals(getTutName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \u0026\u0026 otherTutorial.getModCode().equals(getModCode());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 163,
      "Ellieyee": 6,
      "AhmadHatziq": 44,
      "lumos309": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/UniqueTutorialList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.DuplicateTutorialException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.TutorialNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Represents a list of Tutorials."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class UniqueTutorialList implements Iterable\u003cTutorial\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private final ObservableList\u003cTutorial\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final ObservableList\u003cTutorial\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns true if the list contains an equivalent tutorial with the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean contains(Tutorial toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTutorial);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if the list contains an equivalent tutorial with the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean containsTutName(TutName tutName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(tutName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return internalList.stream().anyMatch(tutorial -\u003e tutorial.getTutName().equals(tutName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Adds a Tutorial to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * The Tutorial must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void add(Tutorial newTutorial) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(newTutorial);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (contains(newTutorial)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        internalList.add(newTutorial);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the tutorial {@code target} in the list with {@code editedTutorial}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * The person identity of {@code editedTutorial} must not be the same as another existing tutorial in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial(Tutorial target, Tutorial editedTutorial) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(target, editedTutorial);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!target.isSameTutorial(editedTutorial) \u0026\u0026 contains(editedTutorial)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        internalList.set(index, editedTutorial);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials(UniqueTutorialList replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Replaces the contents of this list with {@code tutorials}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code tutorials} must not contain duplicate tutorials."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireAllNonNull(tutorials);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!tutorialsAreUnique(tutorials)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new DuplicateTutorialException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        internalList.setAll(tutorials);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns the {@code Tutorial} of the given {@code TutName}, or {@code Optional\u003cEmpty\u003e} if it does not exist."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Optional\u003cTutorial\u003e getTutorialByName(TutName tutName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        requireNonNull(tutName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : internalList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return Optional.of(tutorial);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Removes the equivalent Tutorial from the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * The Tutorial must exist in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void remove(Tutorial toRemove) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new TutorialNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cTutorial\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Iterator\u003cTutorial\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || (other instanceof UniqueTutorialList // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTutorialList) other).internalList));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if {@code tutorials} contains only unique tutorials."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean tutorialsAreUnique(List\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (int i \u003d 0; i \u003c tutorials.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tutorials.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (tutorials.get(i).isSameTutorial(tutorials.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 2,
      "Ellieyee": 69,
      "AhmadHatziq": 61,
      "lumos309": 14
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/Week.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Represents a Week in a TimeTable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class Week implements Comparable\u003cWeek\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            \"Week should be an integer from 1 to 13 and should not be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public final Integer week;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Week(Integer week) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        requireAllNonNull(week);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        checkArgument(isValidWeek(week), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * Returns true if a given integer is a valid week."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static boolean isValidWeek(Integer week) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return week \u003e\u003d 1 \u0026\u0026 week \u003c\u003d 13;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return week + \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                || (other instanceof Week // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                \u0026\u0026 week.equals(((Week) other).week)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int compareTo(Week week1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return Integer.compare(week, week1.week);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return week.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 54
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/exceptions/DuplicateTutorialException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Signals that the operation will result in duplicate Tutorial."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class DuplicateTutorialException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public DuplicateTutorialException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(\"Operation would result in duplicate Tutorials\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "AhmadHatziq": 9
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/exceptions/StudentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Signals that the operation is unable to find the specified Student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public StudentNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super(\"Operation is unable to find the specified Student.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/exceptions/TutorialNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Signals that the operation is unable to find the specified Tutorial."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class TutorialNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public TutorialNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super (\"Operation is unable to find the specified Tutorial.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "AhmadHatziq": 9
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/tutorial/exceptions/WeekNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * Signals that the operation is unable to find the specified Week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class WeekNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public WeekNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        super(\"Operation is unable to find the specified Week.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 10
    }
  },
  {
    "path": "src/main/java/seedu/tarence/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.TimeTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Contains utility methods for populating {@code Application} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Email(\"alexyeoh@example.com\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Email(\"berniceyu@example.com\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Email(\"charlotte@example.com\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new Person(new Name(\"David Li\"), new Email(\"lidavid@example.com\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Email(\"irfan@example.com\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Email(\"royb@example.com\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static ReadOnlyApplication getSampleApplication() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application sampleAb \u003d new Application();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a sample Student with the following attributes:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Name: Alice. Matric No.: A1234567Z. NUSNET ID: E1234567. Email: E1234567@u.nus.edu."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return sample Student object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Student getSampleStudent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        MatricNum matricNum \u003d new MatricNum(\"A1234567Z\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        NusnetId nusnetId \u003d new NusnetId(\"E1234567\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Name alice \u003d new Name(\"Alice\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Email email \u003d new Email (\"E1234567@u.nus.edu\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModCode modCode \u003d new ModCode(\"CS1101S\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TutName tutName \u003d new TutName(\"T01\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new Student(alice, email, Optional.of(matricNum), Optional.of(nusnetId), modCode, tutName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a sample Timetable:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Day: Monday."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Time: 1200."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Tutorial: Only week 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Duration: 1 HOUR."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Timetable vs Tutorial: Tutorial has a list of Students in it."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return sample TimeTable object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static TimeTable getSampleTimeTable() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"12:00:00\", DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weekFiveTutorial \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        weekFiveTutorial.add(new Week(5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Duration oneHour \u003d Duration.ofHours(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new TimeTable(DayOfWeek.MONDAY, time, weekFiveTutorial, oneHour);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a sample Tutorial with one student (from getSampleStudent)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Tutorial details:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Day: Monday."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Time: 1200."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Tutorial: Only week 5."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Duration: 1 HOUR."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return sample Tutorial object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Tutorial getSampleTutorial() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"12:00:00\", DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weekFiveTutorial \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        weekFiveTutorial.add(new Week(5));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cStudent\u003e students \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        students.add(getSampleStudent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModCode modCode \u003d new ModCode(\"CS1101S\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new Tutorial(new TutName(\"Sectional\"), DayOfWeek.MONDAY, time, weekFiveTutorial, Duration.ofHours(1),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                students, modCode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a sample Module with code: XX1234A and a list of tutorial(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return sample Module object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static Module getSampleModule() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003cTutorial\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tutorials.add(getSampleTutorial());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new Module(new ModCode(\"XX1234A\"), tutorials);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 7,
      "Ellieyee": 15,
      "AhmadHatziq": 76,
      "-": 17,
      "lumos309": 5
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/ApplicationStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Represents a storage for {@link Application}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public interface ApplicationStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Path getApplicationFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns application data as a {@link ReadOnlyApplication}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Optional\u003cReadOnlyApplication\u003e readApplication() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @see #getApplicationFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Optional\u003cReadOnlyApplication\u003e readApplication(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Saves the given {@link ReadOnlyApplication} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param application cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void saveApplication(ReadOnlyApplication application) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @see #saveApplication(ReadOnlyApplication)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void saveApplication(ReadOnlyApplication application, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 46
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/JsonAdaptedModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Jackson friendly version of a Module."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "@JsonRootName(value \u003d \"modules\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    // Identifiers to store the fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_NAME \u003d \"tutorialName\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_DAY \u003d \"tutorialDayOfWeek\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_START_TIME \u003d \"tutorialStartTime\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_WEEKS \u003d \"tutorialWeeks\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_DURATION \u003d \"tutorialDuration\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_MODULE_CODE \u003d \"tutorialModuleCode\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_STUDENT_LIST \u003d \"tutorialStudentList\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String TUTORIAL_ATTENDANCE_LIST \u003d \"tutorialAttendanceList\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_NAME \u003d \"studentName\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_EMAIL \u003d \"studentEmail\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_MATRIC_NUMBER \u003d \"studentMatricNumber\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_NUSNET_ID \u003d \"studentNusnetId\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_MODULE_CODE \u003d \"studentModuleCode\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_TUTORIAL_NAME \u003d \"studentTutorialName\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String STUDENT_ATTENDANCE_STATUS \u003d \"studentAttendance\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    // Error message Strings"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tutorial\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"Tutorial\u0027s %s field is invalid!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MISSING_GENERIC_FIELD \u003d \"Error in reading field! \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_FIELD \u003d \"Invalid field in %s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    // Json fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private LinkedHashMap\u003cString, String\u003e mapOfDifferentTutorials; // Implemented LinkedHashMap to preserve ordering."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Invoked during reading of the Json file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param moduleName Json string representing the Module Name/Code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param map Json string representing the Tutorial objects present in the Module."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleName,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                             @JsonProperty(\"tutorialMap\") LinkedHashMap\u003cString, String\u003e map) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.moduleCode \u003d moduleName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.mapOfDifferentTutorials \u003d map;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Invoked when saving the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param source Module object of the application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        moduleCode \u003d source.getModCode().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        mapOfDifferentTutorials \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (Tutorial t : source.getTutorials()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Obtain all the fields that defines a single Tutorial object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialName \u003d t.getTutName().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialDayOfWeek \u003d t.getTimeTable().getDay().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialStartTime \u003d t.getTimeTable().getStartTime().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialWeeks \u003d t.getTimeTable().getWeeks().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialDuration \u003d t.getTimeTable().getDuration().toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String studentListString \u003d JsonUtil.studentListToString(t.getStudents());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialModuleCode \u003d t.getModCode().toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String tutorialAttendanceString \u003d JsonUtil.attendanceListToString(t.getAttendance());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Add into LinkedHashMap\u003cString,String\u003e, singleTutorialMap. Reading is order dependant"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_NAME, tutorialName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_DAY, tutorialDayOfWeek);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_START_TIME, tutorialStartTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_WEEKS, tutorialWeeks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_DURATION, tutorialDuration);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_STUDENT_LIST, studentListString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, tutorialAttendanceString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            singleTutorialMap.put(TUTORIAL_MODULE_CODE, tutorialModuleCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            mapOfDifferentTutorials.put(tutorialName, singleTutorialMap.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Invoked during reading of Json file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts JsonAdaptedModule into a Module object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Module object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IllegalValueException when there is an error in reading one of the fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        List\u003cTutorial\u003e tutorials \u003d new ArrayList\u003cTutorial\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String tutorialName : mapOfDifferentTutorials.keySet()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Parses the tutorialString into a LinkedHashMap of the Tutorial\u0027s components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            LinkedHashMap\u003cString, String\u003e mapOfSingleTutorial \u003d JsonUtil"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    .tutorialStringToMap(mapOfDifferentTutorials.get(tutorialName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Creates a Tutorial Object from the tutorialString"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Tutorial tutorialFromJson \u003d JsonUtil.tutorialMapToTutorial(mapOfSingleTutorial);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Adds the Tutorial into the List."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            tutorials.add(tutorialFromJson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            ModCode modCodeFromJson \u003d ParserUtil.parseModCode(moduleCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return new Module(modCodeFromJson, tutorials);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_FIELD, Module.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Getter function for String moduleCode."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String module code."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Getter function for Linked Hashmap tutorialMap."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Tutorial Linked HashMap."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public LinkedHashMap\u003cString, String\u003e getMapOfDifferentTutorials() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return mapOfDifferentTutorials;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 150
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"email\") String email) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        email \u003d source.getEmail().value;;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new Person(modelName, modelEmail);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/JsonApplicationStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A class to access the application data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class JsonApplicationStorage implements ApplicationStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonApplicationStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public JsonApplicationStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Optional\u003cReadOnlyApplication\u003e readApplication() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return readApplication(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Similar to {@link #readApplication()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Optional\u003cReadOnlyApplication\u003e readApplication(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // From the Json file, creates an optional JsonSerializableApplication."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Relies on @JsonCreator of JsonSerializableApplication class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Optional\u003cJsonSerializableApplication\u003e jsonApplication \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                filePath, JsonSerializableApplication.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!jsonApplication.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Optional.of(jsonApplication.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void saveApplication(ReadOnlyApplication application) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        saveApplication(application, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Similar to {@link #saveApplication(ReadOnlyApplication)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void saveApplication(ReadOnlyApplication application, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(application);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // File save of application file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableApplication(application), filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 80,
      "AhmadHatziq": 5
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/JsonSerializableApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * An Immutable application that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "@JsonRootName(value \u003d \"application\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "class JsonSerializableApplication {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"Tutorial list contains duplicate tutorial(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Student list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructs a {@code JsonSerializableApplication} with the given persons."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Reads the Json file and converts to model."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public JsonSerializableApplication(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                                       @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Toggles if modules is read or not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Converts a given {@code ReadOnlyApplication} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableApplication}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public JsonSerializableApplication(ReadOnlyApplication source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // A JsonAdaptedModule is created for each module in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Converts this application into the model\u0027s {@code Application} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Converts Json to models."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Application toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application application \u003d new Application();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Application bypassApp \u003d new Application();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (application.hasPerson(person)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            application.addPerson(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Reads the saved module from file and populates application with it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (application.hasModule(module)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            application.addModule(module);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Populates the tutorial and student lists inside application."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (Module m : application.getModuleList()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            for (Tutorial t : m.getTutorials()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                if (application.hasTutorial(t)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                application.addTutorial(t);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                for (Student s : t.getStudents()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    if (application.hasStudent(s)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    application.addStudent(s);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return application;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public List\u003cJsonAdaptedModule\u003e getJsonAdaptedModules() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.modules;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 18,
      "AhmadHatziq": 50,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public interface Storage extends ApplicationStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Path getApplicationFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    Optional\u003cReadOnlyApplication\u003e readApplication() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    void saveApplication(ReadOnlyApplication application) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 32
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Manages storage of Application data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ApplicationStorage applicationStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public StorageManager(ApplicationStorage applicationStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.applicationStorage \u003d applicationStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Application methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return applicationStorage.getApplicationFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Optional\u003cReadOnlyApplication\u003e readApplication() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return readApplication(applicationStorage.getApplicationFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Optional\u003cReadOnlyApplication\u003e readApplication(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return applicationStorage.readApplication(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void saveApplication(ReadOnlyApplication application) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        saveApplication(application, applicationStorage.getApplicationFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void saveApplication(ReadOnlyApplication application, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        applicationStorage.saveApplication(application, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/tarence/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Represents a storage for {@link seedu.tarence.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Saves the given {@link seedu.tarence.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final CommandExecutor autocompleteExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private final CommandExecutor inputChangedExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, CommandExecutor autocompleteExecutor,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                      CommandExecutor inputChangedExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.autocompleteExecutor \u003d autocompleteExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        this.inputChangedExecutor \u003d inputChangedExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setInput(String autocompletedString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        commandTextField.setText(autocompletedString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        commandTextField.positionCaret(autocompletedString.length());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Helper method to reset focus to CommandBox."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setFocus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Handles the Tab button pressed event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private void handleAutocomplete() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        autocompleteExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Default handler for button pressed events."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private void handleOtherInput() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        inputChangedExecutor.execute(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Handles button press inputs from the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private void handleKeyPressed(KeyEvent keyEvent) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        if (keyEvent.getCode().equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            handleCommandEntered();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else if (keyEvent.getCode().equals(KeyCode.TAB)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            handleAutocomplete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            handleOtherInput();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         * @see seedu.tarence.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 71,
      "lumos309": 53
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103-T14-2/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.Logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TutorialListPanel tutorialListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TabPane listTabPane;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TabPane displayTabPane;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tab tutorialsTab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tab studentsTab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tab modulesTab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tab attendanceTab;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Tab assignmentTab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TableView attendancePlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private StackPane tutorialListPanelPlaceholder;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        attendancePlaceholder.setPlaceholder(getPlaceHolderLabel());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        //personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        //personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tutorialListPanel \u003d new TutorialListPanel(logic.getFilteredTutorialList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tutorialListPanelPlaceholder.getChildren().add(tutorialListPanel.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getApplicationFilePath());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, this::executeAutocomplete, this::executeInputChanged);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Displays the given attendance to the user"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param tutorialAttendance"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void showAttendance(Tutorial tutorialAttendance) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        attendancePlaceholder.getItems().clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ObservableList\u003cString[]\u003e observableAttendance \u003d generateData(tutorialAttendance);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            attendancePlaceholder.setItems(observableAttendance);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            attendancePlaceholder.getColumns().setAll(createColumns());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            logger.info(\"successfully displayed:)\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            attendancePlaceholder.getItems().clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Generates an observable list based on the given tutorial attendane"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Solution below adopted from:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {https://stackoverflow.com/questions/41771098/how-to-plot-a-simple-double-matrix-into-tableview-in-javafx}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ObservableList\u003cString[]\u003e generateData(Tutorial tutorialAttendance) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ObservableList\u003cString[]\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String checkMark \u003d Character.toString((char) 0x2713);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String uncheckedSlot \u003d \"\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        int totalNumOfWeeks \u003d 13;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d tutorialAttendance.getTimeTable().getWeeks();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cStudent\u003e students \u003d tutorialAttendance.getStudents();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Attendance attendance \u003d tutorialAttendance.getAttendance();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // TODO: to be refactored"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            List\u003cString\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            attendanceList.add(student.getName().toString());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            for (int i \u003d 0; i \u003c totalNumOfWeeks; i++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                Week week \u003d new Week(i + 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (weeks.contains(week) \u0026\u0026 attendance.isPresent(week, student)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    attendanceList.add(checkMark);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    attendanceList.add(uncheckedSlot);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String[] arr \u003d attendanceList.toArray(new String[0]);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            list.add(arr);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private List\u003cTableColumn\u003cString[], String\u003e\u003e createColumns() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return IntStream.range(0, 14)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .mapToObj(this::createColumn)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Creates and returns a valid table column containing information from each column"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * of the attendance"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TableColumn\u003cString[], String\u003e createColumn(int col) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String header;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (col \u003d\u003d 0) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            header \u003d \"Name\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            header \u003d Integer.toString(col);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TableColumn\u003cString[], String\u003e column \u003d new TableColumn\u003c\u003e(header);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        column.setCellValueFactory(param -\u003e new ReadOnlyObjectWrapper\u003c\u003e(param.getValue()[col]));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return column;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label getPlaceHolderLabel() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String defaultMessage \u003d \"Welcome to T.A.rence \\uD83D\\uDE0A\\n\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"To see all user commands, type \\\"help\\\"\\n\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"To view a class attendance, type:\\n\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"displayAttendance \""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + PREFIX_TUTORIAL_NAME + \"TUTORIAL_NAME \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + PREFIX_MODULE + \"MODULE_CODE \\n\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Label placeholder \u003d new Label(defaultMessage);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return placeholder;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Selects the Student Tab"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void handleStudentTabSelected() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!studentsTab.isSelected()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            listTabPane.getSelectionModel().select(studentsTab);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Selects the module Tab"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void handleModuleTabSelected() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!modulesTab.isSelected()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            listTabPane.getSelectionModel().select(modulesTab);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Selects the tutorial Tab"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void handleTutorialTabSelected() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!tutorialsTab.isSelected()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            listTabPane.getSelectionModel().select(tutorialsTab);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Selects the attendance Tab"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void handleAttendanceTabSelected() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!attendanceTab.isSelected()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            displayTabPane.getSelectionModel().select(attendanceTab);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @see seedu.tarence.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            logger.info(\"display Tab \" + commandResult.isChangeTabs());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            showAttendance(commandResult.getTutorialAttendance());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (commandResult.isShowAttendance()) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                handleAttendanceTabSelected();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (commandResult.isChangeTabs()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                switch(commandResult.getTabToDisplay()) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                case MODULES:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    handleModuleTabSelected();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                case STUDENTS:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    handleStudentTabSelected();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    handleTutorialTabSelected();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Handles searching for autocomplete data and modifying the command box input field."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private CommandResult executeAutocomplete(String partialInput) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            String autocompletedString \u003d logic.autocomplete(partialInput);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            resultDisplay.setFeedbackToUser(autocompletedString);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            commandBox.setInput(autocompletedString);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } catch (IndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            commandBox.setFocus();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Autocomplete helper method. Sets a flag indicating that autocomplete search data needs to be updated."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private CommandResult executeInputChanged(String dummy) throws ParseException {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        logic.markInputChanged();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 224,
      "-": 181,
      "lumos309": 25
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/ModuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private FlowPane tuts;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        name.setText(module.getModCode().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 58
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/ModuleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 46
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/StudentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label matric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label nusnetId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        email.setText(\"Email: \" + student.getEmail().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (student.getMatricNum().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            matric.setText(\"Matric number: \" + student.getMatricNum().get().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            matric.setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (student.getNusnetId().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            nusnetId.setText(\"NUS ID: \" + student.getNusnetId().get().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            nusnetId.setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tags.getChildren().add(new Label(student.getModCode().toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tags.getChildren().add(new Label(student.getTutName().toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 80
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/StudentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 46
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/TutorialCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * An UI component that displays information of a {@code Tutorial}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class TutorialCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FXML \u003d \"TutorialListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public final Tutorial tutorial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label weeks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TutorialCard(Tutorial tutorial, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.tutorial \u003d tutorial;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        name.setText(tutorial.getTutName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        module.setText(tutorial.getModCode().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Get day format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String tutorialDay \u003d tutorial.getTimeTable().getDay().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tutorialDay \u003d tutorialDay.substring(0, 1).toUpperCase() + tutorialDay.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String dayTimeAndDuration \u003d \"Day: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + tutorialDay + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + tutorial.getTimeTable().getStartTime().toString() + \" - \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + tutorial.getTimeTable().getStartTime().plus(tutorial.getTimeTable().getDuration());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        day.setText(dayTimeAndDuration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String tutorialWeeks \u003d tutorial.getTimeTable().getWeeks().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .map(n -\u003e n.toString())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        weeks.setText(\"Weeks: \" + tutorialWeeks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutorialCard card \u003d (TutorialCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u0026\u0026 tutorial.equals(card.tutorial);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 78,
      "AhmadHatziq": 1
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/TutorialListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Panel containing the list of classes taught by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class TutorialListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FXML \u003d \"TutorialListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TutorialListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ListView\u003cTutorial\u003e tutorialListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TutorialListPanel(ObservableList\u003cTutorial\u003e tutorialList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tutorialListView.setItems(tutorialList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        tutorialListView.setCellFactory(listView -\u003e new TutorialListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Tutorial} using a {@code TutorialCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    class TutorialListViewCell extends ListCell\u003cTutorial\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        protected void updateItem(Tutorial tutorial, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            super.updateItem(tutorial, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (empty || tutorial \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                setGraphic(new TutorialCard(tutorial, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 45
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/TArenceicon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/tarence/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onKeyPressed\u003d\"#handleKeyPressed\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "lumos309": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-fill: #11d30b;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-tab-min-width:50px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-pref-height: 30;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-text-fill: WHITE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /*-fx-font-weight: bold;*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-text-fill: #7FFFD4;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-border-color: null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-base: #383838;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-control-inner-background: #383838;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-text-fill: #F5F5F5;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "#tuts {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "#tuts .label {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-color: #d63e5f;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".module_label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-color: #47996B;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 61,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " //Style of each column header\u0027s label  in the tableView"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".table-view .column-header-background .label{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-weight:bold;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-size:15px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-weight:bold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    -fx-font-size:15px;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 13,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"840\" onCloseRequest\u003d\"#handleExit\" title\u003d\"T.A.rence\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003cImage url\u003d\"@/images/TArenceicon.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cTabPane fx:id\u003d\"listTabPane\" minWidth\u003d\"310.0\" maxWidth\u003d\"310\" tabClosingPolicy\u003d\"UNAVAILABLE\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cTab fx:id\u003d\"tutorialsTab\" text\u003d\"Tutorials\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003cVBox fx:id\u003d\"tutorialList\" alignment\u003d\"CENTER\" minWidth\u003d\"310\" maxWidth\u003d\"310\" prefWidth\u003d\"310\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"tutorialListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cTab fx:id\u003d\"studentsTab\" closable\u003d\"false\" text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003cVBox fx:id\u003d\"studentList\" alignment\u003d\"CENTER\" minWidth\u003d\"310\" maxWidth\u003d\"310\" prefWidth\u003d\"310\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cTab fx:id\u003d\"modulesTab\" closable\u003d\"false\" text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003cVBox fx:id\u003d\"moduleList\" alignment\u003d\"CENTER\" minWidth\u003d\"310\" maxWidth\u003d\"310\" prefWidth\u003d\"310\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cTabPane fx:id\u003d\"displayTabPane\" minWidth\u003d\"500.0\" maxWidth\u003d\"500\" tabClosingPolicy\u003d\"UNAVAILABLE\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cTab fx:id\u003d\"attendanceTab\" closable\u003d\"false\" text\u003d\"Attendance\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003cVBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"attendancePlaceholder\" prefWidth\u003d\"500\" minWidth\u003d\"500\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cTab fx:id\u003d\"assignmentTab\" closable\u003d\"false\" text\u003d\"Assignment\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003c/tabs\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 59,
      "-": 49
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tuts\" id\u003d\"tuts\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 34
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cLabel fx:id\u003d\"matric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matric\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cLabel fx:id\u003d\"nusnetId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nusnetId\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 36
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8
    }
  },
  {
    "path": "src/main/resources/view/TutorialListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cLabel fx:id\u003d\"day\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$day\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cLabel fx:id\u003d\"weeks\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$weeks\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cLabel fx:id\u003d\"module\" styleClass\u003d\"module_label\" text\u003d\"\\$module\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 34
    }
  },
  {
    "path": "src/main/resources/view/TutorialListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "  \u003cListView fx:id\u003d\"tutorialListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8
    }
  },
  {
    "path": "src/test/java/seedu/tarence/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/TArenceicon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.storage.JsonAdaptedModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_STUDENT_STRING_MISSING_STUDENT_NAME \u003d \"[studentEmail\u003de0035152@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptionalA0155413M, studentNusnetId\u003dOptionalE0031550, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session}]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_STUDENT_STRING_WRONG_ORDER_OF_FIELDS \u003d \"[studentName\u003dAlice, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentEmail\u003de0035152@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptionalA0155413M, studentNusnetId\u003dOptionalE0031550, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentTutorialName\u003dLab Session, studentModuleCode\u003dCS1010S}]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_STRING_MISSING_TUTORIAL_NAME \u003d \"{tutorialDayOfWeek\u003dMONDAY, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentListString\u003d[], tutorialModuleCode\u003dCS1010S, tutorialStartTime\u003d12:00, tutorialDuration\u003dPT2H, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"tutorialWeeks\u003d[1, 4, 7]}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_STRING_WRONG_ORDER_OF_FIELDS \u003d \"{tutorialName\u003dSectional, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"tutorialDayOfWeek\u003dMONDAY, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentListString\u003d[], tutorialModuleCode\u003dCS1010S, tutorialStartTime\u003d12:00, tutorialDuration\u003dPT2H, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"tutorialWeeks\u003d[1, 4, 7]}\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void isValidStudentString_studentStringWithoutNameField_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(SampleDataUtil.getSampleModule());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(false, seedu.tarence.commons.util.JsonUtil"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .isValidStudentString(INVALID_STUDENT_STRING_MISSING_STUDENT_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void isValidStudentString_studentStringInWrongOrder_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(SampleDataUtil.getSampleModule());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(false, seedu.tarence.commons.util.JsonUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .isValidStudentString(INVALID_STUDENT_STRING_WRONG_ORDER_OF_FIELDS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void isValidTutorialString_tutorialStringInWrongOrder_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(SampleDataUtil.getSampleModule());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(false, seedu.tarence.commons.util.JsonUtil"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .isValidTutorialString(INVALID_TUTORIAL_STRING_WRONG_ORDER_OF_FIELDS));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void isValidTutorialString_tutorialStringWithoutNameField_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(SampleDataUtil.getSampleModule());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(false, seedu.tarence.commons.util.JsonUtil"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .isValidTutorialString(INVALID_TUTORIAL_STRING_MISSING_TUTORIAL_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "AhmadHatziq": 45,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/tarence/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.MODULE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NUSNET_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.TUTORIAL_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODULE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.JsonApplicationStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonApplicationStorage applicationStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new JsonApplicationStorage(temporaryFolder.resolve(\"application.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(applicationStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String deleteCommand \u003d \"deleteStudent 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Setup LogicManager with JsonApplicationIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonApplicationStorage applicationStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new JsonApplicationIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionApplication.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(applicationStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String addCommand \u003d AddStudentCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + MODULE_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            + TUTORIAL_DESC_AMY + MATRIC_DESC_AMY + NUSNET_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().withModCode(VALID_MODULE_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withTutName(VALID_TUTORIAL_NAME_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(VALID_MODULE_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        validModule.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(validModule);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void getFilteredTutorialList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTutorialList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertEquals(expectedMessage + \"\\n\", result.getFeedbackToUser());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static class JsonApplicationIoExceptionThrowingStub extends JsonApplicationStorage {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private JsonApplicationIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void saveApplication(ReadOnlyApplication application, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "Ellieyee": 39,
      "-": 124,
      "lumos309": 24
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/AddStudentCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddStudentCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MOD_CODE \u003d \"GER1000\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUT_NAME \u003d \"T01\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_newStudentFullFormat_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            .withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(validModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            .withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.addStudentToTutorial(validStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(validStudent), model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_newStudentIndexFormat_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.addModule(validModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.addStudentToTutorial(validStudent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student indexedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index validTutorialIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(indexedStudent, validTutorialIndex), model,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(validModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student student \u003d new StudentBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.addStudent(student);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e model.addStudent(student));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 42,
      "AhmadHatziq": 1,
      "-": 24,
      "lumos309": 36
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/AddStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MOD_CODE \u003d \"ES1601\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MOD_CODE \u003d \"ES1061\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUT_NAME \u003d \"T02\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_TUT_NAME \u003d \"T03\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Index VALID_TUT_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void indexConstructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(validStudent, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addModule(new ModuleBuilder().withModCode(VALID_MOD_CODE).build());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addTutorial(new TutorialBuilder().withModCode(VALID_MOD_CODE).withTutName(VALID_TUT_NAME).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addTutorialToModule("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new TutorialBuilder().withModCode(VALID_MOD_CODE).withTutName(VALID_TUT_NAME).build());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().withModCode(VALID_MOD_CODE).withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_similarModuleSuggested_promptSuggestionSelection() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModelStubStudentCommand modelStub \u003d new ModelStubStudentCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModuleBuilder.DEFAULT_TUTORIALS.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module similarModule \u003d new ModuleBuilder().withModCode(SIMILAR_MOD_CODE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(SIMILAR_MOD_CODE).withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        similarModule.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addModule(similarModule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCommands.add(new AddStudentCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new StudentBuilder().withModCode(SIMILAR_MOD_CODE).withTutName(VALID_TUT_NAME).build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(new StudentBuilder().withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUT_NAME).build()).execute(modelStub);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                VALID_MOD_CODE + \" \" + VALID_TUT_NAME) + \"1. \" + SIMILAR_MOD_CODE + \", \" + VALID_TUT_NAME + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(suggestedCommands, modelStub.getSuggestedCommands());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_studentAcceptedByIndexFormat_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final String validModCode \u003d \"ES1601\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final String validTutName \u003d \"T02\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addModule(new ModuleBuilder().withModCode(validModCode).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addTutorial(new TutorialBuilder().withModCode(validModCode).withTutName(validTutName).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addTutorialToModule("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new TutorialBuilder().withModCode(validModCode).withTutName(validTutName).build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().withModCode(validModCode).withTutName(validTutName).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent, VALID_TUT_INDEX).execute(modelStub);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_tutorialIndexOutOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final String validModCode \u003d \"ES1601\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final String validTutName \u003d \"T02\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addModule(new ModuleBuilder().withModCode(validModCode).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addTutorial(new TutorialBuilder().withModCode(validModCode).withTutName(validTutName).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelStub.addTutorialToModule("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new TutorialBuilder().withModCode(validModCode).withTutName(validTutName).build());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index outOfBoundsTutorialIndex \u003d Index.fromOneBased(100);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(bob, outOfBoundsTutorialIndex);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String tutorialIndexOutOfBoundsMessage \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String.format(AddStudentCommand.MESSAGE_TUTORIAL_IDX_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        outOfBoundsTutorialIndex.getOneBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                tutorialIndexOutOfBoundsMessage, () -\u003e addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddStudentCommand addAliceCommand \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddStudentCommand addBobCommand \u003d new AddStudentCommand(bob);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddStudentCommand addAliceCommandCopy \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setApplicationFilePath(Path applicationFilePath) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setApplication(ReadOnlyApplication application) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void updateFilteredStudentList(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteTutorialsFromModule(Module module) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // TODO: Implement test for addTutorial"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteStudentsFromTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public int getNumberOfTutorialsOfName(TutName tutName) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storePendingCommand(Command command) {};"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public Command getPendingCommand() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Command peekPendingCommand() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasPendingCommand() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e l, String s) {};"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return new ArrayList\u003cCommand\u003e();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public String getSuggestedCorrections() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteSuggestedCommands() {}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCompletions(PartialInput partialInput) {}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public PartialInput getSuggestedCompletions() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteSuggestedCompletions() {}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasSuggestedCompletions() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void setInputChangedToTrue() {}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void setInputChangedToFalse() {}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasInputChanged() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            for (int i \u003d 0; i \u003c tutorials.size(); i++) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (tutorials.get(i).getTutName().equals(student.getTutName())) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    tutorials.get(i).addStudent(student);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            modules.add(module);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (modules.get(i).getModCode().equals(tutorial.getModCode())) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    modules.get(i).addTutorial(tutorial);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            requireAllNonNull(modCode, tutName);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            boolean hasMod \u003d false;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    hasMod \u003d true;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (!hasMod) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            boolean hasTut \u003d false;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    hasTut \u003d true;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return hasTut;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return new Application();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return FXCollections.observableArrayList(tutorials);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static class ModelStubStudentCommand extends seedu.tarence.logic.commands.ModelStub {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        private List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            modules.add(module);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            students.add(student);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            requireAllNonNull(modCode, tutName);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Module module \u003d null;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module currModule : modules) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (currModule.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    module \u003d currModule;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            boolean hasTut \u003d false;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Tutorial tutorial : module.getTutorials()) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    hasTut \u003d true;"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return hasTut;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (module.getModCode().equals(tutorial.getModCode())) {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    module.addTutorial(tutorial);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ObservableList\u003cModule\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            list.addAll(modules);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ObservableList\u003cTutorial\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            list.addAll(tutorials);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            this.suggestedCommands \u003d suggestedCommands;"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return suggestedCommands;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 9,
      "Ellieyee": 290,
      "AhmadHatziq": 8,
      "-": 78,
      "lumos309": 257
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/AddTutorialCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddTutorialCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MOD_CODE \u003d \"ES1601\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MOD_CODE \u003d \"ES1061\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUT_NAME \u003d \"T02\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_tutorialAcceptedByModule_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module module \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddTutorialCommandTest.ModelStubTutorialCommand modelStub \u003d new ModelStubTutorialCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.modules.add(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(VALID_MOD_CODE).withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new AddTutorialCommand(validTutorial).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(AddTutorialCommand.MESSAGE_SUCCESS, validTutorial,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                validTutorial.getTimeTable().getDay(), validTutorial.getTimeTable().getWeeks(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validTutorial.getTimeTable().getStartTime(), validTutorial.getTimeTable().getDuration().toMinutes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(Arrays.asList(validTutorial), modelStub.tutorials);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_similarModuleSuggested_promptSuggestionSelection() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module module \u003d new ModuleBuilder().withModCode(SIMILAR_MOD_CODE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddTutorialCommandTest.ModelStubTutorialCommand modelStub \u003d new ModelStubTutorialCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.modules.add(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial similarTutorial \u003d new TutorialBuilder().withModCode(SIMILAR_MOD_CODE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCommands.add(new AddTutorialCommand(similarTutorial));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new AddTutorialCommand(validTutorial).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SUGGESTED_CORRECTIONS, \"Module\", VALID_MOD_CODE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + \"1. \" + SIMILAR_MOD_CODE + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(suggestedCommands, modelStub.getSuggestedCommands());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_noSuchModule_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorial \u003d new TutorialBuilder().withModCode(VALID_MOD_CODE).withTutName(VALID_TUT_NAME).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddTutorialCommandTest.ModelStubTutorialCommand modelStub \u003d new ModelStubTutorialCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddTutorialCommand addTutorialCommand \u003d new AddTutorialCommand(tutorial);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                AddTutorialCommand.MESSAGE_INVALID_MODULE, () -\u003e addTutorialCommand.execute(modelStub));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static class ModelStubTutorialCommand extends ModelStub {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        private List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ObservableList\u003cModule\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            list.addAll(modules);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            this.suggestedCommands \u003d suggestedCommands;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return suggestedCommands;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "lumos309": 107
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/ChangeTabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.getTypicalApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ChangeTabCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ChangeTabCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_commandConstructor_showsSuccess() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validTabName \u003d \"m\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String messageSuccess \u003d String.format(ChangeTabCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                TabNames.MODULES.toString().toLowerCase());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandSuccess(new ChangeTabCommand(validTabName), model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ChangeTabCommand changeTabCommand \u003d new ChangeTabCommand(TabNames.MODULES.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(changeTabCommand.equals(changeTabCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(changeTabCommand.equals(new ChangeTabCommand(TabNames.MODULES.toString())));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(changeTabCommand.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(changeTabCommand.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different tab -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(changeTabCommand.equals(new ChangeTabCommand(TabNames.STUDENTS.toString())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_invalidTabName_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidTab1 \u003d \"@\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidTab2 \u003d \"mod tuts\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidTab3 \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ChangeTabCommand changeTabCommand \u003d new ChangeTabCommand(invalidTab1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandFailure(changeTabCommand, model, Messages.MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        changeTabCommand \u003d new ChangeTabCommand(invalidTab2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandFailure(changeTabCommand, model, Messages.MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        changeTabCommand \u003d new ChangeTabCommand(invalidTab3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandFailure(changeTabCommand, model, ChangeTabCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 65
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // no valid tab given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(commandResult.isChangeTabs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // no valid tutorial given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(commandResult.isShowAttendance());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different hasAttendanceDisplay value -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial tutorial \u003d new TutorialBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", tutorial)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Same tutorial, everything else same, returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        commandResult \u003d new CommandResult(\"feedback\", tutorial);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", tutorial)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Show attendance feature is set"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(commandResult.isShowAttendance());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Same tutorial is received"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(tutorial.equals(commandResult.getTutorialAttendance()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Set tab to display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        commandResult \u003d new CommandResult(\"feedback\", TabNames.MODULES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(TabNames.MODULES.equals(commandResult.getTabToDisplay()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(TabNames.STUDENTS.equals(commandResult.getTabToDisplay()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 29,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_DURATION_IN_MINUTES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_START_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_WEEKS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_MATRIC_AMY \u003d \"A0123456A\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MATRIC_BOB \u003d \"a3456789a\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODULE_AMY \u003d \"CS1010\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODULE_BOB \u003d \"CS2030\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_NUSNET_AMY \u003d \"E0123456\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_NUSNET_BOB \u003d \"E0035152\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_TUTORIAL_NAME_AMY \u003d \"T01\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_TUTORIAL_NAME_BOB \u003d \"T10\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_TUTORIAL_DAY_AMY \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_TUTORIAL_DAY_BOB \u003d \"TUESDAY\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Integer VALID_TUTORIAL_INDEX_AMY \u003d 3;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Integer VALID_TUTORIAL_INDEX_BOB \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MATRIC_DESC_AMY \u003d \" \" + VALID_MATRIC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MODULE_DESC_AMY \u003d \" \" + PREFIX_MODULE + VALID_MODULE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String MODULE_DESC_BOB \u003d \" \" + PREFIX_MODULE + VALID_MODULE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String NUSNET_DESC_AMY \u003d \" \" + VALID_NUSNET_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String TUTORIAL_DESC_AMY \u003d \" \" + PREFIX_TUTORIAL_NAME + VALID_TUTORIAL_NAME_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String TUTORIAL_DESC_BOB \u003d \" \" + PREFIX_TUTORIAL_NAME + VALID_TUTORIAL_NAME_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String TUTORIAL_IDX_DESC_AMY \u003d \" \" + PREFIX_INDEX + VALID_TUTORIAL_INDEX_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String TUTORIAL_IDX_DESC_BOB \u003d \" \" + PREFIX_INDEX + VALID_TUTORIAL_INDEX_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODCODE \u003d \"EC2303\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_NAME \u003d \"Tutorial 5\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_DAY \u003d \"TUESDAY\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_START_HHMMSS \u003d \"11:00:00\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_START_HHMM \u003d \"1100\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final int VALID_TUTORIAL_DUR \u003d 60;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_WEEKS \u003d \"1,5,6,8,10\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final ArrayList\u003cInteger\u003e VALID_WEEKS_LIST \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 5, 6, 8, 10));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_WEEKS_ODD \u003d \"odd\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final ArrayList\u003cInteger\u003e VALID_WEEKS_ODD_LIST \u003d new ArrayList\u003c\u003e(Arrays.asList(3, 5, 7, 9, 11, 13));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_WEEKS_RANGE \u003d \"5-10\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final ArrayList\u003cInteger\u003e VALID_WEEKS_RANGE_LIST \u003d new ArrayList\u003c\u003e(Arrays.asList(5, 6, 7, 8, 9, 10));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final int VALID_WEEK \u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String INVALID_MODCODE \u003d \"ABCD1100S\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String INVALID_WEEKS_RANGE \u003d \"1-14\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_TUTORIAL_IDX \u003d \"1\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_FILENAME \u003d \"fileName\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODCODE_DESC \u003d \" \" + PREFIX_MODULE + VALID_MODCODE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_NAME_DESC \u003d \" \" + PREFIX_TUTORIAL_NAME + VALID_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_DAY_DESC \u003d \" \" + PREFIX_TUTORIAL_DAY + VALID_TUTORIAL_DAY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_START_DESC \u003d \" \" + PREFIX_TUTORIAL_START_TIME + VALID_TUTORIAL_START_HHMM;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTORIAL_DUR_DESC \u003d \" \" + PREFIX_TUTORIAL_DURATION_IN_MINUTES + VALID_TUTORIAL_DUR;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_WEEKS_DESC \u003d \" \" + PREFIX_TUTORIAL_WEEKS + VALID_WEEKS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_WEEKS_ODD_DESC \u003d \" \" + PREFIX_TUTORIAL_WEEKS + VALID_WEEKS_ODD;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_WEEKS_RANGE_DESC \u003d \" \" + PREFIX_TUTORIAL_WEEKS + VALID_WEEKS_RANGE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_WEEK_DESC \u003d \" \" + PREFIX_TUTORIAL_WEEKS + VALID_WEEK;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_TUTORIAL_IDX_DESC \u003d \" \" + PREFIX_INDEX + VALID_TUTORIAL_IDX;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_FILENAME_DESC \u003d \" \" + PREFIX_FILE + VALID_FILENAME;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String INVALID_WEEKS_RANGE_DESC \u003d \" \" + PREFIX_TUTORIAL_WEEKS + INVALID_WEEKS_RANGE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String INVALID_MODCODE_DESC \u003d \" \" + PREFIX_MODULE + INVALID_MODCODE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String INVALID_TUTORIAL_INDEX_DESC_1 \u003d \" \" + PREFIX_INDEX + \"sa\u0026\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String INVALID_TUTORIAL_INDEX_DESC_2 \u003d \" \" + PREFIX_INDEX + \"☹\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String INVALID_TUTORIAL_INDEX_DESC_3 \u003d \" \" + PREFIX_INDEX + \"0\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_STUDENT_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_STUDENT_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DESC_STUDENT_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withModCode(new ModCode(VALID_MODCODE))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withTutName(new TutName(VALID_TUTORIAL_NAME))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withMatricNum(Optional.of(new MatricNum(VALID_MATRIC_AMY)))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withNusnetId(Optional.of(new NusnetId(VALID_NUSNET_AMY))).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DESC_STUDENT_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withModCode(new ModCode(VALID_MODCODE))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withTutName(new TutName(VALID_TUTORIAL_NAME))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withMatricNum(Optional.of(new MatricNum(VALID_MATRIC_BOB)))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withNusnetId(Optional.of(new NusnetId(VALID_NUSNET_BOB))).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            assertEquals(expectedCommandResult.toString(), result.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * - the application, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application expectedApplication \u003d new Application(actualModel.getApplication());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedApplication, actualModel.getApplication());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Executes a given {@code command} where the expected result is deferring its execution pending user confirmation."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Checks that the command is correctly stored by the model for later execution and that the appropriate"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * confirmation dialogue is sent to the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static void assertCommandDelayed(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            CommandResult actualCommandResult \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            assertEquals(actualCommandResult, expectedCommandResult);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            assertEquals(actualModel, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates {@code model}\u0027s application to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code model}\u0027s application."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates {@code model}\u0027s application to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * {@code model}\u0027s application."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 19,
      "Ellieyee": 62,
      "AhmadHatziq": 3,
      "-": 84,
      "lumos309": 57
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODCODE \u003d \"GET1029\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODCODE_ALT \u003d \"CS2040\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MODCODE \u003d \"GET1028\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTNAME \u003d \"WhyIsThisClassAt8am\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_validModuleIndex_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModuleBuilder.DEFAULT_TUTORIALS.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module moduleToDelete \u003d new ModuleBuilder().withModCode(VALID_MODCODE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(moduleToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandSuccess(deleteModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_invalidModuleIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTutorialList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_similarModuleSuggested_promptSuggestionSelection() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModuleBuilder.DEFAULT_TUTORIALS.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module similarModule \u003d new ModuleBuilder().withModCode(SIMILAR_MODCODE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(similarModule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SUGGESTED_CORRECTIONS, \"Module\", VALID_MODCODE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + \"1. \" + SIMILAR_MODCODE + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new DeleteModuleCommand(new ModCode(VALID_MODCODE)).execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /* TODO: implement later?"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_moduleWithTutorials_delayed() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModuleBuilder.DEFAULT_TUTORIALS.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module moduleToDelete \u003d new ModuleBuilder().withModCode(VALID_MODCODE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorial \u003d new TutorialBuilder().withModCode(VALID_MODCODE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        moduleToDelete.addTutorial(tutorial);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(moduleToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_CONFIRM_DELETE_NONEMPTY_MODULE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                moduleToDelete,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                moduleToDelete.getTutorials().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.storePendingCommand(deleteModuleCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandDelayed(deleteModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_moduleNameDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Module module : model.getFilteredModuleList()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (module.getModCode().toString().equals(VALID_MODCODE)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.deleteModule(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(new ModCode(VALID_MODCODE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, Messages.MESSAGE_INVALID_MODULE_IN_APPLICATION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteFirstCommand \u003d new DeleteModuleCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteSecondCommand \u003d new DeleteModuleCommand(INDEX_SECOND_IN_LIST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteModuleCommand deleteFirstCommandCopy \u003d new DeleteModuleCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "lumos309": 132
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/DeleteStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteStudentCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalStudents.getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_IN_LIST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model \u003d new ModelManager(TypicalStudents.getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_IN_LIST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of class list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getApplication().getStudentList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteFirstCommand \u003d new DeleteStudentCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteSecondCommand \u003d new DeleteStudentCommand(INDEX_SECOND_IN_LIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand deleteFirstCommandCopy \u003d new DeleteStudentCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no students."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 36,
      "-": 66,
      "lumos309": 15
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/DeleteTutorialCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteTutorialCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODCODE \u003d \"GET1029\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MODCODE_ALT \u003d \"CS2040\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MODCODE \u003d \"GET1028\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUTNAME \u003d \"WhyIsThisClassAt8am\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_validTutorialIndex_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TutorialBuilder.DEFAULT_STUDENTS.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorialToDelete \u003d new TutorialBuilder().withModCode(VALID_MODCODE).withTutName(VALID_TUTNAME).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteTutorialCommand \u003d new DeleteTutorialCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTutorialCommand.MESSAGE_DELETE_TUTORIAL_SUCCESS, tutorialToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.deleteTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandSuccess(deleteTutorialCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_invalidTutorialIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTutorialList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteTutorialCommand \u003d new DeleteTutorialCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteTutorialCommand, model, Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_similarTutorialModuleSuggested_promptSuggestionSelection() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModuleBuilder.DEFAULT_TUTORIALS.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module similarModule \u003d new ModuleBuilder().withModCode(SIMILAR_MODCODE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial validTutorial \u003d new TutorialBuilder().withModCode(SIMILAR_MODCODE).withTutName(VALID_TUTNAME).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        similarModule.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(similarModule);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\", VALID_MODCODE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + \" \" + VALID_TUTNAME) + \"1. \" + SIMILAR_MODCODE + \", \" + VALID_TUTNAME + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new DeleteTutorialCommand(new ModCode(VALID_MODCODE),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new TutName(VALID_TUTNAME)).execute(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /* TODO: implement later?"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_moduleWithTutorials_delayed() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModuleBuilder.DEFAULT_TUTORIALS.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TutorialBuilder.DEFAULT_STUDENTS.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module module \u003d new ModuleBuilder().withModCode(VALID_MODCODE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorialToDelete \u003d new TutorialBuilder().withModCode(VALID_MODCODE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student student \u003d new StudentBuilder().withModCode(VALID_MODCODE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(tutorialToDelete.getTutName().tutName).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        module.addTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        tutorialToDelete.addStudent(student);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(tutorialToDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteTutorialCommand \u003d new DeleteTutorialCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTutorialCommand.MESSAGE_CONFIRM_DELETE_NONEMPTY_TUTORIAL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                tutorialToDelete,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                tutorialToDelete.getStudents().size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedModel.storePendingCommand(deleteTutorialCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandDelayed(deleteTutorialCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_multipleTutorialsOfSameName_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorialOne \u003d new TutorialBuilder().withModCode(VALID_MODCODE).withTutName(VALID_TUTNAME).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial tutorialTwo \u003d new TutorialBuilder().withModCode(VALID_MODCODE_ALT).withTutName(VALID_TUTNAME).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(tutorialOne);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(tutorialTwo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteTutorialCommand \u003d new DeleteTutorialCommand(new TutName(VALID_TUTNAME));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteTutorialCommand, model, Messages.MESSAGE_INVALID_TUTORIAL_MULTIPLE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_tutorialNameDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (Tutorial tutorial : model.getFilteredTutorialList()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            if (tutorial.getTutName().toString().equals(VALID_TUTNAME)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                model.deleteTutorial(tutorial);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteTutorialCommand \u003d new DeleteTutorialCommand(new TutName(VALID_TUTNAME));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertCommandFailure(deleteTutorialCommand, model, Messages.MESSAGE_INVALID_TUTORIAL_IN_APPLICATION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteFirstCommand \u003d new DeleteTutorialCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteSecondCommand \u003d new DeleteTutorialCommand(INDEX_SECOND_IN_LIST);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteTutorialCommand deleteFirstCommandCopy \u003d new DeleteTutorialCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "lumos309": 154
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/DisplayAttendanceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.getTypicalApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for DisplayAttendanceCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DisplayAttendanceCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_MODCODE \u003d \"GET1029\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_TUTNAME \u003d \"WhyIsThisClassAt8am\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MODCODE \u003d \"GET1028\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_TUTNAME \u003d \"WhyIsThisClassAt8pm\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_MODCODE_2 \u003d \"GET1000\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final String VALID_TUTNAME_2 \u003d \"WhyIsThisClassAt9pm\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_constructor_showsSameSuccessOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutorialBuilder.DEFAULT_STUDENTS.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial tutorialToDisplay \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new TutorialBuilder().withModCode(VALID_MODCODE_2).withTutName(VALID_TUTNAME_2).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        model.addTutorial(tutorialToDisplay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand displayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(tutorialToDisplay.getModCode(), tutorialToDisplay.getTutName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandSuccess(displayAttendanceCommand, model, DisplayAttendanceCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand displayAttendanceCommandIndex \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                displayAttendanceCommandIndex, model, DisplayAttendanceCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    // Todo: Fix test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //    public void execute_similarTutorialName_showSuggestedCommands() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        TutorialBuilder.DEFAULT_STUDENTS.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        Tutorial similarTutorial \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                new TutorialBuilder().withModCode(VALID_MODCODE).withTutName(SIMILAR_TUTNAME).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        Module validModule \u003d new ModuleBuilder().withModCode(VALID_MODCODE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        model.addModule(validModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        model.addTutorial(similarTutorial);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        validModule.addTutorial(similarTutorial);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        DisplayAttendanceCommand displayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                new DisplayAttendanceCommand(new ModCode(VALID_MODCODE), new TutName(VALID_TUTNAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        CommandResult commandResult \u003d displayAttendanceCommand.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        String expectedMessage \u003d String.format(Messages.MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                VALID_MODCODE + \" \" + VALID_TUTNAME)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                + \"1. \" + VALID_MODCODE + \", \" + SIMILAR_TUTNAME + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode modCode \u003d new ModCode(VALID_MODCODE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName tutName \u003d new TutName(VALID_TUTNAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand displayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(modCode, tutName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(displayAttendanceCommand.equals(displayAttendanceCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(displayAttendanceCommand.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(displayAttendanceCommand.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode sameModCode \u003d new ModCode(VALID_MODCODE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName sameTutName \u003d new TutName(VALID_TUTNAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand sameDisplayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(sameModCode, sameTutName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(displayAttendanceCommand.equals(sameDisplayAttendanceCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode diffModCode \u003d new ModCode(VALID_MODCODE_2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName diffTutName \u003d new TutName(VALID_TUTNAME_2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand diffDisplayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(diffModCode, diffTutName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(displayAttendanceCommand.equals(diffDisplayAttendanceCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_differentCommandWord_showSuccess() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validCommand \u003d \"diSplAyAtTenDaNce\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validCommand2 \u003d \"DISPLAYATTENDANCE\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String validCommand3 \u003d \"DisplayAtt\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModCode modCode \u003d new ModCode(VALID_MODCODE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TutName tutName \u003d new TutName(VALID_TUTNAME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand displayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(modCode, tutName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Correct word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(displayAttendanceCommand.isMatchingCommandWord(validCommand));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(displayAttendanceCommand.isMatchingCommandWord(validCommand2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertTrue(displayAttendanceCommand.isMatchingCommandWord(validCommand3));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Incorrect word"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String invalidCommand \u003d \"DISPLAY\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertFalse(displayAttendanceCommand.isMatchingCommandWord(invalidCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 98,
      "lumos309": 30
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.DESC_STUDENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.DESC_STUDENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.getTypicalApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_IN_LIST, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Application(model.getApplication()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withNusnetId(lastStudent.getNusnetId())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withMatricNum(lastStudent.getMatricNum())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Application(model.getApplication()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(lastStudent).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Application(model.getApplication()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_IN_LIST.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_IN_LIST,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        .withNusnetId(studentInFilteredList.getNusnetId())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        .withMatricNum(studentInFilteredList.getMatricNum())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Application(model.getApplication()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_IN_LIST.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_IN_LIST, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // edit student in filtered list into a duplicate in application"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student studentInList \u003d model.getApplication().getStudentList().get(INDEX_SECOND_IN_LIST.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_IN_LIST,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * but smaller than size of the overall class list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of class list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getApplication().getStudentList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_IN_LIST, DESC_STUDENT_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_STUDENT_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_IN_LIST, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(standardCommand.equals(new HelpCommand()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_IN_LIST, DESC_STUDENT_AMY)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_IN_LIST, DESC_STUDENT_BOB)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 72,
      "-": 99,
      "lumos309": 10
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 7,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/ExportAttendanceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ExportAttendanceCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_MOD_CODE \u003d \"ES1601\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_TUT_NAME \u003d \"T02\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Integer VALID_TUT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // TODO: Test fails in TravisCI but not locally"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // public void execute_personAcceptedByModel_exportAttendanceSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     final Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     final Tutorial validTutorial \u003d new TutorialBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .withStudents(new ArrayList\u003c\u003e(Arrays.asList(validStudent)))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     modelStub.addModule(validModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     modelStub.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     modelStub.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     CommandResult commandResult \u003d new ExportAttendanceCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             validModCode, validTutName, null, null).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     assertEquals(String.format(ExportAttendanceCommand.MESSAGE_EXPORT_ATTENDANCE_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             validTutName),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //             commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    //     // TODO: Assert presence of exported file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void execute_invalidModule_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ExportAttendanceCommand exportAttendanceCommand \u003d new ExportAttendanceCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE, () -\u003e exportAttendanceCommand.execute(modelStub));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void execute_invalidTutorial_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addModule(validModule);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ExportAttendanceCommand exportAttendanceCommand \u003d new ExportAttendanceCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE, () -\u003e exportAttendanceCommand.execute(modelStub));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final String fileName \u003d \"fileName\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ExportAttendanceCommand validExportAttendanceCommand \u003d new ExportAttendanceCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, fileName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(validExportAttendanceCommand.equals(validExportAttendanceCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ExportAttendanceCommand validExportAttendanceCommandCopy \u003d new ExportAttendanceCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            validModCode, validTutName, null, fileName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(validExportAttendanceCommand.equals(validExportAttendanceCommandCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(validExportAttendanceCommand.equals(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(validExportAttendanceCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different modcode -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(validExportAttendanceCommand.equals("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new ExportAttendanceCommand(null, validTutName, null, fileName)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different tut name -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(validExportAttendanceCommand.equals("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new ExportAttendanceCommand(validModCode, null, null, fileName)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(validExportAttendanceCommand.equals("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new ExportAttendanceCommand(validModCode, validTutName, validIndex, fileName)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different file name -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(validExportAttendanceCommand.equals("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new ExportAttendanceCommand(validModCode, validTutName, null, null)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setApplicationFilePath(Path applicationFilePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setApplication(ReadOnlyApplication application) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredStudentList(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteTutorialsFromModule(Module module) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // TODO: Implement test for addTutorial"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteStudentsFromTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public int getNumberOfTutorialsOfName(TutName tutName) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void storePendingCommand(Command command) {};"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Command getPendingCommand() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Command peekPendingCommand() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public String getSuggestedCorrections() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteSuggestedCommands() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasPendingCommand() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCompletions(PartialInput partialInput) {}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public PartialInput getSuggestedCompletions() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteSuggestedCompletions() {}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasSuggestedCompletions() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void setInputChangedToTrue() {}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void setInputChangedToFalse() {}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasInputChanged() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * A Model stub that always accepts the student being added."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (int i \u003d 0; i \u003c tutorials.size(); i++) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (tutorials.get(i).getTutName().equals(student.getTutName())) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    tutorials.get(i).addStudent(student);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            modules.add(module);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (modules.get(i).getModCode().equals(tutorial.getModCode())) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    modules.get(i).addTutorial(tutorial);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireAllNonNull(modCode, tutName);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            boolean hasMod \u003d false;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    hasMod \u003d true;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (!hasMod) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            boolean hasTut \u003d false;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    hasTut \u003d true;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return hasTut;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new Application();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return FXCollections.observableArrayList(tutorials);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 470,
      "lumos309": 34
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.getTypicalApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 18,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.StudentsInTutorialPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final boolean SHOW_ALL_STUDENTS \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandSuccess(new ListCommand(SHOW_ALL_STUDENTS), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new StudentsInTutorialPredicate(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new StudentsInTutorialPredicate(INDEX_SECOND_IN_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ListCommand listFirstCommand \u003d new ListCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ListCommand listSecondCommand \u003d new ListCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ListCommand listFirstCommandCopy \u003d new ListCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(listFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(listFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(listFirstCommand.equals(listSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTutorialList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate outOfBoundsPredicate \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new StudentsInTutorialPredicate(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(outOfBoundsPredicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertCommandFailure(listCommand, model, Messages.MESSAGE_INVALID_TUTORIAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 51,
      "-": 19,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/MarkAttendanceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_SUGGESTED_CORRECTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MarkAttendanceCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_MOD_CODE \u003d \"ES1601\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MOD_CODE \u003d \"ES1061\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_TUT_NAME \u003d \"T02\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Integer VALID_TUT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_STUD_NAME \u003d \"Lady Gaga\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_STUD_NAME \u003d \"Lady Gagaa\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void execute_personAcceptedByModel_markAttendanceSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Tutorial validTutorial \u003d new TutorialBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withStudents(new ArrayList\u003c\u003e(Arrays.asList(validStudent)))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addModule(validModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Name validStudName \u003d validStudent.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        CommandResult commandResult \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, validWeek, validStudName).execute(modelStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertEquals(String.format(MarkAttendanceCommand.MESSAGE_MARK_ATTENDANCE_SUCCESS, validStudName, \"present\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(validTutorial.getAttendance().isPresent(validWeek, validStudent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    // Todo: Fix test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //     @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //     public void execute_similarModule_suggestSimilarCommands() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final Module similarModule \u003d new ModuleBuilder().withModCode(SIMILAR_MOD_CODE).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .withModCode(SIMILAR_MOD_CODE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final Tutorial validTutorial \u003d new TutorialBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .withModCode(SIMILAR_MOD_CODE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .withStudents(new ArrayList\u003c\u003e(Arrays.asList(validStudent)))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         modelStub.addModule(similarModule);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         modelStub.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         modelStub.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         final Name validStudName \u003d validStudent.getName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         CommandResult commandResult \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 validModCode, validTutName, null, validWeek, validStudName).execute(modelStub);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         MarkAttendanceCommand expectedSuggestedCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 new ModCode(SIMILAR_MOD_CODE), validTutName, null, validWeek, validStudName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         assertEquals(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Tutorial\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 VALID_MOD_CODE + \" \" + VALID_TUT_NAME)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 + \"1. \" + SIMILAR_MOD_CODE + \", \" + VALID_TUT_NAME + \"\\n\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //                 commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //         assertEquals(modelStub.getSuggestedCommands().get(0), expectedSuggestedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void execute_invalidModule_throwsCommandException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Name validStudName \u003d validStudent.getName();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        MarkAttendanceCommand markAttendanceCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, validWeek, validStudName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE, () -\u003e markAttendanceCommand.execute(modelStub));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void execute_invalidTutorial_throwsCommandException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addModule(validModule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Name validStudName \u003d validStudent.getName();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        MarkAttendanceCommand markAttendanceCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, validWeek, validStudName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Messages.MESSAGE_INVALID_TUTORIAL_IN_MODULE, () -\u003e markAttendanceCommand.execute(modelStub));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_similarStudent_suggestSimilarCommands() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Student similarStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withName(SIMILAR_STUD_NAME)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withName(VALID_STUD_NAME)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Tutorial validTutorial \u003d new TutorialBuilder()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addModule(validModule);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addStudent(similarStudent);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.addStudentToTutorial(similarStudent);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Name validStudName \u003d validStudent.getName();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        MarkAttendanceCommand markAttendanceCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                validModCode, validTutName, null, validWeek, validStudName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d markAttendanceCommand.execute(modelStub);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(String.format(MESSAGE_SUGGESTED_CORRECTIONS, \"Student\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                VALID_STUD_NAME) + \"1. \" + SIMILAR_STUD_NAME + \"\\n\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void execute_invalidStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Module validModule \u003d new ModuleBuilder().withModCode(VALID_MOD_CODE).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Student validStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Tutorial validTutorial \u003d new TutorialBuilder()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withModCode(VALID_MOD_CODE)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .withTutName(VALID_TUT_NAME)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addModule(validModule);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addTutorial(validTutorial);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        modelStub.addTutorialToModule(validTutorial);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Name validStudName \u003d validStudent.getName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        MarkAttendanceCommand markAttendanceCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, validWeek, validStudName);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            Messages.MESSAGE_INVALID_STUDENT_IN_TUTORIAL, () -\u003e markAttendanceCommand.execute(modelStub));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ModCode validModCode \u003d new ModCode(VALID_MOD_CODE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final TutName validTutName \u003d new TutName(VALID_TUT_NAME);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final Week validWeek \u003d new Week(3);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        MarkAttendanceCommand markAliceCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                validModCode, validTutName, null, validWeek, alice.getName());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        MarkAttendanceCommand markBobCommand \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            validModCode, validTutName, null, validWeek, bob.getName());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(markAliceCommand.equals(markAliceCommand));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        MarkAttendanceCommand markAliceCommandCopy \u003d new MarkAttendanceCommand("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            validModCode, validTutName, null, validWeek, alice.getName());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(markAliceCommandCopy.equals(markAliceCommand));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(markAliceCommand.equals(1));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(markAliceCommand.equals(null));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(markAliceCommand.equals(markBobCommand));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setApplicationFilePath(Path applicationFilePath) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setApplication(ReadOnlyApplication application) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void updateFilteredStudentList(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteTutorialsFromModule(Module module) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            // TODO: Implement test for addTutorial"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void deleteStudentsFromTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public int getNumberOfTutorialsOfName(TutName tutName) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void storePendingCommand(Command command) {};"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Command getPendingCommand() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public Command peekPendingCommand() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public String getSuggestedCorrections() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteSuggestedCommands() {}"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasPendingCommand() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCompletions(PartialInput partialInput) {}"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public PartialInput getSuggestedCompletions() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void deleteSuggestedCompletions() {}"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasSuggestedCompletions() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void setInputChangedToTrue() {}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void setInputChangedToFalse() {}"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasInputChanged() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     * A Model stub that always accepts the student being added."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        private List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (int i \u003d 0; i \u003c tutorials.size(); i++) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (tutorials.get(i).getTutName().equals(student.getTutName())) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    tutorials.get(i).addStudent(student);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            modules.add(module);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireNonNull(tutorial);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (modules.get(i).getModCode().equals(tutorial.getModCode())) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    modules.get(i).addTutorial(tutorial);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            requireAllNonNull(modCode, tutName);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            boolean hasMod \u003d false;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    hasMod \u003d true;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            if (!hasMod) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            boolean hasTut \u003d false;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            for (Tutorial tutorial : tutorials) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                if (tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    hasTut \u003d true;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return hasTut;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (!module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                for (Tutorial tutorial : module.getTutorials()) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    if (!tutorial.getTutName().equals(tutName)) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    for (Student student : tutorial.getStudents()) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        if (student.getName().equals(studName)) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return new Application();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            this.suggestedCommands \u003d suggestedCommands;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return suggestedCommands;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return FXCollections.observableArrayList(studentsAdded);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            return FXCollections.observableArrayList(tutorials);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return FXCollections.observableArrayList(modules);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 463,
      "Ellieyee": 17,
      "lumos309": 176
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.PartialInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * A default model stub that has all of the methods failing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "class ModelStub implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Path getApplicationFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setApplicationFilePath(Path applicationFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setApplication(ReadOnlyApplication application) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public ReadOnlyApplication getApplication() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ObservableList\u003cTutorial\u003e getFilteredTutorialList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredStudentList(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void updateFilteredTutorialList(Predicate\u003cTutorial\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasStudentInTutorialAndModule(Name studName, TutName tutName, ModCode modCode) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Implement test for hasModule"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Implement test for addModule"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteModule(Module module) {}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteTutorialsFromModule(Module module) {}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Implement test for hasTutorial"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Implement test for addTutorial"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: Implement test for deleteTutorial"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteStudentsFromTutorial(Tutorial tutorial) {}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: implement"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addTutorialToModule(Tutorial tutorial) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: implement"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void addStudentToTutorial(Student student) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: implement"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasTutorialInModule(ModCode modCode, TutName tutName) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: implement"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public int getNumberOfTutorialsOfName(TutName tutName) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storePendingCommand(Command command) {};"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public Command getPendingCommand() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public Command peekPendingCommand() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public boolean hasPendingCommand() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storeSuggestedCommands(List\u003cCommand\u003e l, String s) {};"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return new ArrayList\u003cCommand\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public String getSuggestedCorrections() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteSuggestedCommands() {};"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void storeSuggestedCompletions(PartialInput partialInput) {}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public PartialInput getSuggestedCompletions() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void deleteSuggestedCompletions() {}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasSuggestedCompletions() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setInputChangedToTrue() {}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setInputChangedToFalse() {}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public boolean hasInputChanged() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 17,
      "Ellieyee": 56,
      "AhmadHatziq": 1,
      "lumos309": 207
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/commands/SelectSuggestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": " * {@code SelectSuggestionCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class SelectSuggestionCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_MOD_CODE \u003d \"ES1601\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String SIMILAR_MOD_CODE \u003d \"ES1061\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final String VALID_TUT_NAME \u003d \"T02\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void execute_validIndexInput_success() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        SelectSuggestionCommandTest.ModelStubTutorialCommand modelStub \u003d new SelectSuggestionCommandTest"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .ModelStubTutorialCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Module module \u003d new ModuleBuilder().withModCode(SIMILAR_MOD_CODE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.modules.add(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial similarTutorial \u003d new TutorialBuilder().withModCode(SIMILAR_MOD_CODE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        suggestedCommands.add(new AddTutorialCommand(similarTutorial));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        modelStub.storeSuggestedCommands(suggestedCommands, \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        CommandResult commandResult \u003d new SelectSuggestionCommand(Index.fromOneBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(AddTutorialCommand.MESSAGE_SUCCESS, similarTutorial,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarTutorial.getTimeTable().getDay(), similarTutorial.getTimeTable().getWeeks(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarTutorial.getTimeTable().getStartTime(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                similarTutorial.getTimeTable().getDuration().toMinutes());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cTutorial\u003e expectedTutorialList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        expectedTutorialList.add(similarTutorial);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedTutorialList, modelStub.tutorials);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private class ModelStubTutorialCommand extends ModelStub {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final ArrayList\u003cTutorial\u003e tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        private List\u003cCommand\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void addTutorial(Tutorial tutorial) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            tutorials.add(tutorial);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public boolean hasModuleOfCode(ModCode modCode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                if (module.getModCode().equals(modCode)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ObservableList\u003cModule\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            list.addAll(modules);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public void storeSuggestedCommands(List\u003cCommand\u003e suggestedCommands, String suggestedCorrections) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            this.suggestedCommands \u003d suggestedCommands;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        public List\u003cCommand\u003e getSuggestedCommands() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            return suggestedCommands;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 99
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.MODULE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.MODULE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NUSNET_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.TUTORIAL_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.TUTORIAL_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.TUTORIAL_IDX_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.TUTORIAL_IDX_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODULE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_INDEX_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_INDEX_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_allFullFormatFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + MATRIC_DESC_AMY + NUSNET_DESC_AMY + MODULE_DESC_AMY + TUTORIAL_DESC_AMY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NAME_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + MATRIC_DESC_AMY + NUSNET_DESC_AMY + MODULE_DESC_AMY + TUTORIAL_DESC_AMY,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + MATRIC_DESC_AMY + NUSNET_DESC_AMY + MODULE_DESC_AMY + TUTORIAL_DESC_AMY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_allIndexFormatFieldsPresent_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(AddStudentCommandParser.TEMP_TUT_NAME.toString())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(AddStudentCommandParser.TEMP_MOD_CODE.toString()).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        + MATRIC_DESC_AMY + NUSNET_DESC_AMY + TUTORIAL_IDX_DESC_AMY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new AddStudentCommand(expectedStudent, Index.fromOneBased(VALID_TUTORIAL_INDEX_AMY)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_optionalFullFormatFields_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudentAmy \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudentBob \u003d new StudentBuilder(BOB).withoutMatricNum().withoutNusnetId().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // Missing optional fields"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + MODULE_DESC_BOB + TUTORIAL_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddStudentCommand(expectedStudentBob));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // random ordering of optional fields"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NUSNET_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + TUTORIAL_DESC_AMY + MODULE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_DESC_AMY,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddStudentCommand(expectedStudentAmy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_optionalIndexFormatFields_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudentAmy \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(AddStudentCommandParser.TEMP_TUT_NAME.toString())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(AddStudentCommandParser.TEMP_MOD_CODE.toString()).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student expectedStudentBob \u003d new StudentBuilder(BOB).withoutMatricNum().withoutNusnetId()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(AddStudentCommandParser.TEMP_TUT_NAME.toString())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withModCode(AddStudentCommandParser.TEMP_MOD_CODE.toString()).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Missing optional fields"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        + TUTORIAL_IDX_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new AddStudentCommand(expectedStudentBob, Index.fromOneBased(VALID_TUTORIAL_INDEX_BOB)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // random ordering of fields"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, TUTORIAL_IDX_DESC_AMY + NAME_DESC_AMY + NUSNET_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        + EMAIL_DESC_AMY + MATRIC_DESC_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new AddStudentCommand(expectedStudentAmy, Index.fromOneBased(VALID_TUTORIAL_INDEX_AMY)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + EMAIL_DESC_BOB + TUTORIAL_DESC_BOB + MODULE_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + TUTORIAL_DESC_BOB + MODULE_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_EMAIL_BOB + TUTORIAL_DESC_BOB + MODULE_DESC_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Missing tutorial - no index"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + VALID_TUTORIAL_NAME_BOB + MODULE_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Missing module - no index"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + TUTORIAL_DESC_BOB + VALID_MODULE_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Missing index - no tutorial \u0026 module"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + MODULE_DESC_BOB + TUTORIAL_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + MODULE_DESC_BOB + TUTORIAL_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + MODULE_DESC_BOB + TUTORIAL_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + MODULE_DESC_BOB + TUTORIAL_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Index and tutorial and module info"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + TUTORIAL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                        + MODULE_DESC_BOB + TUTORIAL_IDX_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Module + index"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + TUTORIAL_DESC_BOB + TUTORIAL_IDX_DESC_BOB,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Tutorial + index"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + MODULE_DESC_BOB + TUTORIAL_IDX_DESC_BOB,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Missing index - no tutorial \u0026 no module"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidIndexExpectedMessage \u003d String.format(MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Invalid index - non-integer"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + INVALID_TUTORIAL_INDEX_DESC_1,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidIndexExpectedMessage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Invalid index - character"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + INVALID_TUTORIAL_INDEX_DESC_2,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidIndexExpectedMessage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Invalid index - Index \u003c\u003d 0"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + INVALID_TUTORIAL_INDEX_DESC_3,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidIndexExpectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 102,
      "AhmadHatziq": 2,
      "-": 39,
      "lumos309": 57
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/AddTutorialCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_WEEKS_RANGE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_DAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_DUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_DUR_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_START_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_START_HHMMSS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEKS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEKS_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEKS_ODD_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEKS_ODD_LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEKS_RANGE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEKS_RANGE_LIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddTutorialCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TimeTableBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.TimeTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class AddTutorialCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private AddTutorialCommandParser parser \u003d new AddTutorialCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // list of tutorial weeks specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Set\u003cWeek\u003e validWeeksSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (int w : VALID_WEEKS_LIST) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            validWeeksSet.add(new Week(w));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TimeTable weeksListTimeTable \u003d new TimeTableBuilder().withWeeks(validWeeksSet)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withDuration(VALID_TUTORIAL_DUR).withStartTime(VALID_TUTORIAL_START_HHMMSS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withDayOfWeek(VALID_TUTORIAL_DAY).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // for some reason the builder here sometimes contains default students. Remove them for this test to work."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TutorialBuilder.DEFAULT_STUDENTS.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial weeksListTutorial \u003d new TutorialBuilder().withModCode(VALID_MODCODE).withTutName(VALID_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTimeTable(weeksListTimeTable).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC + VALID_WEEKS_DESC,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddTutorialCommand(weeksListTutorial));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // range of tutorial weeks specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Set\u003cWeek\u003e validWeeksRangeSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (int w : VALID_WEEKS_RANGE_LIST) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            validWeeksRangeSet.add(new Week(w));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TimeTable weeksRangeTimeTable \u003d new TimeTableBuilder().withWeeks(validWeeksRangeSet)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withDuration(VALID_TUTORIAL_DUR).withStartTime(VALID_TUTORIAL_START_HHMMSS)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withDayOfWeek(VALID_TUTORIAL_DAY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial weeksRangeTutorial \u003d new TutorialBuilder().withModCode(VALID_MODCODE).withTutName(VALID_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTimeTable(weeksRangeTimeTable).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                 + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC + VALID_WEEKS_RANGE_DESC,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                 new AddTutorialCommand(weeksRangeTutorial));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // \"odd\" specified for tutorial weeks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        final Set\u003cWeek\u003e validWeeksOddSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        for (int w : VALID_WEEKS_ODD_LIST) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            validWeeksOddSet.add(new Week(w));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TimeTable weeksOddTimeTable \u003d new TimeTableBuilder().withWeeks(validWeeksOddSet)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withDuration(VALID_TUTORIAL_DUR).withStartTime(VALID_TUTORIAL_START_HHMMSS)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withDayOfWeek(VALID_TUTORIAL_DAY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial weeksOddTutorial \u003d new TutorialBuilder().withModCode(VALID_MODCODE).withTutName(VALID_TUTORIAL_NAME)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTimeTable(weeksOddTimeTable).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC + VALID_WEEKS_ODD_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddTutorialCommand(weeksOddTutorial));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // no tutorial weeks specified- default to weeks 3-13"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        TimeTable weeksDefaultTimeTable \u003d new TimeTableBuilder().withDuration(VALID_TUTORIAL_DUR)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withStartTime(VALID_TUTORIAL_START_HHMMSS).withDayOfWeek(VALID_TUTORIAL_DAY).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Tutorial weeksDefaultTutorial \u003d new TutorialBuilder().withModCode(VALID_MODCODE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withTutName(VALID_TUTORIAL_NAME).withTimeTable(weeksDefaultTimeTable).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                new AddTutorialCommand(weeksDefaultTutorial));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTutorialCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // missing module prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC + VALID_WEEKS_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // missing tutorial name prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC + VALID_WEEKS_DESC,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        // invalid range of tutorial weeks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_DAY_DESC"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                        + VALID_TUTORIAL_START_DESC + VALID_TUTORIAL_DUR_DESC + INVALID_WEEKS_RANGE_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "lumos309": 117
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/ApplicationParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ChangeTabCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.DisplayAttendanceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.PersonUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.StudentUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ApplicationParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final ApplicationParser parser \u003d new ApplicationParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(PersonUtil.getAddStudentCommand(student));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(new AddStudentCommand(student), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        DeleteStudentCommand command \u003d (DeleteStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                DeleteStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_IN_LIST.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(new DeleteStudentCommand(INDEX_FIRST_IN_LIST), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + INDEX_FIRST_IN_LIST.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_IN_LIST, descriptor), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parseCommand_displayAttendance() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validDisplayAttendanceCommand \u003d \" tn/Lab Session m/CS1010S\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(parser.parseCommand(DisplayAttendanceCommand.COMMAND_WORD + validDisplayAttendanceCommand)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                instanceof DisplayAttendanceCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parseCommand_changeTab() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validChangeModCommand \u003d \" m\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(parser.parseCommand(ChangeTabCommand.COMMAND_WORD + validChangeModCommand)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                instanceof ChangeTabCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validChangeTutCommand \u003d \" tutorial\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(parser.parseCommand(ChangeTabCommand.COMMAND_WORD + validChangeTutCommand)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                instanceof ChangeTabCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validChangeStudentCommand \u003d \" stu\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(parser.parseCommand(ChangeTabCommand.COMMAND_WORD + validChangeStudentCommand)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                instanceof ChangeTabCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 46,
      "-": 61,
      "lumos309": 12
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.ArgumentTokenizer.ERROR_AUTOFILL_DETECTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Asserts the prefix and argument value in the input {@code PrefixValue} match the expected values."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private void assertArgumentPresent(ArgumentSingleValue prefixValue, Prefix prefix, String expectedValue) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(prefixValue.getPrefix(), prefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(prefixValue.getValue(), expectedValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void tokenize_getLastArgument() throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        ArgumentSingleValue prefixValue \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .tokenizeLastArgument(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertArgumentPresent(prefixValue, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void tokenize_lastArgumentPrefixAbsent_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String argsString \u003d \"somePreamble n/some name tn/some tutorial name\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ArgumentTokenizer.tokenizeLastArgument(argsString, dashT, hatQ),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            ERROR_AUTOFILL_DETECTION);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 149,
      "lumos309": 27
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/DeleteStudentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class DeleteStudentCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private DeleteStudentCommandParser parser \u003d new DeleteStudentCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteStudentCommand(INDEX_FIRST_IN_LIST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                                                               DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 22,
      "lumos309": 7
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/DisplayAttendanceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_IDX_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.DisplayAttendanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DisplayAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private DisplayAttendanceCommandParser parser \u003d new DisplayAttendanceCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ModCode validModCode \u003d new ModCode(VALID_MODCODE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TutName validTutName \u003d new TutName(VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String validFullDisplayCommand \u003d VALID_TUTORIAL_NAME_DESC + VALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String validIndexDisplayCommand \u003d VALID_TUTORIAL_IDX_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_validArgs_returnsDisplayCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand expectedDisplayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(validModCode, validTutName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, validFullDisplayCommand, expectedDisplayAttendanceCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                parser, \" \\n \" + validFullDisplayCommand + \" \\n \\t\", expectedDisplayAttendanceCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_indexFormat_returnsDIsplayCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        DisplayAttendanceCommand expectedDisplayAttendanceCommand \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DisplayAttendanceCommand(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, validIndexDisplayCommand, expectedDisplayAttendanceCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                parser, \" \\n \" + validIndexDisplayCommand + \" \\n \\t\", expectedDisplayAttendanceCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_invalidArgs_returnsDisplayAttendanceCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidCommandMessage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing only tutorial - missing module"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, VALID_TUTORIAL_NAME_DESC, invalidCommandMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing only module - missing tutorial"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC, invalidCommandMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing invalid tutorial"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String invalidTutorial \u003d PREFIX_INDEX + \"@#!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, invalidTutorial, invalidCommandMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing invalid module"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidModule \u003d PREFIX_MODULE + \"CSCS\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, invalidModule, invalidCommandMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing invalid tutorial and module"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, invalidModule + invalidTutorial, invalidCommandMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing valid index, tutorial and module (ambiguous)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC + VALID_TUTORIAL_IDX_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidCommandMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidIndexExpectedMessage \u003d String.format(MESSAGE_INVALID_TUTORIAL_INDEX_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                DisplayAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing invalid index - non integer"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, INVALID_TUTORIAL_INDEX_DESC_1, invalidIndexExpectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing invalid index - character"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, INVALID_TUTORIAL_INDEX_DESC_2, invalidIndexExpectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Parsing invalid index - \u003c\u003d 0"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, INVALID_TUTORIAL_INDEX_DESC_3, invalidIndexExpectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 2,
      "Ellieyee": 93
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_THIRD_IN_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_IN_LIST;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + EMAIL_DESC_AMY + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_EMAIL_DESC + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 35,
      "lumos309": 8,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/ExportAttendanceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_FILENAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_IDX_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.ExportAttendanceCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ExportAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private ExportAttendanceCommandParser parser \u003d new ExportAttendanceCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_allFullFormatFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode expectedModCode \u003d new ModCode(VALID_MODCODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName expectedTutName \u003d new TutName(VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Index expectedIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String expectedFileName \u003d \"fileName\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // whitespace only preamble - parses modcode and tutorial format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new ExportAttendanceCommand(expectedModCode, expectedTutName, null, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // parses index format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseSuccess(parser, VALID_FILENAME_DESC + VALID_TUTORIAL_IDX_DESC,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new ExportAttendanceCommand(null, null, expectedIndex, expectedFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing mod code prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE + VALID_TUTORIAL_NAME_DESC,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing tut name prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_invalidFormat_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode, tutorial name, tutorial index present"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_TUTORIAL_IDX_DESC + VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // tutorial name, tutorial index present"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_TUTORIAL_IDX_DESC + VALID_TUTORIAL_NAME_DESC,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode, tutorial index present"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_TUTORIAL_IDX_DESC + VALID_MODCODE_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // modcode present"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // tutorial name present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_TUTORIAL_NAME_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: This does not throw an error?"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        //         String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 83
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_TUTORIAL_INDEX_DESC_3;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.StudentsInTutorialPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new ListCommand(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, \"     \", expectedListCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new ListCommand(new StudentsInTutorialPredicate(INDEX_FIRST_IN_LIST));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedListCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseSuccess(parser, \" \\n 1 \\n \\t\", expectedListCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void parse_invalidArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String invalidIndexMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Invalid index - non-integer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, INVALID_TUTORIAL_INDEX_DESC_1,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidIndexMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Invalid index - character"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, INVALID_TUTORIAL_INDEX_DESC_2,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidIndexMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Invalid index - Index \u003c\u003d 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertParseFailure(parser, INVALID_TUTORIAL_INDEX_DESC_3,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                invalidIndexMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 52,
      "AhmadHatziq": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/MarkAttendanceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODCODE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_WEEK_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Week;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MarkAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private MarkAttendanceCommandParser parser \u003d new MarkAttendanceCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_allFullFormatFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Name expectedStudName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        ModCode expectedModCode \u003d new ModCode(VALID_MODCODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TutName expectedTutName \u003d new TutName(VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Week expectedWeek \u003d new Week(VALID_WEEK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + NAME_DESC_AMY + VALID_WEEK_DESC,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new MarkAttendanceCommand(expectedModCode, expectedTutName, null, expectedWeek,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedStudName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseSuccess(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + NAME_DESC_AMY + VALID_WEEK_DESC + NAME_DESC_BOB + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new MarkAttendanceCommand(expectedModCode,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedTutName, null, expectedWeek, expectedStudName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseSuccess(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + VALID_WEEK_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                new MarkAttendanceCommand(expectedModCode, expectedTutName, null, expectedWeek, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing mod code prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + NAME_DESC_AMY + VALID_WEEK_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing tut name prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + NAME_DESC_AMY + VALID_WEEK_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing week prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, VALID_MODCODE_DESC + VALID_TUTORIAL_NAME"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + NAME_DESC_AMY + VALID_WEEK,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + VALID_WEEK_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // two invalid values, only second invalid value reported"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "                + VALID_WEEK_DESC, ModCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // TODO: This does not throw an error?"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_MODCODE_DESC + VALID_TUTORIAL_NAME_DESC"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        //         + NAME_DESC_AMY + VALID_WEEK_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        //         String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 91
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(INDEX_FIRST_IN_LIST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(INDEX_FIRST_IN_LIST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 6,
      "-": 79,
      "lumos309": 3
    }
  },
  {
    "path": "src/test/java/seedu/tarence/logic/parser/PartialInputParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumos309"
        },
        "content": "package seedu.tarence.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODULE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODULE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "public class PartialInputParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final Module MODULE_AMY \u003d new ModuleBuilder().withModCode(VALID_MODULE_AMY).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final Module MODULE_BOB \u003d new ModuleBuilder().withModCode(VALID_MODULE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final Tutorial TUTORIAL_AMY \u003d new TutorialBuilder().withModCode(VALID_MODULE_AMY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            .withTutName(VALID_TUTORIAL_NAME_AMY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final Tutorial TUTORIAL_BOB \u003d new TutorialBuilder().withModCode(VALID_MODULE_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumos309"
        },
        "content": "            .withTutName(VALID_TUTORIAL_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final Student AMY \u003d TypicalStudents.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    private static final Student BOB \u003d TypicalStudents.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model \u003d new ModelManager(getTypicalApplication(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(MODULE_AMY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addModule(MODULE_BOB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(TUTORIAL_AMY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorial(TUTORIAL_BOB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorialToModule(TUTORIAL_AMY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addTutorialToModule(TUTORIAL_BOB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addStudent(AMY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addStudent(BOB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addStudentToTutorial(AMY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        model.addStudentToTutorial(BOB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void autocomplete_singleFieldMatchingNameFound_completionSuggested() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String partialInputString \u003d \"someCommand n/Am\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput actualPartialInput \u003d PartialInputParser.parse(partialInputString, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cString\u003e expectedCompletions \u003d new ArrayList\u003c\u003e(Collections.singletonList(AMY.getName().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput expectedPartialInput \u003d new PartialInput(partialInputString,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \"Am\", expectedCompletions);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedPartialInput, actualPartialInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void autocomplete_lastFieldMatchingNameFound_completionSuggested() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String partialInputString \u003d \"someCommand m/CS9999 n/Bob n/Am\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput actualPartialInput \u003d PartialInputParser.parse(partialInputString, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cString\u003e expectedCompletions \u003d new ArrayList\u003c\u003e(Collections.singletonList(AMY.getName().toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput expectedPartialInput \u003d new PartialInput(partialInputString,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \"Am\", expectedCompletions);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedPartialInput, actualPartialInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void autocomplete_multipleNameSuggestions_completionSuggested() throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String partialInputString \u003d \"someCommand m/OW1010 tn/Heroes n/\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput actualPartialInput \u003d PartialInputParser.parse(partialInputString, model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cString\u003e expectedCompletions \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                AMY.getName().toString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                BOB.getName().toString()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput expectedPartialInput \u003d new PartialInput(partialInputString,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \"\", expectedCompletions);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedPartialInput, actualPartialInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void autocomplete_noNameSuggestionsFound_emptySuggestedCompletions() throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String partialInputString \u003d \"someCommand m/OW1010 tn/Heroes n/Cathy\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput actualPartialInput \u003d PartialInputParser.parse(partialInputString, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cString\u003e expectedCompletions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput expectedPartialInput \u003d new PartialInput(partialInputString,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \"Cathy\", expectedCompletions);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedPartialInput, actualPartialInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public void autocomplete_multipleTutNameSuggestions_completionSuggested() throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        String partialInputString \u003d \"someCommand tn/\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput actualPartialInput \u003d PartialInputParser.parse(partialInputString, model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        List\u003cString\u003e expectedCompletions \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                AMY.getTutName().toString(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                BOB.getTutName().toString()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        PartialInput expectedPartialInput \u003d new PartialInput(partialInputString,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                \"\", expectedCompletions);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        assertEquals(expectedPartialInput, actualPartialInput);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumos309"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumos309": 128
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/ApplicationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalTutorials.CS1101S_LAB04;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.DuplicateTutorialException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ApplicationTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final Application application \u003d new Application();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void personListconstructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Collections.emptyList(), application.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void moduleListconstructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Collections.emptyList(), application.getModuleList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void tutorialListconstructor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(Collections.emptyList(), application.getTutorialList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e application.resetData(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData_withValidReadOnlyApplication_replacesData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application newData \u003d getTypicalApplication();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(newData, application);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d person-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ApplicationStub newData \u003d new ApplicationStub();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        newData.setPersons(newPersons);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e application.resetData(newData));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e application.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasPerson_personNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(application.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasPerson_personInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addPerson(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d student-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedAmy \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cPerson\u003e newStudents \u003d Arrays.asList(AMY, editedAmy);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ApplicationStub newData \u003d new ApplicationStub();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        newData.setPersons(newStudents);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e application.resetData(newData));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e application.hasStudent(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_studentNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(application.hasStudent(AMY));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_studentInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addStudent(AMY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasStudent(AMY));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addStudent(AMY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student editedAmy \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasStudent(editedAmy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d module-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Two Modules with the same identity fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Module editedCS1101S \u003d new ModuleBuilder(CS1101S).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS1101S, editedCS1101S);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ApplicationStub newData \u003d new ApplicationStub();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        newData.setModules(newModules);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e application.resetData(newData));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e application.hasModule(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_moduleNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(application.hasModule(CS1101S));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_moduleInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addModule(CS1101S);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasModule(CS1101S));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addModule(CS1101S);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Module editedCS1101S \u003d new ModuleBuilder(CS1101S).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasModule(editedCS1101S));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    ////\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d tutorial-level operations    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void resetData_withDuplicateTutorials_throwsDuplicateTutorialException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Two tutorials with the same identity fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial editedCS1101SLab4 \u003d new TutorialBuilder(CS1101S_LAB04).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cTutorial\u003e newTutorials \u003d Arrays.asList(CS1101S_LAB04, editedCS1101SLab4);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ApplicationStub newData \u003d new ApplicationStub();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        newData.setTutorials(newTutorials);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateTutorialException.class, () -\u003e application.resetData(newData));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_nullTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e application.hasTutorial(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_tutorialNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(application.hasTutorial(CS1101S_LAB04));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_tutorialInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addTutorial(CS1101S_LAB04);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasTutorial(CS1101S_LAB04));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_tutorialWithSameIdentityFieldsInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addTutorial(CS1101S_LAB04);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial editedCS1101SLab4 \u003d new TutorialBuilder(CS1101S_LAB04).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(application.hasTutorial(editedCS1101SLab4));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * A stub ReadOnlyApplication whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static class ApplicationStub implements ReadOnlyApplication {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        private final ObservableList\u003cTutorial\u003e tutorials \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setPersons(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setStudents(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setModules(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public void setTutorials(Collection\u003cTutorial\u003e tutorials) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.tutorials.setAll(tutorials);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        public ObservableList\u003cTutorial\u003e getTutorialList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return tutorials;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "Ellieyee": 243,
      "lumos309": 4
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalTutorials.CS1101S_LAB04;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.testutil.ApplicationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(new Application(), new Application(modelManager.getApplication()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        userPrefs.setApplicationFilePath(Paths.get(\"tarence/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        userPrefs.setApplicationFilePath(Paths.get(\"new/tarence/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setApplicationFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setApplicationFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setApplicationFilePath_validPath_setsApplicationFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Path path \u003d Paths.get(\"tarence/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelManager.setApplicationFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(path, modelManager.getApplicationFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasPerson_personNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasPerson_personInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_studentNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(modelManager.hasStudent(AMY));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasStudent_studentInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelManager.addStudent(AMY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(modelManager.hasStudent(AMY));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_moduleNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(modelManager.hasModule(CS1101S));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasModule_moduleInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelManager.addModule(CS1101S);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(modelManager.hasModule(CS1101S));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_nullTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTutorial(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_tutorialNotInApplication_returnsFalse() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(modelManager.hasTutorial(CS1101S_LAB04));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void hasTutorial_tutorialInApplication_returnsTrue() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelManager.addTutorial(CS1101S_LAB04);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(modelManager.hasTutorial(CS1101S_LAB04));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void getFilteredTutorialList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTutorialList().remove(0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // TODO: update application builder"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application application \u003d new ApplicationBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application differentApplication \u003d new Application();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modelManager \u003d new ModelManager(application, userPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(application, userPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different Application -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentApplication, userPrefs)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(application, userPrefs)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // TODO: Add test for updateFilteredModuleList when Find command is implemented"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // TODO: Add test for updateFilteredTutorialList when Find command is implemented"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // TODO: Add test for updateFilteredModuleList when Find command is implemented"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // TODO: Add test for updateFilteredTutorialList when Find command is implemented"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        differentUserPrefs.setApplicationFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(application, differentUserPrefs)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 94,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setApplicationFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setApplicationFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/module/ModCodeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ModCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_invalidModCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String invalidModCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModCode(invalidModCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isValidModCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null ModCode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModCode.isValidModCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // blank ModCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"S2103\")); // missing starting letter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS\")); // missing numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS210\")); // missing ending character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS_2103\")); // underscore in ModCode"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS 2103\")); // spaces in ModCode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\" CS2103\")); // leading space"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS2103 \")); // trailing space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\".CS2103\")); // ModCode starts with a period"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS2103.\")); // ModCode ends with a period"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"-CS2103\")); // ModCode starts with a hyphen"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ModCode.isValidModCode(\"CS2103-\")); // ModCode ends with a hyphen"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // valid ModCode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(ModCode.isValidModCode(\"CS2103\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 49
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/module/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.VALID_MODCODE_CS1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Module cs2103Copy \u003d new ModuleBuilder(CS2103).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(CS2103.equals(cs2103Copy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(CS2103.equals(CS2103));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS2103.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS2103.equals(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS2103.equals(CS1101S));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Module editedCS2103 \u003d new ModuleBuilder(CS2103).withModCode(VALID_MODCODE_CS1101S).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS2103.equals(editedCS2103));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(CS1101S.isSameModule(CS1101S));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(CS1101S.isSameModule(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different modcode -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(CS1101S).withModCode(\"CS1231\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(CS1101S.isSameModule(editedModule));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 37,
      "Ellieyee": 15,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/module/UniqueModuleListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalModules.CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS1101S));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS1101S));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_moduleWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(CS1101S).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(uniqueModuleList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(CS1101S));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, CS1101S));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(CS1101S, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(CS1101S, CS1101S));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.setModule(CS1101S, CS1101S);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(CS1101S).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.setModule(CS1101S, editedModule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueModuleList.add(editedModule);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.setModule(CS1101S, CS2103);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueModuleList.add(CS2103);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueIdentity_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS2103);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModule(CS1101S, CS2103));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(CS1101S));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void remove_existingModule_removesPerson() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.remove(CS1101S);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueModuleList.add(CS2103);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.add(CS1101S);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(CS2103);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueModuleList.add(CS2103);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(CS1101S, CS1101S);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 167,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Keywords match email and Student, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 69,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 7,
      "-": 53,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8,
      "-": 157,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/student/MatricNumTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class MatricNumTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MatricNum(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_invalidMatricNum_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String invalidMatricNum \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MatricNum(invalidMatricNum));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isValidMatricNum() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null MatricNum"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MatricNum.isValidMatricNum(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // blank MatricNum"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"0191094A\")); // missing starting letter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A019109A\")); // missing 7 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A0191094\")); // missing ending letter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"B0191094A\")); // invalid starting letter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A019_1094A\")); // underscore in matric num"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A0191 094A\")); // spaces in matric num"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\" A0191094A\")); // leading space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A0191094A \")); // trailing space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"AA0191094A\")); // double starting letter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\".A0191094A\")); // matric num starts with a period"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A0191094A.\")); // matric num ends with a period"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"-A0191094A\")); // matric num starts with a hyphen"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(MatricNum.isValidMatricNum(\"A0191094A-\")); // matric num ends with a hyphen"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // valid Matric"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(MatricNum.isValidMatricNum(\"A0191094A\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 51
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/student/NusnetIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class NusnetIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NusnetId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_invalidNusnetId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String invalidNusnetId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NusnetId(invalidNusnetId));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isValidNusnetId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null MatricNum"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NusnetId.isValidNusnetId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // blank MatricNum"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"0123456\")); // missing starting letter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e012345\")); // missing 7 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"b0123456\")); // invalid starting letter"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e012_3456\")); // underscore in nusnet id"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e0123 456\")); // spaces in nusnet id"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\" e0123456\")); // leading space"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e0123456 \")); // trailing space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"ee0123456\")); // double starting letter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\".e0123456\")); // nusnet id starts with a period"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e0123456.\")); // nusnet id ends with a period"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"-e0123456\")); // nusnet id starts with a hyphen"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"0123456-\")); // nusnet id ends with a hyphen"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // valid Matric"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(NusnetId.isValidNusnetId(\"e0123456\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 50
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/student/StudentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different matric num -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withMatricNum(\"A1234567A\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different NUSNET id -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withNusnetId(\"e1234567\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 68,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/student/StudentsInTutorialPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class StudentsInTutorialPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new StudentsInTutorialPredicate(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new StudentsInTutorialPredicate(INDEX_SECOND_IN_LIST);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate firstPredicateCopy \u003d new StudentsInTutorialPredicate(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void test_tutorialListContainsStudent_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate predicate \u003d new StudentsInTutorialPredicate(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        predicate.setModCode(student.getModCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        predicate.setTutName(student.getTutName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(predicate.test(student));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void test_tutorialListDoesntContainStudent_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StudentsInTutorialPredicate predicate \u003d new StudentsInTutorialPredicate(INDEX_FIRST_IN_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        predicate.setModCode(student.getModCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        predicate.setTutName(student.getTutName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student mismatchedTutNameStudent \u003d new StudentBuilder().withTutName(\"Not real tutorial\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(predicate.test(mismatchedTutNameStudent));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Student mismatchedModCodeStudent \u003d new StudentBuilder().withModCode(\"RE4000\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(predicate.test(mismatchedModCodeStudent));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 59,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/tutorial/AttendanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.WeekNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Set\u003cWeek\u003e weeks \u003d new TreeSet\u003c\u003e(Arrays.asList(new Week(1), new Week(2), new Week(3)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private final Attendance attendance \u003d new Attendance(weeks, students);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isPresent_weeksNotInList_throwsWeekNotFoundException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(WeekNotFoundException.class, () -\u003e attendance.isPresent(new Week(4), ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isPresent_studentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e attendance.isPresent(new Week(1), ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setAttendance_weeksNotInList_throwsWeekNotFoundException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(WeekNotFoundException.class, () -\u003e attendance.setAttendance(new Week(4), ALICE, true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void setAttendance() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        students.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance attendanceWithStudent \u003d new Attendance(weeks, students);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(attendanceWithStudent.isPresent(new Week(1), ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        attendanceWithStudent.setAttendance(new Week(1), ALICE, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(attendanceWithStudent.isPresent(new Week(1), ALICE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void addStudent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e attendance.isPresent(new Week(1), ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        attendance.addStudent(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(attendance.isPresent(new Week(1), ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance attendance1 \u003d new Attendance(weeks, students);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance attendance2 \u003d new Attendance(weeks, students);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(attendance1.equals(attendance2)); // same students and weeks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks3 \u003d new TreeSet\u003c\u003e(Arrays.asList(new Week(3), new Week(4), new Week(5)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance attendance3 \u003d new Attendance(weeks3, students);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(attendance3.equals(attendance1)); // different weeks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Student[] studentsArray \u003d { ALICE };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cStudent\u003e students4 \u003d Arrays.asList(studentsArray);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Attendance attendance4 \u003d new Attendance(weeks, students4);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(attendance4.equals(attendance1)); // different students"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 77
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/tutorial/TimeTableTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TimeTableBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TimeTableTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TimeTable(null, null, null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same day, startTime, weeks, duration"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetable \u003d new TimeTableBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetableCopy \u003d new TimeTableBuilder(timetable).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(timetable.equals(timetableCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different day"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetableDiffDay \u003d new TimeTableBuilder(timetable).withDayOfWeek(\"FRIDAY\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(timetable.equals(timetableDiffDay));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different start time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetableDiffStartTime \u003d new TimeTableBuilder(timetable).withStartTime(\"00:00:00\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(timetable.equals(timetableDiffStartTime));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different weeks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Set\u003cWeek\u003e weeks \u003d new TreeSet\u003c\u003e(Arrays.asList(new Week(1), new Week(3), new Week(5)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetableDiffWeeks \u003d new TimeTableBuilder(timetable).withWeeks(weeks).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(timetable.equals(timetableDiffWeeks));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different duration"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetableDiffDuration \u003d new TimeTableBuilder(timetable).withDuration(0).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(timetable.equals(timetableDiffDuration));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 45,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/tutorial/TutNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TutNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TutName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_invalidTutName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        String invalidTutName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TutName(invalidTutName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isValidTutName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null TutName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TutName.isValidTutName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // blank TutName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(TutName.isValidTutName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(TutName.isValidTutName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // valid TutName"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(TutName.isValidTutName(\"Lab 1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 34
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/tutorial/TutorialTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.TypicalTutorials.CS1020_LAB01;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TutorialTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tutorial(null, null, null, null, null, null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isSameTutorial() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same name, timetable and modcode"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial copy \u003d new TutorialBuilder(CS1020_LAB01).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(CS1020_LAB01.isSameTutorial(copy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different timetable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetable \u003d new TimeTable(DayOfWeek.FRIDAY, LocalTime.MAX, new TreeSet\u003c\u003e(), Duration.ZERO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffTimeTable \u003d new TutorialBuilder(CS1020_LAB01).withTimeTable(timetable).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.isSameTutorial(diffTimeTable));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffTutName \u003d new TutorialBuilder(CS1020_LAB01).withTutName(\"CS1020_LAB02\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.isSameTutorial(diffTutName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different students"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        students.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffStudents \u003d new TutorialBuilder(CS1020_LAB01).withStudents(students).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(CS1020_LAB01.isSameTutorial(diffStudents));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different modcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffModCode \u003d new TutorialBuilder(CS1020_LAB01).withModCode(\"CS2040\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.isSameTutorial(diffModCode));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // same name and students"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial copy \u003d new TutorialBuilder(CS1020_LAB01).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(CS1020_LAB01.equals(copy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different timetable"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        TimeTable timetable \u003d new TimeTable(DayOfWeek.FRIDAY, LocalTime.MAX, new TreeSet\u003c\u003e(), Duration.ZERO);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffTimeTable \u003d new TutorialBuilder(CS1020_LAB01).withTimeTable(timetable).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.equals(diffTimeTable));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffTutName \u003d new TutorialBuilder(CS1020_LAB01).withTutName(\"CS1020_LAB02\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.equals(diffTutName));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different students"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        students.add(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffStudents \u003d new TutorialBuilder(CS1020_LAB01).withStudents(students).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.equals(diffStudents));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // different modcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial diffModCode \u003d new TutorialBuilder(CS1020_LAB01).withModCode(\"CS2040\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(CS1020_LAB01.equals(diffModCode));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 78,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/tutorial/UniqueTutorialListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalTutorials.CS1020_LAB01;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalTutorials.CS1231_TUT10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.DuplicateTutorialException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.exceptions.TutorialNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class UniqueTutorialListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private final UniqueTutorialList uniqueTutorialList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_nullTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_tutorialNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(uniqueTutorialList.contains(CS1020_LAB01));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_tutorialInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(uniqueTutorialList.contains(CS1020_LAB01));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void contains_tutorialWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial editedCs1020Lab01 \u003d new TutorialBuilder(CS1020_LAB01).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertTrue(uniqueTutorialList.contains(editedCs1020Lab01));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void add_nullTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void add_duplicateTutorial_throwsDuplicateTutorialException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateTutorialException.class, () -\u003e uniqueTutorialList.add(CS1020_LAB01));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_nullTargetTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.setTutorial(null, CS1020_LAB01));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_nullEditedTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.setTutorial(CS1020_LAB01, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_targetTutorialNotInList_throwsTutorialNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(TutorialNotFoundException.class, () -\u003e uniqueTutorialList.setTutorial(CS1020_LAB01, CS1020_LAB01));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_editedTutorialIsSameTutorial_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.setTutorial(CS1020_LAB01, CS1020_LAB01);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueTutorialList expectedUniqueTutorialList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueTutorialList, uniqueTutorialList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_editedTutorialHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Tutorial editedCs1020Lab01 \u003d new TutorialBuilder(CS1020_LAB01).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.setTutorial(CS1020_LAB01, editedCs1020Lab01);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueTutorialList expectedUniqueTutorialList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueTutorialList.add(editedCs1020Lab01);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueTutorialList, uniqueTutorialList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_editedHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.setTutorial(CS1020_LAB01, CS1231_TUT10);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueTutorialList expectedUniqueTutorialList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueTutorialList.add(CS1231_TUT10);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueTutorialList, uniqueTutorialList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorial_editedTutorialHasNonUniqueIdentity_throwsDuplicateTutorialException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1231_TUT10);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateTutorialException.class, ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            -\u003e uniqueTutorialList.setTutorial(CS1020_LAB01, CS1231_TUT10));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void remove_nullTutorial_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void remove_tutorialDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(TutorialNotFoundException.class, () -\u003e uniqueTutorialList.remove(CS1020_LAB01));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void remove_existingTutorial_removesTutorial() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.remove(CS1020_LAB01);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueTutorialList expectedUniqueTutorialList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueTutorialList, uniqueTutorialList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials_nullUniqueTutorialList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.setTutorials((UniqueTutorialList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials_uniqueTutorialList_replacesOwnListWithProvidedUniqueTutorialList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueTutorialList expectedUniqueTutorialList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniqueTutorialList.add(CS1231_TUT10);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.setTutorials(expectedUniqueTutorialList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniqueTutorialList, uniqueTutorialList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTutorialList.setTutorials((List\u003cTutorial\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.add(CS1020_LAB01);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cTutorial\u003e tutorialList \u003d Collections.singletonList(CS1231_TUT10);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        uniqueTutorialList.setTutorials(tutorialList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        UniqueTutorialList expectedUniquePersonList \u003d new UniqueTutorialList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        expectedUniquePersonList.add(CS1231_TUT10);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTutorialList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setTutorials_listWithDuplicateTutorials_throwsDuplicateTutorialException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cTutorial\u003e listWithDuplicateTutorials \u003d Arrays.asList(CS1020_LAB01, CS1020_LAB01);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DuplicateTutorialException.class, ()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            -\u003e uniqueTutorialList.setTutorials(listWithDuplicateTutorials));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            -\u003e uniqueTutorialList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 2,
      "Ellieyee": 165,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/model/tutorial/WeekTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.model.tutorial;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class WeekTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Week(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void constructor_invalidWeek_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        int invalidWeek \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Week(invalidWeek));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void isValidWeek() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // null Week"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Week.isValidWeek(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // invalid Week"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(Week.isValidWeek(0)); // values not between 1 and 13"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertFalse(Week.isValidWeek(14));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        // valid Week"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(Week.isValidWeek(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(0 \u003e new Week(1).compareTo(new Week(2)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(0 \u003d\u003d new Week(1).compareTo(new Week(1)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        assertTrue(0 \u003c new Week(2).compareTo(new Week(1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 41
    }
  },
  {
    "path": "src/test/java/seedu/tarence/storage/JsonAdaptedModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.tarence.testutil.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_MODULE_CODE \u003d \"CS10101010AAA\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_MODULE_CODE \u003d \"CS1010E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final LinkedHashMap\u003cString, String\u003e VALID_TUTORIAL_MAP \u003d JsonUtil.getValidMapOfDifferentTutorials();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void toModelType_tutorialMapWithInvalidDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonUtil.getMapOfSingleTutorialWithInvalidTutorialDay());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String expectedMessage \u003d \"Error in reading field! Invalid day entered\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(INVALID_MODULE_CODE, VALID_TUTORIAL_MAP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String expectedMessage \u003d \"Invalid field in Module\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void toModelType_tutorialMapWithInvalidDuration_throwsIllegalValueExcepion() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonUtil.getMapOfSingleTutorialWithInvalidTutorialDuration());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String expectedMessage \u003d \"Tutorial\u0027s Duration field is invalid! Or Tutorial\u0027s LocalTime field is invalid!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void toModelType_tutorialMapWithInvalidStartTime_throwsIllegalValueExcepion() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonUtil.getMapOfSingleTutorialWithInvalidTutorialStartTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String expectedMessage \u003d \"Tutorial\u0027s Duration field is invalid! Or Tutorial\u0027s LocalTime field is invalid!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void toModelType_tutorialMapWithInvalidWeeks_throwsIllegalValueExcepion() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonUtil.getMapOfSingleTutorialWithInvalidTutorialWeeks());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String expectedMessage \u003d \"Error in reading field! Invalid week number(s) entered. \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"Should contain only numbers from 1 to 13.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void toModelType_tutorialMapWithInvalidModuleCode_throwsIllegalValueExcepion() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                JsonUtil.getMapOfSingleTutorialWithInvalidModuleCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String expectedMessage \u003d \"Error in reading field! \" + ModCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 72
    }
  },
  {
    "path": "src/test/java/seedu/tarence/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_EMAIL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 11,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/tarence/storage/JsonApplicationStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class JsonApplicationStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonApplicationStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void readApplication_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readApplicationBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private java.util.Optional\u003cReadOnlyApplication\u003e readApplicationBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new JsonApplicationStorage(Paths.get(filePath)).readApplication(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertFalse(readApplicationBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readApplicationBook(\"notJsonFormatApplication.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void readApplication_invalidPersonApplication_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readApplicationBook(\"invalidPersonApplication.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void readApplication_invalidAndValidPersonApplication_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readApplicationBook(\"invalidAndValidPersonApplication.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void readAndSaveApplication_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempApplication.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application original \u003d getTypicalApplication();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonApplicationStorage jsonApplicationStorage \u003d new JsonApplicationStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        jsonApplicationStorage.saveApplication(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ReadOnlyApplication readBack \u003d jsonApplicationStorage.readApplication(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(original, new Application(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        jsonApplicationStorage.saveApplication(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        readBack \u003d jsonApplicationStorage.readApplication(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(original, new Application(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        jsonApplicationStorage.saveApplication(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        readBack \u003d jsonApplicationStorage.readApplication().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(original, new Application(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void saveApplication_nullApplication_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveApplication(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Saves {@code Application} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private void saveApplication(ReadOnlyApplication application, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new JsonApplicationStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    .saveApplication(application, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void saveApplication_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveApplication(new Application(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 110
    }
  },
  {
    "path": "src/test/java/seedu/tarence/storage/JsonSerializableApplicationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import seedu.tarence.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import seedu.tarence.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "//import seedu.tarence.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class JsonSerializableApplicationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableApplicationTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsApplication.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonApplication.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonApplication.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonSerializableApplication dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                JsonSerializableApplication.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application applicationFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application typicalPersonsApplication \u003d TypicalPersons.getTypicalApplication();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(applicationFromFile, typicalPersonsApplication);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    TODO: FIX MODEL TEST"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonSerializableApplication dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                JsonSerializableApplication.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    TODO: FIX model test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonSerializableApplication dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                JsonSerializableApplication.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableApplication.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    TODO: FIX MODEL TEST"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 40,
      "AhmadHatziq": 16
    }
  },
  {
    "path": "src/test/java/seedu/tarence/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        userPrefs.setApplicationFilePath(Paths.get(\"application.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/tarence/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.TypicalPersons.getTypicalApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.ReadOnlyApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        JsonApplicationStorage applicationStorage \u003d new JsonApplicationStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        storageManager \u003d new StorageManager(applicationStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void applicationReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         * {@link JsonApplicationStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonApplicationStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application original \u003d getTypicalApplication();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        storageManager.saveApplication(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ReadOnlyApplication retrieved \u003d storageManager.readApplication().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(original, new Application(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void getApplicationFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertNotNull(storageManager.getApplicationFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/ApplicationBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A utility class to help with building Applications."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " *     {@code Applications ap \u003d new ApplicationBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ApplicationBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Application application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ApplicationBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application \u003d new Application();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ApplicationBuilder(Application application) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.application \u003d application;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds a new {@code Person} to the {@code Application} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ApplicationBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        application.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Application build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 34
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.module.ModCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.MatricNum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.NusnetId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.TutName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setModCode(student.getModCode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setTutName(student.getTutName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setNusnetId(student.getNusnetId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setMatricNum(student.getMatricNum());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the {@code ModCode} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder withModCode(ModCode modCode) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setModCode(modCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the {@code TutName} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder withTutName(TutName tutName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setTutName(tutName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the {@code Matric No} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder withMatricNum (Optional\u003cMatricNum\u003e matricNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setMatricNum(matricNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the {@code withNusnetId} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptorBuilder withNusnetId (Optional\u003cNusnetId\u003e nusnetId) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.setNusnetId(nusnetId);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 93
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/JsonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_ATTENDANCE_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_STUDENT_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static seedu.tarence.storage.JsonAdaptedModule.TUTORIAL_WEEKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * A set of methods to assist in testing Json methods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_DAY \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_DURATION \u003d \"PT2H\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_MODULE_CODE \u003d \"CS1010\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_NAME \u003d \"Sectional\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_START_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_STUDENT_LIST \u003d \"[{studentName\u003dEllie Yee, studentEmail\u003de0035152@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptional[A0155413M], studentNusnetId\u003dOptional[E0031550], \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session}],[{studentName\u003dProf Damith, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentEmail\u003de0012352@u.nus.edu.sg, studentMatricNumber\u003dOptional.empty, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentNusnetId\u003dOptional.empty, studentModuleCode\u003dCS1010S, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentTutorialName\u003dLab Session}],[{studentName\u003dHatziq, studentEmail\u003de0012352@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptional.empty, studentNusnetId\u003dOptional.empty, studentModuleCode\u003dCS1010S, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentTutorialName\u003dLab Session}]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_WEEKS \u003d \"[1, 4, 7]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String VALID_TUTORIAL_ATTENDANCE_LIST \u003d \"{1\u003d[{studentName\u003dEllie Yee, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentEmail\u003de0035152@u.nus.edu.sg, studentMatricNumber\u003dOptional[A0155413M], \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentNusnetId\u003dOptional[E0031550], studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentAttendance\u003dtrue}],[{studentName\u003dProf Damith, studentEmail\u003de0012352@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptional.empty, studentNusnetId\u003dOptional.empty, studentModuleCode\u003dCS1010S, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentTutorialName\u003dLab Session, studentAttendance\u003dfalse}], 4\u003d[{studentName\u003dEllie Yee, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentEmail\u003de0035152@u.nus.edu.sg, studentMatricNumber\u003dOptional[A0155413M], \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentNusnetId\u003dOptional[E0031550], studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session, \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentAttendance\u003dfalse}],[{studentName\u003dProf Damith, studentEmail\u003de0012352@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptional.empty, studentNusnetId\u003dOptional.empty, studentModuleCode\u003dCS1010S, \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentTutorialName\u003dLab Session, studentAttendance\u003dfalse}], 7\u003d[{studentName\u003dEllie Yee, \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentEmail\u003de0035152@u.nus.edu.sg, studentMatricNumber\u003dOptional[A0155413M], \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentNusnetId\u003dOptional[E0031550], studentModuleCode\u003dCS1010S, studentTutorialName\u003dLab Session, \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentAttendance\u003dtrue}],[{studentName\u003dProf Damith, studentEmail\u003de0012352@u.nus.edu.sg, \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentMatricNumber\u003dOptional.empty, studentNusnetId\u003dOptional.empty, studentModuleCode\u003dCS1010S, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            + \"studentTutorialName\u003dLab Session, studentAttendance\u003dtrue}]}\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_DAY \u003d \"International Slippers Day\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_DURATION \u003d \"120\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_START_TIME \u003d \"25:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_MODULE_CODE \u003d \"CS10101010EEE\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static final String INVALID_TUTORIAL_WEEKS \u003d \"[3O, 5O]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getValidMapOfSingleTutorial() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_NAME, VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DAY, VALID_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_START_TIME, VALID_TUTORIAL_START_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_WEEKS, VALID_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DURATION, VALID_TUTORIAL_DURATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_STUDENT_LIST, VALID_STUDENT_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, VALID_TUTORIAL_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_MODULE_CODE, VALID_TUTORIAL_MODULE_CODE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return singleTutorialMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getMapOfSingleTutorialWithInvalidTutorialDay() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_NAME, VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DAY, INVALID_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_START_TIME, VALID_TUTORIAL_START_TIME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_WEEKS, VALID_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DURATION, VALID_TUTORIAL_DURATION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_STUDENT_LIST, VALID_STUDENT_LIST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, VALID_TUTORIAL_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_MODULE_CODE, VALID_TUTORIAL_MODULE_CODE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e differentTutorialsMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        differentTutorialsMap.put(VALID_TUTORIAL_NAME, singleTutorialMap.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return differentTutorialsMap;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getMapOfSingleTutorialWithInvalidTutorialDuration() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_NAME, VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DAY, VALID_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_START_TIME, VALID_TUTORIAL_START_TIME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_WEEKS, VALID_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DURATION, INVALID_TUTORIAL_DURATION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_STUDENT_LIST, VALID_STUDENT_LIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, VALID_TUTORIAL_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_MODULE_CODE, VALID_TUTORIAL_MODULE_CODE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e differentTutorialsMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        differentTutorialsMap.put(VALID_TUTORIAL_NAME, singleTutorialMap.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return differentTutorialsMap;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getMapOfSingleTutorialWithInvalidTutorialStartTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_NAME, VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DAY, VALID_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_START_TIME, INVALID_TUTORIAL_START_TIME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_WEEKS, VALID_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DURATION, VALID_TUTORIAL_DURATION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_STUDENT_LIST, VALID_STUDENT_LIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, VALID_TUTORIAL_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_MODULE_CODE, VALID_TUTORIAL_MODULE_CODE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e differentTutorialsMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        differentTutorialsMap.put(VALID_TUTORIAL_NAME, singleTutorialMap.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return differentTutorialsMap;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getMapOfSingleTutorialWithInvalidTutorialWeeks() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_NAME, VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DAY, VALID_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_START_TIME, VALID_TUTORIAL_START_TIME);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_WEEKS, INVALID_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DURATION, VALID_TUTORIAL_DURATION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_STUDENT_LIST, VALID_STUDENT_LIST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, VALID_TUTORIAL_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_MODULE_CODE, VALID_TUTORIAL_MODULE_CODE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e differentTutorialsMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        differentTutorialsMap.put(VALID_TUTORIAL_NAME, singleTutorialMap.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return differentTutorialsMap;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getMapOfSingleTutorialWithInvalidModuleCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e singleTutorialMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_NAME, VALID_TUTORIAL_NAME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DAY, VALID_TUTORIAL_DAY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_START_TIME, VALID_TUTORIAL_START_TIME);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_WEEKS, VALID_TUTORIAL_WEEKS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_DURATION, VALID_TUTORIAL_DURATION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_STUDENT_LIST, VALID_STUDENT_LIST);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_ATTENDANCE_LIST, VALID_TUTORIAL_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        singleTutorialMap.put(TUTORIAL_MODULE_CODE, INVALID_TUTORIAL_MODULE_CODE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e differentTutorialsMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        differentTutorialsMap.put(VALID_TUTORIAL_NAME, singleTutorialMap.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return differentTutorialsMap;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static LinkedHashMap\u003cString, String\u003e getValidMapOfDifferentTutorials() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e differentTutorialsMap \u003d new LinkedHashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        differentTutorialsMap.put(VALID_TUTORIAL_NAME, getValidMapOfSingleTutorial().toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return differentTutorialsMap;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 155
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns an addStudent command string for adding the {@code person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static String getAddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumos309"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        sb.append(student.getNusnetId().get().nusnetId + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        sb.append(student.getMatricNum().get().value + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        sb.append(PREFIX_MODULE + student.getModCode().modCode + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        sb.append(PREFIX_TUTORIAL_NAME + student.getTutName().tutName + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumos309"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumos309"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5,
      "-": 34,
      "lumos309": 26
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/StudentUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.parser.CliSyntax.PREFIX_TUTORIAL_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an addStudent command string for adding the {@code student}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getAddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(student.getNusnetId().get().nusnetId + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(student.getMatricNum().get().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(PREFIX_MODULE + student.getModCode().modCode + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        sb.append(PREFIX_TUTORIAL_NAME + student.getTutName().tutName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 49
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Index INDEX_FIRST_IN_LIST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Index INDEX_SECOND_IN_LIST \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumos309"
        },
        "content": "    public static final Index INDEX_THIRD_IN_LIST \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 2,
      "-": 7,
      "lumos309": 3
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/TypicalModules.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.ModuleBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_MODCODE_CS2103 \u003d \"CS2103\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String VALID_MODCODE_CS1101S \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Module CS2103 \u003d new ModuleBuilder().withModCode(\"CS2103\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withTutorials(new ArrayList\u003cTutorial\u003e()).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Module CS1101S \u003d new ModuleBuilder().withModCode(\"CS1101S\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withTutorials(new ArrayList\u003cTutorial\u003e()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an {@code Application} with all the typical modules."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Application getTypicalApplication() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cStudent\u003e students \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "        Tutorial tutorial \u003d new TutorialBuilder().withStudents(students).withModCode(\"CS1101S\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modules.add(CS1101S);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modules.add(CS2103);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        modules.get(0).addTutorial(tutorial);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application ab \u003d new Application();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ab.addTutorial(tutorial);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 24,
      "Ellieyee": 26,
      "lumos309": 2
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"johnd@example.com\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"cornelia@example.com\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an {@code Application} with all the typical persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Application getTypicalApplication() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application ab \u003d new Application();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 29,
      "-": 35,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/TypicalStudents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODULE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_MODULE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_NUSNET_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.logic.commands.CommandTestUtil.VALID_TUTORIAL_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "import seedu.tarence.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withEmail(\"alice@example.com\").withMatricNum(\"A0123456X\").withNusnetId(\"e0123456\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"johnd@example.com\").withMatricNum(\"A1234560A\").withNusnetId(\"e1234560\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"heinz@example.com\").withMatricNum(\"A2345601A\").withNusnetId(\"e2345601\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withMatricNum(\"A3456012A\").withNusnetId(\"e3456012\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"werner@example.com\").withMatricNum(\"A4560123A\").withNusnetId(\"e4560123\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"lydia@example.com\").withMatricNum(\"A5601234A\").withNusnetId(\"e5601234\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"anna@example.com\").withMatricNum(\"A6012345A\").withNusnetId(\"e6012345\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"stefan@example.com\").withMatricNum(\"A6543210A\").withNusnetId(\"e6543210\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withEmail(\"hans@example.com\").withMatricNum(\"A5432106A\").withNusnetId(\"e5432106\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumos309"
        },
        "content": "                .withMatricNum(VALID_MATRIC_AMY).withNusnetId(VALID_NUSNET_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withModCode(VALID_MODULE_AMY).withTutName(VALID_TUTORIAL_NAME_AMY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .withModCode(VALID_MODULE_BOB).withTutName(VALID_TUTORIAL_NAME_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an {@code Application} with all the typical students."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Application getTypicalApplication() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application ab \u003d new Application();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 52,
      "Ellieyee": 25,
      "lumos309": 5
    }
  },
  {
    "path": "src/test/java/seedu/tarence/testutil/TypicalTutorials.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumos309"
        },
        "content": "import seedu.tarence.model.builder.TutorialBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.model.tutorial.Tutorial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A utility class containing a list of {@code Tutorial} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class TypicalTutorials {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS1020_LAB01 \u003d new TutorialBuilder().withModCode(\"CS1020\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZiHawkEye"
        },
        "content": "            .withTutName(\"Lab 1\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS2040_TUT02 \u003d new TutorialBuilder().withModCode(\"CS2040\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withTutName(\"Tutorial 2\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS1101S_LAB04 \u003d new TutorialBuilder().withModCode(\"CS1101S\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withTutName(\"Lab 4\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS1231_TUT10 \u003d new TutorialBuilder().withModCode(\"CS1231\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withTutName(\"Tutorial 10\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS2100_LAB02 \u003d new TutorialBuilder().withModCode(\"CS2100\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withTutName(\"Lab 2\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS2103_TUT14 \u003d new TutorialBuilder().withModCode(\"CS2103\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withTutName(\"Tutorial 14\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static final Tutorial CS3230_LAB03 \u003d new TutorialBuilder().withModCode(\"CS3230\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            .withTutName(\"Lab 3\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TypicalTutorials() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns an {@code Application} with all the typical tutorials."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Application getTypicalApplication() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application ta \u003d new Application();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (Tutorial tutorial : getTypicalTutorial()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            ta.addTutorial(tutorial);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return ta;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static List\u003cTutorial\u003e getTypicalTutorial() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1020_LAB01, CS1101S_LAB04, CS1231_TUT10, CS2040_TUT02,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                CS2100_LAB02, CS2103_TUT14, CS3230_LAB03));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZiHawkEye": 1,
      "Ellieyee": 46,
      "lumos309": 1
    }
  },
  {
    "path": "src/test/java/seedu/tarence/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/tarence/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package seedu.tarence.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static seedu.tarence.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import seedu.tarence.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import seedu.tarence.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cfx:root type\u003d\"seedu.tarence.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1,
      "-": 5
    }
  }
]
