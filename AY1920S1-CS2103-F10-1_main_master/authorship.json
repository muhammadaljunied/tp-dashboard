[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d NurseTraverse"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-F10-1/main[image:https://travis-ci.org/AY1920S1-CS2103-F10-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "image::images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "NurseTraverse is a desktop application meant for community nurses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "A community nurse has many things to keep in mind: the day\u0027s schedule, patient address, contact details, medications, medical conditions, allergies, ..."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Fret not! NurseTraverse is built to help manage all the data that a community nurse might need. Let NurseTraverse handle the details, the nurse can focus on the patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* NurseTraverse helps to manage and store patient details, as well as scheduling information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* User interaction takes place through a Command Line Interface (CLI) for quick user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Information is displayed on a Graphical User Interface (GUI) - important data can be easily glanced."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* [Coming in v2.0] Patient visit and todo tracking, data encryption."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Built upon the AddressBook-Level3 project created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 18,
      "-": 22
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.dataformat\u0027, name: \u0027jackson-dataformat-csv\u0027, version : \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 2,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "NurseTraverse was developed by https://se-edu.github.io/docs/Team.html[CS2103-F10-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Lee Wei Ren Matthew"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::crazoter.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[https://github.com/crazoter[github]] [\u003c\u003ccrazoter#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Responsibilities: Documentation, Scheduling and tracking"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Ramachandran Sandhya"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::sandydays.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[https://github.com/sandydays[github]] [\u003c\u003csandydays#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Responsibilities: In charge of `UI`, Deliverables and deadlines"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Cheong Siu Hong"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::cheongsiuhong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[http://github.com/cheongsiuhong[github]] [\u003c\u003ccheongsiuhong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Responsibilities: In charge of `Storage`, Testing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Francis Low Siu Yuan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::francislow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[http://github.com/francislow[github]] [\u003c\u003cfrancislow#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Responsibilities: In charge of `UI`, Code quality"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Chao Fang How, Gabriel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::gabrielchao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[http://github.com/gabrielchao[github]] [\u003c\u003cgabrielchao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Responsibilities: In charge of `Storage`, Integration"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "sandydays": 23,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F10-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* *Email us* : You can also reach us at `mr47 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "francislow"
        },
        "content": "* community nurse"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "francislow"
        },
        "content": "* needs to manage a significant number of homebound patients"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "francislow"
        },
        "content": "* has a need to manage patients’ profile efficiently"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "francislow"
        },
        "content": "* has flexibility in scheduling appointments"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Value proposition*: Makes managing patients’ data more orderly, efficient and tidy"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see the next-of-kin contact (address, name, phone) associated with each patient |inform them in case of any emergency situations"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |track the addresses of my patients |I will not forget them"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |keep track of the dosages of medications of my patients |I know exactly what they need to take"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see my schedule of appointments for a day |I know when to go where"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see all my patients’ medications in a list |I can pack my bags in advance of each trip"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see the medical conditions of each patient so that |I know how to care for them"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |record details (these details can be broken down) about the visit (e.g. environmental conditions, patient’s symptoms, warning signs) |I can better monitor the patient’s situation"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |save my data automatically after each change |data doesn’t get lost if I forgot or am not able to save after a session"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |take personal notes for each patient |I can take note of their personal quirks and needs"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |use a todo list / checklist to keep track of what I have to do when I visit a patient |I won’t forget or miss out on any important tasks when I visit them"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |I want to keep track of todos I have done |I will have documentations to  fall back on if i need them"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a manual for how to do certain tasks (e.g. clean wounds / first aid |I am better prepared in times of emergency"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a manual on medical conditions |I am better prepared to advise patients about their medical condition"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |keep a photo of each patient so I can |remember them better"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |alert or send reminders to patients to take any prescribed medication so that |they take their medication on time and regularly"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |set the level of importance to each todo |urgent matters regarding patients is taken priority of and can be taken care of first"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a list of emergency contacts |I will be able to find them easily in times of emergency"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |be able to organise patient’s paperwork (appointment letters for checkups) |my patients don’t miss their appointments"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a notification system |I will be reminded of important matters to settle"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |be able to import and export my app data patient-by-patient |I can share with other nurses or manager"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have an undo function |I don’t accidentally make irreversible changes due to my mistakes"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a pin login system |my patients’ information will be kept private"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have my patients’ information encrypted |their information is kept private and secure"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |be able to see all the patient’s information in a structured format |so that messy and complex details are presented to me in an organised manner"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have an autocomplete function |I can use the application more quickly without memorising all the commands of the application"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a help function |I do not need to worry about memorising all the commands of the application"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |assign each patient a priority number |I can keep track of who needs me the most"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`*` |user |solve the Travelling CN problem |I can save time when visiting my patients"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`*` |user |sort my patient list by priority |I can keep in mind who to visit"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`*` |user |keep track of each patient’s available times |I know when I can visit them"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Add patient"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to add a new patient to the list"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application adds the patient to the list"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 1a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 1a1. Application shows an error message."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: View patient profile"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application shows a list of persons"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User requests to view a specific patient in the list"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "francislow"
        },
        "content": "4.  Application shows the specified patient profile"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Delete patient profile"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application shows a list of persons"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User requests to delete a specific patient in the list"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "francislow"
        },
        "content": "4.  Application delete the specified patient profile"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Take notes for a patient"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to open note GUI for a specific patient"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  User edit the patient’s notes"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User request to exit note GUI"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 1a. Invalid command"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 1a1. Application shows an error message."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. Invalid command"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Adding an appointment"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application shows a list of persons"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User picks one patient from the list and add appointment date and time through command line"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "francislow"
        },
        "content": "4.  Application adds user appointment"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  Should work on any mainstream OS as long as it has Java 11 or above installed"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  Should be able to hold up to 50 patient profile without any noticeable performance issue"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  Users should be able to understand how to use the system easily"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  GUI should be straightforward and clear"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d Glossary (do along the way)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "francislow"
        },
        "content": "Define terms that are worth recording. Eg:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "francislow": 178,
      "-": 402
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d NurseTraverse - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "By: `Team AY1920S1-CS2103-F10-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "NurseTraverse is designed for community nurses who make home visits to their patients. It is a laptop app that will allow nurses to keep track of their patients\u0027 data, appointments and visits. ComNurse is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".  Download the latest `comnurse.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* *`patient list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **`patient add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **`patient delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Parameters are additional pieces of information required/used when running a command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Items in square brackets are *optional* e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Items that are not in square brackets are required e.g. `n/NAME` from the `patient add` command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Due to the number of commands, each command will follow the syntax of `*ENTITY ACTION [PARAMETERS]*`. For example, if you wanted to delete a patient, you would do something like `patient delete 3`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Directs you to this page."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Basic Patient Features"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Basic Patient Features*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often need to visit various patients at their homes. This section describes the features that will allow you to manage the list of patients and their information in the application. This section covers the management of patients and their data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Patients: `patient list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all patients in the app by typing `patient list`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each patient will have an *index* number which can then be used for other features that require you to select a patient by *index* e.g. `patient delete`. Take note that a patient will be given the same *index* regardless of other display commands such as `patient find`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `patient list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Patient(s): `patient find`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find patients that fit the parameters given using `patient find`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each patient will have an *index* number which can then be used for other features that require you to select a patient by *index* e.g. `patient delete`. Take note that a patient will be given the same *index* regardless of other display commands such as `patient list` or if different parameters are used."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `patient find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Only patients that match *all* specified arguments will be displayed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `patient find` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Returns all patients (since no search parameters were specified)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `patient find n/john` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Returns patients whose names are `john` and `John Doe`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `patient find n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Returns patient, if found, with exact details as specified in the search, i.e. with name James Ho, phone number 22224444, etc."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Patient: `patient view`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a patient\u0027s full details using `patient view`. The patient is selected by their *index*. This full details include everything from their todo list, medical conditions, prescriptions, notes, appointments etc."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `patient view INDEX`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of patients displayed by `patient list` or `patient find`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient list` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`patient view 1`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of patients."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient view 2`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Patient: `patient add`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a patient to the list of all patients by using `patient add`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `patient add n/NAME ic/IC p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​ [kn/NOK_NAME] [kp/NOK_PHONE_NUMBER] [ka/NOK_ADDRESS] [ke/NOK_EMAIL] [imp/PRIORITY]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A patient can have any number of tags."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A patient can have next-of-kin contact details."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Priority can take values from 0 to 10."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * `patient add n/John Doe ic/S7012255C p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * `patient add n/Choong Siew Hwang ic/S7015376D p/91239876 a/22 College Avenue East; Singapore 138608 e/cho0ng@email.com t/Big kn/Choong Tee Ling kp/85639274 ka/10 Buangkok View, Singapore 534194 ke/ch1ng@email.com`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * `patient add n/Betsy Crowe ic/S0011239X t/friend e/betsycrowe@example.com a/Newgate Prison p/12345678 t/criminal imp/4`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Patient: `patient edit`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing patient in the app using `patient edit`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `patient edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of patients displayed by `patient list` or `patient find`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient list` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sandydays"
        },
        "content": " `patient edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire patient\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `patient edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Edits the name of the 2nd person in the entire patient\u0027s list with `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Patient: `patient delete`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a patient by *index* using `patient delete`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `patient delete INDEX`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of patients displayed by `patient list` or `patient find`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* All patients with an index number higher than the deleted patient will have their indexes decremented by 1. E.g. after"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deleting index 3, index 4 will become 3, 5 will become 4 and so on."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient list` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`patient delete 2` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd patient in the patient list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient delete 1` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the patient which had been assigned the index 1."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Advanced Patient Features"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Advanced Patient Features*"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "On top of managing your patient data, you may need to assign other items to patients e.g. medical conditions or medication prescriptions. This section pertains to that."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Medical Condition to a Patient `patient add medcon`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a medical condition to a patient using `patient add medcon`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format `patient add medcon i/PATIENT_INDEX m/MEDCON_INDEX`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* MEDCON_INDEX refers to the index of a medical condition (obtained using `medcon list` or `medcon find`)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the medical condition can be found in the patient\u0027s list of medical conditions, then it will not be added."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient add medcon i/1 m/2` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Adds the medical condition at index no. 2 (in the list of medical conditions) to the patient that was assigned index no. 1 in the list of patients"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Removing a Medical Condition from a Patient `patient rm medcon`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can remove a medical condition from a patient using `patient rm medcon`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `patient rm medcon i/PATIENT_INDEX m/MEDCON_INDEX`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* MEDCON_INDEX refers to the index of a medical condition (obtained using `medcon list` or `medcon find`)."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the medical condition can be found in the patient\u0027s list of medical conditions, then it will be removed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient rm medcon i/1 m/2` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Removes the medical condition at of index no. 2 (in the list of medical conditions) from the patient that was assigned index no. 1 in the list of patients"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Prescription to a Patient `patient add presc`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a prescription to a patient using `patient add presc`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "You can view the list of prescriptions you have added to a patient using `patient view`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format `patient add presc i/PATIENT_INDEX m/MED_INDEX d/DOSAGE`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* MED_INDEX refers to the index of a medicine (obtained using `med list` or `med find`)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the prescription can be found in the patient\u0027s list of prescriptions, then it will not be added."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient add presc i/1 m/2 d/20mg 3 times a day` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Adds prescription of the medicine of index 2 (in the list of medicines) with a dosage of 20mg 3 times a day to the patient at index 1 in list of patients."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d Editing a Patient\u0027s Prescription `patient edit presc`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "You can edit a patient\u0027s prescription using `patient add presc`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "You can view a patient\u0027s list of prescriptions using `patient view`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format `patient edit presc i/PATIENT_INDEX pr/PRESCRIPTION_INDEX [m/MED_INDEX] [d/DOSAGE]`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* MED_INDEX refers to the index of a medicine (obtained using `med list` or `med find`)."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Existing values will be updated to input values."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient edit presc i/1 pr/3 d/10mg 2 times a day` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Edits the prescription with index 3 of the patient at index 1 in list of patients, changing the dosage to \"10mg 2 times a day\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Removing an Prescription from a Patient `patient rm presc`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can remove a prescription to a patient using `patient rm presc`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can view the list of prescriptions of a patient using `patient view`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format `patient rm presc i/PATIENT_INDEX pr/PRESCRIPTION_INDEX`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PRESCRIPTION_INDEX refers to the index of a prescription (obtained using `patient view`)."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the prescription can be found in the patient\u0027s list of prescriptions, then it will be removed."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient rm presc i/1 pr/2` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Removes the 2nd prescription of the patient of index 1."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding an Appointment to a Patient `patient add appt` [INCOMPLETE UG]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//Can be based off adding \u0026 removing of prescriptions"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Removing an Appointment from a Patient `patient rm appt` [INCOMPLETE UG]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//Can be based off adding \u0026 removing of prescriptions"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Assigning a Todo Template to a Patient `patient set todoform` [INCOMPLETE UG]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//Can be based off adding \u0026 removing of medcon, but this is setting because a patient can only have 0..1 todo templates"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Unassigning a Todo Template from a Patient `patient unset todoform` [INCOMPLETE UG]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//Can be based off adding \u0026 removing of medcon, but this is unsetting because a patient can only have 0..1 todo templates"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding an extra Todo to a Patient `patient add todo`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add an extra todo item to the patient\u0027s visit todo list using `patient add todo`. This extra todo item will be added to the patient\u0027s list of extra todos."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "crazoter"
        },
        "content": "For more information on the differences between a patient\u0027s todo list template and extra todos, Refer to \u003c\u003cVisits\u003e\u003e for more elaboration."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `patient add todo i/PATIENT_INDEX t/TODO`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient add todo t/Check fridge for spoiled items` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Adds a todo item \"Check fridge for spoiled items\" to the extra todo items list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Removing an extra Todo from a Patient `patient rm todo`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can remove an extra todo item from the patient\u0027s visit todo list using `patient rm todo`."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `patient rm todo i/PATIENT_INDEX t/TODO_INDEX`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* TODO_INDEX refers to the index of a todo item (obtained using `patient view`)."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the todo item can be found in the patient\u0027s list of todo items, then it will be removed."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient rm todo i/1 t/2` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Removes the 2nd todo item of the patient of index 1."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a note to a Patient `patient add note`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a note to the patient\u0027s list of notes using `patient add note`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "crazoter"
        },
        "content": "These notes are for you to take general notes on a patient. If you want to take notes on a specific visit / while you are visiting the patient, you will want to make an appointment with `patient add appt`, begin the appointment using `appt begin` and add details to the visit."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `patient add note i/PATIENT_INDEX t/NOTE`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `patient add note t/Check fridge for spoiled items` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Adds a todo item \"Check fridge for spoiled items\" to the notes list."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Removing a note from a Patient `patient rm note`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can remove a note from the patient\u0027s list of notes using `patient rm note`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `patient rm note i/PATIENT_INDEX t/NOTE_INDEX`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* PATIENT_INDEX refers to the index of a patient (obtained using `patient list` or `patient find`)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* NOTE_INDEX refers to the index of a note (obtained using `patient view`)."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the note can be found in the patient\u0027s list of notes, then it will be removed."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `patient rm note i/1 t/2` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Removes the 2nd note of the patient of index 1."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d Medical Conditions"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Medical Conditions*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often have to keep track of your patients\u0027 medical conditions. This section describes the features that will allow you to manage the full list of medical conditions, as well as the list of medical conditions of a patient."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Medical Conditions: `medcon list`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all medical conditions in the app by typing `medcon list`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medical condition will have an *index* number which can then be used for other features that require you to select a medical condition by *index* e.g. `medcon delete`. Take note that a medical condition will be given the same *index* regardless of other display commands such as `medcon find`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon list`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Medical Condition(s): `medcon find`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find medical conditions that fit the parameters given using `medcon find`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medical condition will have an *index* number which can then be used for other features that require you to select a medical condition by *index* e.g. `medcon delete`. Take note that a medical condition will be given the same *index* regardless of other display commands such as `medcon list` or if different parameters are used."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `medcon find [KEYWORD] [n/NAME] [s/SYMPTOMS] [d/DIAGNOSIS] [t/TREATMENT]`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* The search is case insensitive. e.g `asthma` will match `Asthma`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/Diabetes` will return `Diabetes, Type 1` and `Diabetes, Type 2`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* If KEYWORD is specified, will attempt search all fields for a match for KEYWORD."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `medcon find asthma` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Returns all medical conditions with the keyword `asthma` in it"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `medcon find` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Returns all medical conditions in the application database"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Medical Condition: `medcon view`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a medical condition\u0027s full details using `medcon view`. The medical condition is selected by their *index*."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon view INDEX`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the medical condition at the specified `INDEX`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`medcon view 1`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of medical conditions."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon view 2`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Medical Condition: `medcon add`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a medical condition to the list of all conditions by using `medcon add`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `medcon add n/NAME s/SYMPTOMS d/DIAGNOSIS t/TREATMENT`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * All fields must be specified."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * `medcon add n/Diabetes, Type 1 s/Increased thirst, frequent urination, extreme hunger, unexplained weight loss"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    d/A1C test, blood sugar test, oral glucose test t/Insulin injections, insulin pump, blood sugar monitoring,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    carbohydrate counting`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Medical Condition: `medcon edit`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing medical condition in the app using `medcon edit`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `medcon edit INDEX [n/NAME] [s/SYMPTOMS] [d/DIAGNOSIS] [t/TREATMENT]`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Edits the medical condition at the specified `INDEX`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " `medcon edit 3 s/increased hunger, increased thirst, weight loss, frequent urination, blurry vision, extreme fatigue, sores that don’t heal` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Edits the symptoms of the medical condition with index 3."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Medical Condition: `medcon delete`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medical condition by *index* using `medcon delete`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon delete INDEX`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medical condition at the specified `INDEX`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`medcon delete 2` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medical condition in the medical condition list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon delete 1` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the medical condition which had been assigned the index 1."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Medical Conditions: `medcon delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medical condition by *indexes* using `medcon delete`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medical condition at the specified `INDEX` es. You can put in as many indexes to delete as many medical conditions as you wish."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`medcon delete 2` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medical condition in the medical condition list."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon delete 1 2` +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd medical conditions with which had been assigned the 1.command."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Medicines [Parameters not updated]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Medicines*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often come across and use various medicines. This section describes the features that will allow you to manage the list of medicines and their information in the application."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Medicines: `med list`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all medicines in the app by typing `med list`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medicine will have an *index* number which can then be used for other features that require you to select a medicine by *index* e.g. `med delete`. Take note that a medicine will be given the same *index* regardless of other display commands such as `med find`."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med list`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Medicine(s): `med find`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find medicines that fit the parameters given using `med find`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medicine will have an *index* number which can then be used for other features that require you to select a medicine by *index* e.g. `med delete`. Take note that a medicine will be given the same *index* regardless of other display commands such as `med list` or if different parameters are used."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `med find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `med find panadol` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Returns all medicines with the keyword `panadol` in it"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Medicine: `med view`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a medicine\u0027s full details using `med view`. The medicine is selected by their *index*."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med view INDEX`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the medicine at the specified `INDEX`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`med view 1`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of medicines."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med view 2`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sandydays"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Medicine: `med add`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a medicine to the list of all medicines by using `med add`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med add pn/MEDICINE_NAME pi/MEDICINE_IC p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​ [kn/NOK_NAME] [kp/NOK_PHONE_NUMBER] [ka/NOK_ADDRESS] [ke/NOK_EMAIL] [imp/PRIORITY]`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A medicine can have any number of tags."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A medicine can have next-of-kin contact details."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Every medicine is uniquely identified by their IC."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Priority can take values from 0 to 10."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `med add n/John Doe pi/S7012255C p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `med add n/Choong Siew Hwang pi/S7015376D p/91239876 a/22 College Avenue East; Singapore 138608 e/cho0ng@email.com t/Big kn/Choong Tee Ling kp/85639274 ka/10 Buangkok View, Singapore 534194 ke/ch1ng@email.com`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `med add n/Betsy Crowe pi/S0011239X t/friend e/betsycrowe@example.com a/Newgate Prison p/12345678 t/criminal imp/4`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Medicine: `med edit`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing medicine in the app using `med edit`."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire medicine\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the name of the 2nd person with the index 1.Crower` and clears all existing tags."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Medicine: `med delete`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medicine by *index* using `med delete`."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med delete INDEX`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medicine at the specified `INDEX`."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`med delete 2` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medicine in the medicine list."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med delete 1` +"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the medicine which had been assigned the index 1."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Medicines: `med delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medicine by *indexes* using `med delete`."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medicine at the specified `INDEX` es. You can put in as many indexes to delete as many medicines as you wish."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`med delete 2` +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medicine in the medicine list."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med delete 1 2` +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd medicines which had been assigned the index 1."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Appointments [Parameters not updated]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Appointments*"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often make home visits to your patients. and keep track of these appointments you make with your patients. You can use the application to manage and keep track of these appointments. This section describes the features that will allow you to manage your appointments."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Appointments: `appt list`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all appointments in the app by typing `appt list`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each appointment will have an *index* number which can then be used for other features that require you to select an appointment by *index* e.g. `appt delete`. Take note that an appointment will be given the same *index* regardless of other display commands such as `appt find`."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt list`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Appointment(s): `appt find`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find appointments that fit the parameters given using `appt find`."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each appointment will have an *index* number which can then be used for other features that require you to select an appointment by *index* e.g. `appt delete`. Take note that an appointment will be given the same *index* regardless of other display commands such as `appt list` or if different parameters are used."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `appt find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `appt find n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Lists all appointments of that particular patient"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing an Appointment: `appt view`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see an appointment\u0027s full details using `appt view`. The appointment is selected by their *index*."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt view INDEX`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the appointment at the specified `INDEX`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt view 1`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of appointments."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt view 2`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing the next earliest Appointments: `appt next`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can list the next earliest appointments using `appt next`."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt next NUMBER`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt next 3` +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Displays the next 3 earliest appointments sorted by time."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing an Appointment: `appt edit`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing appointment in the app using `appt edit`."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire appointment\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the name of the 2nd person with the index 1.`Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting an Appointment: `appt delete`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete an appointment by *index* using `appt delete`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt delete INDEX`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the appointment at the specified `INDEX`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt delete 2` +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd appointment in the appointment list."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt delete 1` +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the appointment which had been assigned the index 1."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Beginning an Appointment: `appt begin`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can begin an appointment (i.e. begin a house visit) by *index* using `appt begin`."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt begin INDEX`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "crazoter"
        },
        "content": "OR"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you want to begin the next appointment that you will have, you can begin the next appointment using `appt begin next`."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Begins the appointment at the specified `INDEX` if using `INDEX`. If using `appt begin next`, begins the next appointment (the appointment that will happen the soonest)."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Beginning an appointment converts it into a visit. This allows you to use the visit\u0027s todo list as well as add details to the visit, before finally archiving the visit by marking it as finished using `visit finish`."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The appointment you are beginning must start within the next 3 hours (you cannot begin an appointment too early in advance)."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When you begin an appointment, the visit time will be updated using your system clock to reflect the actual start of the visit."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt next 2` +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt begin 2` +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Begins the 2nd earliest appointment (as shown by `appt next 2`)."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt begin next` +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Begins the next earliest appointment."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Appointments: `appt delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete an appointment by *indexes* using `appt delete`."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the appointment at the specified `INDEX` es. You can put in as many indexes to delete as many appointments as you wish."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt delete 2` +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd appointment in the appointment list."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt delete 1 2` +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd appointments which had been assigned the index 1."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Visits [Parameters not updated]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Visits*"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often make home visits to your patients. When you are visiting a patient, there is often a todo list that you will have to do as well as information that you will have to record. You can use the application to mark the items you have done in a visit and add further details and notes about a visit (e.g. about a patient\u0027s symptoms). This section describes the features that will allow you to keep track of what you have to do during a visit and manage previous visits."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Adding of Visits is unallowed in the app because a community nurse should make an appointment with the patient before making a visit."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Visits: `visit list`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all visits in the app by typing `visit list`."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each visit will have an *index* number which can then be used for other features that require you to select a visit by *index* e.g. `visit delete`. Take note that a visit will be given the same *index* regardless of other display commands such as `visit find`."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit list`"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Visit(s): `visit find`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find visits that fit the parameters given using `visit find`."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each visit will have an *index* number which can then be used for other features that require you to select a visit by *index* e.g. `visit delete`. Take note that a visit will be given the same *index* regardless of other display commands such as `visit list` or if different parameters are used."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `visit find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `visit find n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Finds all visits with this patient"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Visit: `visit view`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a visit\u0027s full details using `visit view`. The visit is selected by their *index*."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit view INDEX`"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the visit at the specified `INDEX`."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of visits displayed by `visit list` or `visit find`."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit list` +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`visit view 1`"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of visits."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit view 2`"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing the current Visit: `visit now`"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you are currently visiting a patient, you can see the current visit\u0027s full details using `visit now`."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit now`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Set details of a Todo Item of current Visit: `visit now todo note`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can set the details of a todo item of a current visit using `visit now todo note`."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, some todo items require you to record some details (e.g. a todo item of \"take blood pressure\" would require you to record the blood pressure). If the index of the todo note is 2, you can do something like `visit now todo note t/2 n/120 over 80 mm HG`."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit now todo note t/INDEX n/NOTE`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Mark a Todo Item of current Visit as done: `visit now todo done`[INCOMPLETE UG]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//By index"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Add a note to the current Visit: `visit now add note`[INCOMPLETE UG]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//Add a generic note to the current visit"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Remove a note from the current Visit: `visit now rm note`[INCOMPLETE UG]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finishing a Visit: `visit finish`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have just finished your home visit to a patient, you can mark the visit as finished using `visit finish`."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit finish`."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Visit: `visit delete`"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a visit by *index* using `visit delete`."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit delete INDEX`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the visit at the specified `INDEX`."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of visits displayed by `visit list` or `visit find`."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit list` +"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`visit delete 2` +"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd visit in the visit list."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit delete 1` +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the visit which had been assigned the index 1."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Visits: `visit delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a visit by *indexes* using `visit delete`."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the visit at the specified `INDEX` es. You can put in as many indexes to delete as many visits as you wish."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of visits displayed by `visit list` or `visit find`."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit list` +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`visit delete 2` +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd visit in the visit list."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit delete 1 2` +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd visits which had been assigned the index 1."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Todo Templates [Parameters not updated]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Todo Templates*"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often use a todo list to keep track of things that you have (and have not) done during a visit. It is tedious, however, to add multiple things to do / take note of for every patient; in fact, there may be many duplicated items."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "crazoter"
        },
        "content": "To simplify the process, you can create a reusable checklist that you can then assign to your patients. We call this reusable checklist a \"todo template\" This section describes the features that will allow you to streamline the management of todo templates of your patients."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Todo Templates: `todoform list`"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all todo templates in the app by typing `todoform list`."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each todo template will have an *index* number which can then be used for other features that require you to select a todo template by *index* e.g. `todoform delete`. Take note that a todo template will be given the same *index* regardless of other display commands such as `todoform find`."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform list`"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Todo Template(s): `todoform find`"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find todo templates that fit the parameters given using `todoform find`."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each todo template will have an *index* number which can then be used for other features that require you to select a todo template by *index* e.g. `todoform delete`. Take note that a todo template will be given the same *index* regardless of other display commands such as `todoform list` or if different parameters are used."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]` e.g. `todoform find n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Todo Template: `todoform view`"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a todo template\u0027s full details using `todoform view`. The todo template is selected by their *index*."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform view INDEX`"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the todo template at the specified `INDEX`."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of todo templates displayed by `todoform list` or `todoform find`."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform list` +"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`todoform view 1`"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of todo templates."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform view 2`"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Todo Template: `todoform add`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a todo template to the list of all templates by using `todoform add`."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform add pn/PRESCRIPTION_NAME pi/PRESCRIPTION_IC p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​ [kn/NOK_NAME] [kp/NOK_PHONE_NUMBER] [ka/NOK_ADDRESS] [ke/NOK_EMAIL] [imp/PRIORITY]`"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * a todo template can have any number of tags."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * a todo template can have next-of-kin contact details."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Every todo template is uniquely identified by their IC."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Priority can take values from 0 to 10."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `todoform add n/John Doe pi/S7012255C p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `todoform add n/Choong Siew Hwang pi/S7015376D p/91239876 a/22 College Avenue East; Singapore 138608 e/cho0ng@email.com t/Big kn/Choong Tee Ling kp/85639274 ka/10 Buangkok View, Singapore 534194 ke/ch1ng@email.com`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `todoform add n/Betsy Crowe pi/S0011239X t/friend e/betsycrowe@example.com a/Newgate Prison p/12345678 t/criminal imp/4`"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Todo Template: `todoform edit`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing todo template in the app using `todoform edit`."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of todo templates displayed by `todoform list` or `todoform find`."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform list` +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire todo template\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the name of the 2nd person with the index 1.`Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Todo Template: `todoform delete`"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a todo template by *index* using `todoform delete`."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform delete INDEX`"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the todo template at the specified `INDEX`."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of todo templates displayed by `todoform list` or `todoform find`."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform list` +"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`todoform delete 2` +"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd todo template in the todo template list."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform delete 1` +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the todo template which had been assigned the index 1."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Todo Templates: `todoform delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a todo template by *indexes* using `todoform delete`."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `todoform delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the todo template at the specified `INDEX` es. You can put in as many indexes to delete as many todo templates as you wish."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of todo templates displayed by `todoform list` or `todoform find`."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform list` +"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`todoform delete 2` +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd todo template in the todo template list."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `todoform delete 1 2` +"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd todo templates with which had been assigned the 1.command."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Autocomplete"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Autocomplete*"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will be performing several commands through the Command Line Interface (CLI). In order to speed up the process, the application includes an autocomplete feature that allows you to more quickly and conveniently input your commands and parameters. This section describes the feature in further detail."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Data Saving, Undo, Redo"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Data Saving, Undo, Redo*"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often perform commands that modify information managed by the application (e.g. patient data). This section describes the features involving the storage of this data and features involving undo-ing / redo-ing commands."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Saving your data"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Your data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Undoing a command: `undo`"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can undo the changes of the last executed command that alters data using `undo`."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Up to the last 3(?) commands can be undone."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The command `undo` itself cannot be undone."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Redoing an undone command: `redo`"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can redo and reapply the changes of the last undone command using `redo`."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Can only be used if the last data altering command is `undo`."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Up to the last 3(?) undone commands can be redone."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Importing and Exporting of Patient Data"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Importing and Exporting of Patient Data*"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you may be assigned new patients, or some of your patients may be assigned to other community nurses. To facilitate the transferring of patient information from one device to another, you can import and export the data of your patients. This section describes the features that will allow you to import and export patient information."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Importing patient data from a CSV file: `import`"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can import patient data from a .csv file into the application using `import`."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Only the file format .csv is supported."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The application will look for filename.csv in the ./import folder."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Imported data can either replace or be combined with existing data."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The .csv file must adhere to the following format: `example.csv`."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `import [flag]/filename.csv` +"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\t `flag: r/ (replace) or c/ (combine)`"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `import r/my_patients.csv`"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `import c/my_new_patients.csv`"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Exporting data into .csv: `export`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can export patient data from the application into a .csv file using `export`."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Only the file format .csv is supported."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Creates filename.csv in the ./export folder"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Exported data will be in the following format: example.csv"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Patient data can be selectively exported (?)"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `export filename.csv [flag?] [num...]` +"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\t `flag: r/(range) or i/(indexes)`"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `export patients.csv`"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `export patients.csv r/5 10`"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `export patients.csv i/2 4 6 7 10`"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Notifications"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Notifications*"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often have deadlines to meet or appointments for home visits. You can schedule the application to notify you for these deadlines/events. This section describes the features that will allow you to manage such notifications."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Enabling the Notifications `notif enable`"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can enable notifications for upcoming appointments using `notif enable`."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif enable`"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Disabling the Notifications `notif disable`"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can disable notifications for upcoming appointments using `notif disable`."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif disable`"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Setting the Notification Time ahead of Appointments: `notif apptalert`"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "By default, the application will prompt a notification 30 minutes before any of your appointments. You can change that using `notif apptalert`."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif apptalert m/MINUTES_BEFORE_APPOINTMENT`"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The application will prompt a notification `MINUTES_BEFORE_APPOINTMENT` minutes before any of your appointments."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `MINUTES_BEFORE_APPOINTMENT` is 30 minutes by default."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing all Notifications: `notif list`"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see the list of your notifications using `notif list`."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif list`"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Notification(s): `notif find`"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find notifications that fit the parameters given using `notif find`."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each notification will have an *index* number which can then be used for other features that require you to select a notification by *index* e.g. `notif delete`. Take note that a notification will be given the same *index* regardless of other display commands such as `notif find` or if different parameters are used."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif find [n/NAME] [b/BODY] [d/DATE(DD-MM-YYYY)] [t/TIME(HH:mm)]`"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Notification: `notif add`"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add your own notifications (that are not attached to any appointments) using `notif add`."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif add n/NAME b/BODY d/DATE(DD-MM-YYYY) t/TIME(HH:mm)`"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Example: `notif add n/Call Terry b/Remind Terry to take his medicine d/23-03-2019 t/13:00`"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Notification: `notif delete`"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a notification by *index* using `notif delete`."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif delete INDEX`"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the notification at the specified `INDEX`."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of notifications displayed by `notif list` or `notif find`."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Notifications that were added because of an appointment can be deleted."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `notif list` +"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`notif delete 2` +"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd notification in the notification list."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `notif delete 1` +"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the notification which had been assigned the index 1."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Login System \u0026 Security"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Login System \u0026 Security*"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often be managing your patients\u0027 confidential data. A login system will be useful in helping you to ensure the confidentiality and security of your patients\u0027 information. This section describes the features that will allow you to manage this security system."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Enabling the Login System `login enable`"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you haven\u0027t setup a login PIN, you can enable the login system by setting a login pin using `login enable`."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login enable PIN`"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The PIN is a series of 6 alphanumeric characters (case sensitive)."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Disabling the Login System `login disable`"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can disable the login system using `login disable`."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login disable CURRENT_PIN`"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * CURRENT_PIN refers to the PIN that you use to login."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * CURRENT_PIN is a series of 6 alphanumeric characters (case sensitive)."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Changing the Login Pin `login changepin`"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can change the pin using `login changepin`."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login changepin o/OLD_PIN n/NEW_PIN`"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * OLD_PIN refers to the PIN that you use to login."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * NEW_PIN refers to the new PIN that you want to use in the future."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * OLD_PIN and NEW_PIN are a series of 6 alphanumeric characters (case sensitive)."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Locking the Application `login lock`"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can lock the application using `login lock`."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login lock`"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Changing Login Lock Timeout `login timeout`"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can change the amount of time (in minutes) before the system automatically locks the application using `login timeout`."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login timeout MINUTES`"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Example: `login timeout 3` will configure the system to automatically lock the application after 3 minutes."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Logging in / Unlocking the Application"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "crazoter"
        },
        "content": "On the lock screen you will be prompted to enter your PIN. Once you enter the correct and press kbd:[Enter], the application will unlock."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Data Encryption `[coming in v2.0]`"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The save files of the application will be automatically encrypted using your PIN."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can exit the program using `exit`. +"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d FAQ"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 61,
      "sandydays": 32,
      "crazoter": 1176,
      "-": 98
    }
  },
  {
    "path": "docs/team/cheongsiuhong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Cheong Siu Hong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/crazoter.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Lee Wei Ren Matthew - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/francislow.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Francis Low Siu Yuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/gabrielchao.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Chao Fang How, Gabriel - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/sandydays.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Ramachandran Sandhya - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/autocomplete/AutoCompleteWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents an autocomplete word in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private String suggestedWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteWord(String suggestedWord) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.suggestedWord \u003d suggestedWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getSuggestedWord() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return suggestedWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/autocomplete/AutoCompleteWordHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": " * A handler that initialises autocomplete word bank and updates list of autocomplete words to be shown"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteWordHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AutoCompleteWordHandler.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e oListAutoCompleteWords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e oListAutoCompleteWordBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteWordHandler() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.oListAutoCompleteWordBank \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Add command suggestion words"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "        addCommandWordsToBank();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "        /*// Add variable suggestion words"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "        addPrefixToBank();*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.oListAutoCompleteWords \u003d FXCollections.observableArrayList(oListAutoCompleteWordBank);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Add command words to list of all suggested words"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void addCommandWordsToBank() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"list\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"find\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"delete\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"add\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"import-replace\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"export-all\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oListAutoCompleteWordBank.add(new CommandWord(\"history\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /*public void addPrefixToBank() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListACWordBank.add(new PrefixWord(\"import\", \"r/\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListACWordBank.add(new PrefixWord(\"import\", \"c/\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e getOListAutoCompleteWords() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return oListAutoCompleteWords;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Update list of autocomplete words to be suggested according to current phrase in command box textfield"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param currentPhraseInCommandBox string in command box textfield"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void updateList(String currentPhraseInCommandBox) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAutoCompleteWords.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": "        for (AutoCompleteWord autoCompleteWord : oListAutoCompleteWordBank) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (autoCompleteWord.getSuggestedWord().contains(currentPhraseInCommandBox)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "                oListAutoCompleteWords.add(autoCompleteWord);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": "        logger.info(\"Current number of suggested word is \" + oListAutoCompleteWords.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "cheongsiuhong": 2,
      "francislow": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/autocomplete/CommandWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents an autocomplete command word(eg: find, sort, delete) in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class CommandWord extends AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public CommandWord(String suggestionWord) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/autocomplete/KeyWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents a key word(eg: patient ic, patient name) in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class KeyWord extends AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public KeyWord(String suggestionWord) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/autocomplete/PrefixWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents a prefix word(eg: n/, t/) in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class PrefixWord extends AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private String associatedCommandWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public PrefixWord(String associatedCommandWord, String suggestionWord) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.associatedCommandWord \u003d associatedCommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getAssociatedCommandWord() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return associatedCommandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/CopyError.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Represents an error during the copying of data. This is a fatal error and cannot be caught with try-catch."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CopyError extends Error {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CopyError(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CopyError(Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CopyError(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if {@code item A} items are equal to {@code item B}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean checkEqual(Collection\u003c?\u003e itemA, Collection\u003c?\u003e itemB) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(itemA, itemB);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Iterator itemBIterator \u003d itemB.iterator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Object obj : itemA) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!itemBIterator.hasNext()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    || !obj.equals(itemBIterator.next())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String representation of {@code items} with each element separated"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * by a newline."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cE\u003e String collectionToString(Collection\u003cE\u003e items) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (E item : items) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(item.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (sb.length() !\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 16,
      "crazoter": 16,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CopyUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Deep copies an object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CopyUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param instance  the object to copy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  the generic type of the object to copy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws CopyError  if an error occurs while copying"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cT\u003e T deepCopy(T instance) throws CopyError {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (instance instanceof Serializable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return (T) deepCopySerializable((Serializable) instance);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return deepCopyGeneric(instance);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified object. The copy is performed by using Jackson to serialize and then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * deserialize the target object. Jackson may have issues with some classes so"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link #deepCopySerializable(Serializable)} is preferred if the object is {@link Serializable}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param instance  the object to copy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  the generic type of the object to copy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws CopyError  if an error occurs while copying"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static \u003cT\u003e T deepCopyGeneric(T instance) throws CopyError {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return (T) JsonUtil.fromJsonString(JsonUtil.toJsonString(instance), instance.getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CopyError(\"Error copying object\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified serializable object. The copy is performed by serializing the target object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * with a stream and then deserializing it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param serializable  the object to copy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  class that implements Serializable"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws CopyError  if an error occurs while copying"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static \u003cT extends Serializable\u003e T deepCopySerializable(T serializable) throws CopyError {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oos.writeObject(serializable);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ByteArrayInputStream bais \u003d new ByteArrayInputStream(baos.toByteArray());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(bais);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return (T) ois.readObject();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CopyError(\"Error copying serializable object\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified {@code ObservableList}. The copy is identical to the original except for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the listeners which will not be carried over. Any changes to the copied list or its elements will not affect"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the original and vice versa."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cE\u003e ObservableList\u003cE\u003e deepCopyOfObservableList(ObservableList\u003cE\u003e list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cE\u003e listCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (E item : list) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            listCopy.add(deepCopy(item));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return FXCollections.observableArrayList(listCopy);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/VisitTaskUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.Detail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Helper class for Visit Todos"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTaskUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a list of Visit Tasks from a patient object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cVisitTask\u003e listFromPatient(Person patient) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient.getVisitTodos().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(VisitTaskUtil::newTaskFromTodo)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create a new VisitTask from a VisitTodo object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static VisitTask newTaskFromTodo(VisitTodo todo) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTask(todo, new Detail(\"\"), false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/VisitUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Helper class for Visit Todos"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get ongoing visit if exists. For Visit Commands that require an ongoing visit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Throws a CommandException if the ongoingVisit is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Visit getOngoingVisitIfExists(Model model, String messageNoOngoingVisit)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(model, messageNoOngoingVisit);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e ongoingVisit \u003d model.getOngoingVisit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (ongoingVisit.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(messageNoOngoingVisit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ongoingVisit.get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/export/CsvUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.core.JsonGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.databind.MappingIterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.storage.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Reads and writes Java based Person objects to and fro .csv files"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    // Temporary static file paths"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final Path exportFilePath \u003d Paths.get(\"exports/export.csv\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final Path importFilePath \u003d Paths.get(\"imports/import.csv\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Writing/Export functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Writes a list of Persons into a .csv file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param persons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static void writePersonsToCsv(List\u003cPerson\u003e persons) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.createIfMissing(exportFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(exportFilePath, getCsvStringFromPersons(persons));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Converts a List of person objects into a String to be written into a .csv file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param persons"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @return csv friendly string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws JsonProcessingException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static String getCsvStringFromPersons(List\u003cPerson\u003e persons) throws JsonProcessingException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        mapper.configure(JsonGenerator.Feature.IGNORE_UNKNOWN, true)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                .addMixIn(JsonAdaptedPerson.class, PersonMixIn.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvSchema schema \u003d mapper.schemaFor(JsonAdaptedPerson.class).withHeader().withArrayElementSeparator(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ObjectWriter writer \u003d mapper.writer(schema);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return writer.writeValueAsString(convertToCsvAdaptedList(persons));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Converts a list of Person objects to a list of Jackson .csv friendly objects"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param persons"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @return csv adapted persons"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static List\u003cJsonAdaptedPerson\u003e convertToCsvAdaptedList(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cJsonAdaptedPerson\u003e csvAdaptedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            csvAdaptedList.add(convertToCsvAdaptedPerson(person));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return csvAdaptedList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Converts a Person object to a Jackson .csv friendly object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @return JsonAdaptedPerson"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static JsonAdaptedPerson convertToCsvAdaptedPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new JsonAdaptedPerson(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reading/Import functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Reads data from a .csv file and converts it to a list of {@Code Person} objects"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @return a list of persons"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws IllegalValueException if illegal values exist in the .csv file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static List\u003cPerson\u003e readPersonsFromCsv() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        mapper.addMixIn(JsonAdaptedPerson.class, PersonMixIn.class)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                .enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvSchema schema \u003d mapper.schemaFor(JsonAdaptedPerson.class)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .withHeader()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .withArrayElementSeparator(\"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        MappingIterator\u003cJsonAdaptedPerson\u003e iter \u003d mapper.readerFor(JsonAdaptedPerson.class)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .with(schema)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .readValues(importFilePath.toFile());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cJsonAdaptedPerson\u003e importedCsvPersons \u003d iter.readAll();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return convertImportedPersonsToPersonList(importedCsvPersons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Converts a {@Code JsonAdaptedPerson} read from a csv file into a {@Code Person} object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static Person convertToPerson(JsonAdaptedPerson person) throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return person.toModelType();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Converts a list of {@Code JsonAdaptedPerson} objects read from a csv file"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * into a list of {@Code Person} objects"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static List\u003cPerson\u003e convertImportedPersonsToPersonList(List\u003cJsonAdaptedPerson\u003e persons)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cPerson\u003e newPersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (JsonAdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            newPersonList.add(convertToPerson(person));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return newPersonList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/export/PersonMixIn.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.storage.JsonAdaptedVisit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.storage.JsonAdaptedVisitTodo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Additional Jackson annotations specific for csv Person parsing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "abstract class PersonMixIn {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Visit fields are nested beyond two layers and cannot properly be represented in .csv"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private List\u003cJsonAdaptedVisitTodo\u003e visitTodos;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private List\u003cJsonAdaptedVisit\u003e visits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @see seedu.address.model.Model#getStagedAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    FilteredList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the list of ongoing visits."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The current constraint is to only have 1 ongoing visit at any time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cVisit\u003e getObservableOngoingVisitList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 9,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String STAGED_BUT_NOT_MUTATOR_ERROR_MESSAGE \u003d \"Command attempted to make changes but is not a \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"MutatorCommand\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (command instanceof MutatorCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (!model.hasStagedChanges()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                logger.info(\"Command \" + command + \" is a MutatorCommand but did not stage changes\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                model.commit((MutatorCommand) command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (model.hasStagedChanges()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                model.discardStagedChanges();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                logger.severe(\"Command \" + command + \" staged changes but is not a MutatorCommand.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        + \" Changes discarded.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                throw new CommandException(STAGED_BUT_NOT_MUTATOR_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            storage.saveAddressBook(model.getStagedAddressBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return model.getStagedAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FilteredList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cVisit\u003e getObservableOngoingVisitList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return model.getObservableOngoingVisitList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 20,
      "crazoter": 8,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class AddCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_PATIENT_VISIT_TODO + \"VISIT_TODO]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_PATIENT_VISIT_TODO + \"Check blood pressure \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_PATIENT_VISIT_TODO + \"Check if patient has been drinking\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 5,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ClearCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model.setStagedAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeleteCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_HAS_ONGOING_VISIT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \"Person still has an ongoing visit. Please finish the visit before executing this operation.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cPerson\u003e fullPatientList \u003d model.getStagedPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d fullPatientList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person personToDelete \u003d fullPatientList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (model.patientHasOngoingVisit(personToDelete)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_HAS_ONGOING_VISIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "crazoter": 7,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class EditCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_PATIENT_VISIT_TODO + \"VISIT_TODO]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getStagedPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cVisitTodo\u003e updatedVisitTodos \u003d editPersonDescriptor.getVisitTodos()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .orElse(personToEdit.getVisitTodos());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Editing visits with this command is not supported"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisit\u003e updatedVisits \u003d personToEdit.getVisits();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                updatedVisitTodos, updatedVisits);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        private Collection\u003cVisitTodo\u003e visitTodos;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            setVisitTodos(toCopy.visitTodos);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, visitTodos);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * Sets {@code visitTodos} to this object\u0027s {@code visitTodos}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * A defensive copy of {@code visitTodos} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setVisitTodos(Collection\u003cVisitTodo\u003e visitTodos) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visitTodos \u003d (visitTodos !\u003d null) ? new LinkedHashSet\u003c\u003e(visitTodos) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * Returns an unmodifiable visitTodo collection, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code visitTodos} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Optional\u003cCollection\u003cVisitTodo\u003e\u003e getVisitTodos() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return (visitTodos !\u003d null) ? Optional"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .of(Collections.unmodifiableCollection(visitTodos)) : Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (getVisitTodos().isEmpty() \u003d\u003d e.getVisitTodos().isEmpty()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //If both collections populated, ensure equal data"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (getVisitTodos().isPresent()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    //Verify visit todos separately because .equals doesn\u0027t work with Collection\u003c\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    if (!CollectionUtil.checkEqual(getVisitTodos().get(), e.getVisitTodos().get())) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //One empty, one populated, different"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "crazoter": 46,
      "-": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.export.CsvUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Exports all Person data from the AddressBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ExportAllCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export-all\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Export success!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Export failed.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * v1.2 implementation: export all persons on the currently shown list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getStagedPersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            CsvUtil.writePersonsToCsv(lastShownList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.collectionToString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.model.HistoryRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Displays the application data-changing command history to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"History shown.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e history \u003d model.getHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new CommandResult(String.format(\"There are %d records in the history:\\n%s\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                history.size(), collectionToString(history)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportReplaceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.export.CsvUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Imports data from a csv file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Replaces ALL data in the address book with the imported data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportReplaceCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import-replace\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Import success!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Import failed.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_INVALID_CSV \u003d \"Invalid fields in csv file.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cPerson\u003e importedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            importedPersons.addAll(CsvUtil.readPersonsFromCsv());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CSV);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        model.replaceStagedAddressBook(importedPersons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MutatorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Empty marker interface to indicate that a {@link Command} mutates the model. All data-modifying Commands should"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * implement this interface."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public interface MutatorCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/BeginVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.VisitTaskUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Begins a visit using a patient identified using his/her index in the patient list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class BeginVisitCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-start\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \": Begins a visit for a patient. The patient is identified by the index number used in the patient \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"list displayed using the list or find patient commands.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_PATIENT_INDEX + \"PATIENT_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + PREFIX_PATIENT_INDEX + \"1 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_START_VISIT_SUCCESS \u003d \"Started a new visit under patient: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_START_VISIT_FAILURE \u003d \"There is already an ongoing visit.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public BeginVisitCommand(Index patientIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patientIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (model.getOngoingVisit().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_START_VISIT_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cPerson\u003e fullPatientList \u003d model.getStagedPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Verify Patient Index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d fullPatientList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person patient \u003d fullPatientList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Begin Visit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d new Visit("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new Remark(\"\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new StartDateTime(now),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                EndDateTime.UNFINISHED_VISIT_END_DATE_TIME,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTaskUtil.listFromPatient(patient), patient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patient.addVisit(visit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.setNewOngoingVisit(visit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_START_VISIT_SUCCESS, patient));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof BeginVisitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patientIndex.equals(((BeginVisitCommand) other).patientIndex)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/FinishOngoingVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.VisitUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Mark the current on-going visit as finished and put it aside."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class FinishOngoingVisitCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-end\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finished current visit!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_VISIT \u003d \"There is no ongoing visit to finish.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitUtil.getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.unsetOngoingVisit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/ShowOngoingVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.VisitUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Show the current on-going visit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ShowOngoingVisitCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-now-show\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed current visit:%1$s. Current patient: %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_VISIT \u003d \"There is no ongoing visit to show.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d VisitUtil.getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Todo: Display UI for ongoing visit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit, visit.getPatient()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/UpdateOngoingVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_REMARKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_TASK_FINISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_TASK_INDEX_AND_DETAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_TASK_UNFINISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.VisitUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Updates the details of the ongoing visit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UpdateOngoingVisitCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-now-update\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the current visit.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"New Visit Tasks cannot be added or removed from an ongoing visit.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Visit Tasks can only be updated but their descriptions cannot be modified.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_TASK_INDEX_AND_DETAIL + \"TASK_INDEX DETAIL]... \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_TASK_FINISH + \"TASK_INDEX]... \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_TASK_UNFINISH + \"TASK_INDEX]... \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_REMARKS + \"REMARKS] \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_UNFINISH + \"1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_INDEX_AND_DETAIL + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_INDEX_AND_DETAIL + \"2 140/90mmHg \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_FINISH + \"2 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_REMARKS + \"Patient may be allergic to bacitracin\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_UPDATE_ONGOING_VISIT_SUCCESS \u003d \"Updated Visit: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_VISIT \u003d \"There is no ongoing visit to update.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_ONGOING_VISIT_NOT_MODIFIED \u003d \"No fields updated.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_INVALID_VISIT_TASK_INDEX \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \"There are no visit tasks that have the index %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final UpdateOngoingVisitDescriptor updateOngoingVisitDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param updateOngoingVisitDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitCommand(UpdateOngoingVisitDescriptor updateOngoingVisitDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.updateOngoingVisitDescriptor \u003d new UpdateOngoingVisitDescriptor(updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!this.updateOngoingVisitDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_ONGOING_VISIT_NOT_MODIFIED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visitToUpdate \u003d VisitUtil.getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit updatedVisit \u003d createUpdated(visitToUpdate, updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitToUpdate.equals(updatedVisit)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_ONGOING_VISIT_NOT_MODIFIED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateOngoingVisit(updatedVisit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_ONGOING_VISIT_SUCCESS, updatedVisit));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates and returns a {@code Visit} with the details of {@code visitToUpdate}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * edited with {@code updateVisitDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static Visit createUpdated(Visit visitToUpdate,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                       UpdateOngoingVisitDescriptor descriptor) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(visitToUpdate, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert visitToUpdate !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Update fields"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Remark updatedRemark \u003d descriptor.getRemark().orElse(visitToUpdate.getRemark());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisitTask\u003e visitTaskList \u003d visitToUpdate.getVisitTasks();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTaskUpdatesMultimap multimap \u003d new VisitTaskUpdatesMultimap();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        multimap.saveTasksFinishedByIndexes(visitTaskList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                descriptor.getUnfinishedVisitTaskIndexes(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTaskUpdatesMultimapKeys.UNFINISH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        multimap.saveTasksFinishedByIndexes(visitTaskList,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                descriptor.getFinishedVisitTaskIndexes(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTaskUpdatesMultimapKeys.FINISH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        multimap.saveTaskDetailsByIndexes(visitTaskList,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                descriptor.getUpdatedVisitTaskDetails());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisitTask\u003e updatedVisitTaskList \u003d multimap.buildUpdatedVisitTasks(visitTaskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Update, so some fields are not changeable"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StartDateTime startDateTime \u003d visitToUpdate.getStartDateTime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EndDateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitToUpdate.getEndDateTime().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime \u003d visitToUpdate.getEndDateTime().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person patient \u003d visitToUpdate.getPatient();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Visit(updatedRemark, startDateTime, endDateTime, updatedVisitTaskList, patient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof UpdateOngoingVisitCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UpdateOngoingVisitCommand e \u003d (UpdateOngoingVisitCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return updateOngoingVisitDescriptor.equals(e.updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/UpdateOngoingVisitDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * corresponding field value of the person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UpdateOngoingVisitDescriptor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cIndex\u003e finishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cIndex\u003e unfinishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cPair\u003cIndex, String\u003e\u003e updatedVisitTaskDetails;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        finishedVisitTaskIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        unfinishedVisitTaskIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updatedVisitTaskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitDescriptor(UpdateOngoingVisitDescriptor toCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toCopy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setFinishedVisitTaskIndexes(toCopy.finishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setUnfinishedVisitTaskIndexes(toCopy.unfinishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setUpdatedVisitTaskDetails(toCopy.updatedVisitTaskDetails);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isAnyFieldUpdated() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || !finishedVisitTaskIndexes.isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || !unfinishedVisitTaskIndexes.isEmpty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || !updatedVisitTaskDetails.isEmpty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cIndex\u003e getFinishedVisitTaskIndexes() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return finishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setFinishedVisitTaskIndexes(List\u003cIndex\u003e finishedVisitTaskIndexes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.finishedVisitTaskIndexes.addAll(finishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cIndex\u003e getUnfinishedVisitTaskIndexes() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return unfinishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUnfinishedVisitTaskIndexes(List\u003cIndex\u003e unfinishedVisitTaskIndexes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.unfinishedVisitTaskIndexes.addAll(unfinishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cPair\u003cIndex, String\u003e\u003e getUpdatedVisitTaskDetails() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return updatedVisitTaskDetails;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUpdatedVisitTaskDetails(List\u003cPair\u003cIndex, String\u003e\u003e updatedVisitTaskDetails) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.updatedVisitTaskDetails.addAll(updatedVisitTaskDetails);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof UpdateOngoingVisitDescriptor)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UpdateOngoingVisitDescriptor e \u003d (UpdateOngoingVisitDescriptor) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getFinishedVisitTaskIndexes(), e.getFinishedVisitTaskIndexes())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getUnfinishedVisitTaskIndexes(), e.getUnfinishedVisitTaskIndexes())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getUpdatedVisitTaskDetails(), e.getUpdatedVisitTaskDetails());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/VisitTaskUpdatesMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.Detail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Package private class that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * RecordsVisitTaskUpdatesMultimap the visit task updates into a multimap so that all changes can be made in one go."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "class VisitTaskUpdatesMultimap {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Map\u003cInteger, Set\u003cObject\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If the map previously contained a mapping for the key,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * the new value is appended to the list of existing values unless it already exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param index Index key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param detail Argument value to be associated with the specified Index key"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void put(Index index, String detail) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Set\u003cObject\u003e values \u003d getAllValues(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        values.add(detail);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        map.put(indexToInt(index), values);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If the map previously contained a mapping for the key,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * the new value is appended to the list of existing values unless it already exists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If a FINISH and UNFINISH exist, UNFINISH will take priority."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param index Index key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param key Argument value to be associated with the specified Index key"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void put(Index index, VisitTaskUpdatesMultimapKeys key) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Set\u003cObject\u003e values \u003d getAllValues(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!values.contains(VisitTaskUpdatesMultimapKeys.UNFINISH)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            values.add(key);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            map.put(indexToInt(index), values);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns all values of {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Set\u003cObject\u003e getAllValues(Index index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!map.containsKey(indexToInt(index))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new HashSet\u003c\u003e(map.get(indexToInt(index)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper function to ensure index.getZeroBased() and not index.getOneBased() is used"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private int indexToInt(Index index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return index.getZeroBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record in a multimap which Visit Tasks finished / unfinished using a list of indexes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void saveTasksFinishedByIndexes("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cVisitTask\u003e taskList,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cIndex\u003e indexList,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            VisitTaskUpdatesMultimapKeys isMarkFinish) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(taskList, indexList, isMarkFinish);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Index targetIndex : indexList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (indexToInt(targetIndex) \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        UpdateOngoingVisitCommand.MESSAGE_INVALID_VISIT_TASK_INDEX,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.put(targetIndex, isMarkFinish);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record in a multimap the details of a VisitTask using a list of indexes."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void saveTaskDetailsByIndexes("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cVisitTask\u003e taskList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cPair\u003cIndex, String\u003e\u003e indexDetailPairList) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(taskList, indexDetailPairList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Pair\u003cIndex, String\u003e indexStringPair : indexDetailPairList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (indexToInt(indexStringPair.getKey()) \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        UpdateOngoingVisitCommand.MESSAGE_INVALID_VISIT_TASK_INDEX,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        indexStringPair.getKey()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.put(indexStringPair.getKey(), indexStringPair.getValue());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Builds and returns an updated visit task list using changes recorded in the multimap."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cVisitTask\u003e buildUpdatedVisitTasks(final List\u003cVisitTask\u003e visitTaskList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTaskList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisitTask\u003e updatedVisitTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c visitTaskList.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            updatedVisitTaskList.add(updateVisitTask(visitTaskList.get(i), i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return updatedVisitTaskList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an updated visit task using changes recorded in the multimap."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VisitTask updateVisitTask(VisitTask visitTask, int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTask);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask result \u003d visitTask;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (map.containsKey(index)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Detail detail \u003d visitTask.getDetail();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            boolean isDone \u003d visitTask.isDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (Object change : map.get(index)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Detail"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (change instanceof String) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    detail \u003d new Detail((String) change);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (change \u003d\u003d VisitTaskUpdatesMultimapKeys.FINISH) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    isDone \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (change \u003d\u003d VisitTaskUpdatesMultimapKeys.UNFINISH) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    isDone \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            result \u003d new VisitTask(visitTask.getVisitTodo(), detail, isDone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/visit/VisitTaskUpdatesMultimapKeys.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Enum of keys that VisitTaskUpdatesMultimap uses to differentiate \"Finish\" and \"Unfinish\" changes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "enum VisitTaskUpdatesMultimapKeys {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    FINISH, UNFINISH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_TAG, PREFIX_PATIENT_VISIT_TODO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cVisitTodo\u003e visitTodos \u003d ParserUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .parseVisitTodos(argMultimap.getAllValues(PREFIX_PATIENT_VISIT_TODO));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, visitTodos,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Person.PLACEHOLDER_NO_VISITS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 9,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import seedu.address.logic.commands.ImportReplaceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.FinishOngoingVisitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.ShowOngoingVisitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.UpdateOngoingVisitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.visit.BeginVisitCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.visit.UpdateOngoingVisitCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        case ExportAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            return new ExportAllCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        case ImportReplaceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            return new ImportReplaceCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case BeginVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new BeginVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case FinishOngoingVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new FinishOngoingVisitCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case ShowOngoingVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ShowOngoingVisitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case UpdateOngoingVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new UpdateOngoingVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 3,
      "cheongsiuhong": 9,
      "crazoter": 18,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Note that prefix definitions can be duplicated so long as they are not used within the same command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_VISIT_TODO \u003d new Prefix(\"vt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Do not use with PREFIX_PHONE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_INDEX \u003d new Prefix (\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_TASK_INDEX_AND_DETAIL \u003d new Prefix (\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_TASK_FINISH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_TASK_UNFINISH \u003d new Prefix(\"uf/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_REMARKS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 9,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_PATIENT_VISIT_TODO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        parseVisitTodosForEdit(argMultimap.getAllValues(PREFIX_PATIENT_VISIT_TODO))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .ifPresent(editPersonDescriptor::setVisitTodos);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e VisitTodos} into a {@code Collection\u003cVisitTodos\u003e}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if {@code VisitTodos} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If {@code VisitTodos} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code Collection\u003cVisitTodo\u003e} containing zero VisitTodos."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Optional\u003cCollection\u003cVisitTodo\u003e\u003e parseVisitTodosForEdit(Collection\u003cString\u003e visitTodos)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert visitTodos !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTodos.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cString\u003e visitTodosSet \u003d visitTodos.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 visitTodos.contains(\"\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ? Collections.emptySet() : visitTodos;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.of(ParserUtil.parseVisitTodos(visitTodosSet));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 24,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses a {@code String visitTodo} into a {@code VisitTodo}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the given {@code visitTodo} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static VisitTodo parseVisitTodo(String visitTodo) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTodo);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String trimmedVisitTodo \u003d visitTodo.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!VisitTodo.isValidVisitTodoDescription(trimmedVisitTodo)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(VisitTodo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTodo(trimmedVisitTodo);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e visitTodos} into a {@code Collection\u003cVisitTodo\u003e}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Collection\u003cVisitTodo\u003e parseVisitTodos(Collection\u003cString\u003e visitTodos) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTodos);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Collection\u003cVisitTodo\u003e visitTodoCollection \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (String visitTodoName : visitTodos) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visitTodoCollection.add(parseVisitTodo(visitTodoName));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitTodoCollection;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 40,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/visit/BeginVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Parses input arguments and creates a new BeginVisitCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class BeginVisitCommandParser implements Parser\u003cBeginVisitCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BeginVisitCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and returns a BeginVisitCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public BeginVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new BeginVisitCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BeginVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/visit/UpdateOngoingVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.visit.UpdateOngoingVisitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_REMARKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_TASK_FINISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_TASK_INDEX_AND_DETAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISIT_TASK_UNFINISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.UpdateOngoingVisitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.commands.visit.UpdateOngoingVisitDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Parses input arguments and creates a new UpdateOngoingVisitCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UpdateOngoingVisitCommandParser implements Parser\u003cUpdateOngoingVisitCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Must match Index, whitespace then String."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String INDEX_WHITESPACE_THEN_STRING_VALIDATION_REGEX \u003d \"^([0-9]+) (.*)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final int REGEX_MATCHER_INDEX \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final int REGEX_MATCHER_STRING \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and returns an UpdateOngoingVisitCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_VISIT_REMARKS, PREFIX_VISIT_TASK_FINISH,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_VISIT_TASK_UNFINISH, PREFIX_VISIT_TASK_INDEX_AND_DETAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UpdateOngoingVisitDescriptor updateOngoingVisitDescriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new UpdateOngoingVisitDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISIT_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            updateOngoingVisitDescriptor.setRemark("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ParserUtil.parseRemark(argMultimap.getValue(PREFIX_VISIT_REMARKS).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitDescriptor.setFinishedVisitTaskIndexes("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parseIndexes(argMultimap.getAllValues(PREFIX_VISIT_TASK_FINISH)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitDescriptor.setUnfinishedVisitTaskIndexes("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parseIndexes(argMultimap.getAllValues(PREFIX_VISIT_TASK_UNFINISH)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitDescriptor.setUpdatedVisitTaskDetails("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parseIndexAndDetailPairs(argMultimap.getAllValues(PREFIX_VISIT_TASK_INDEX_AND_DETAIL)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!updateOngoingVisitDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new UpdateOngoingVisitCommand(updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parse a list of string (presumably obtained from argMultimap.getAllValues) into a list of Indexes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The expected input of these string should be of indexes."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns said list of Indexes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if an index is not of the right format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cIndex\u003e parseIndexes(List\u003cString\u003e indexesToParse) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(indexesToParse);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cIndex\u003e collector \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (String value : indexesToParse) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collector.add(ParserUtil.parseIndex(value));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return collector;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parse a list of string (presumably obtained from argMultimap.getAllValues) into a list of Indexes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The expected input should be index, a whitespace, then the detail associated with the index."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns said list of Pairs of Index and String."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if an index is not of the right format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cPair\u003cIndex, String\u003e\u003e parseIndexAndDetailPairs(List\u003cString\u003e indexAndDetailPairs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(indexAndDetailPairs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPair\u003cIndex, String\u003e\u003e collector \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Pattern regex \u003d Pattern.compile(INDEX_WHITESPACE_THEN_STRING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (String value : indexAndDetailPairs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Matcher matcher \u003d regex.matcher(value);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Check if is valid"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (matcher.find()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collector.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            ParserUtil.parseIndex(matcher.group(REGEX_MATCHER_INDEX)),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            matcher.group(REGEX_MATCHER_STRING).trim()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    //Throw ParseException this way because ParserUtil also throws its own ParseException"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    throw new ParseException(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return collector;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.exceptions.PersonHasOngoingVisitException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Pair\u003cInteger, Integer\u003e NO_ONGOING_PATIENT_AND_VISIT_VAL \u003d new Pair\u003c\u003e(-1, -1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Pair\u003cInteger, Integer\u003e pairOfOngoingPatAndVisitIndexes \u003d NO_ONGOING_PATIENT_AND_VISIT_VAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setPairOfOngoingPatAndVisitIndexes(newData.getIndexPairOfOngoingPatientAndVisit());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns index of person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int indexOfPerson(Person person) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return persons.indexOf(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. Also updates currentPersonAndVisit if needed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code key} must exist in the address book and must not have an ongoing visit."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If no ongoing visit, just remove"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (pairOfOngoingPatAndVisitIndexes.equals(NO_ONGOING_PATIENT_AND_VISIT_VAL)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            persons.remove(key);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Optional\u003cVisit\u003e optionalVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assert optionalVisit.isPresent();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Person currentPatient \u003d optionalVisit.get().getPatient();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (currentPatient.equals(key)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Code should have prevented this from reaching this stage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new PersonHasOngoingVisitException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Remove and update"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                persons.remove(key);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setPairOfOngoingPatAndVisitIndexes(new Pair\u003c\u003e(indexOfPerson(currentPatient),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        pairOfOngoingPatAndVisitIndexes.getValue()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public AddressBook deepCopy() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new JsonSerializableAddressBook(this).toModelType();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CopyError(\"Error copying AddressBook\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get optional pair of current person and visit if there is an ongoing visit."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cVisit\u003e getOngoingVisit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (pairOfOngoingPatAndVisitIndexes.getKey() \u003d\u003d -1 || pairOfOngoingPatAndVisitIndexes.getValue() !\u003d -1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cPerson\u003e patient \u003d persons.getByIndex(pairOfOngoingPatAndVisitIndexes.getKey());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (patient.isEmpty()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient.get().getVisitByIndex(pairOfOngoingPatAndVisitIndexes.getValue());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Verifies that the patient and visit indexes can be obtained from the visit i.e."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if the visit can be found in the data."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean visitIsInData(Visit visit) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person patient \u003d visit.getPatient();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int patientIndex \u003d persons.indexOf(patient);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (patientIndex \u003c\u003d -1) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int visitIndex \u003d patient.indexOfVisit(visit);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitIndex \u003e -1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record ongoing visit of person."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will be saved until the visit is finished."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setOngoingVisit(Visit visit) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!visitIsInData(visit)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setPairOfOngoingPatAndVisitIndexes(new Pair\u003c\u003e(persons.indexOf(visit.getPatient()),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getPatient().indexOfVisit(visit)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Unset current person and visit"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void unsetOngoingVisit() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.pairOfOngoingPatAndVisitIndexes \u003d NO_ONGOING_PATIENT_AND_VISIT_VAL;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Pair\u003cInteger, Integer\u003e getIndexPairOfOngoingPatientAndVisit() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return pairOfOngoingPatAndVisitIndexes;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void setPairOfOngoingPatAndVisitIndexes(Pair\u003cInteger, Integer\u003e pairOfOngoingPatAndVisitIndexes) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.pairOfOngoingPatAndVisitIndexes \u003d pairOfOngoingPatAndVisitIndexes;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 11,
      "crazoter": 93,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/HistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.collectionToString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Represents the history of the application. Each data state change is stored as a record containing the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * {@link MutatorCommand} that caused the change and the {@link AddressBook} state before the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * All recorded states are deep copies decoupled from their original references."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final int maxSize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private List\u003cHistoryRecord\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Initialises a HistoryManager with the specified maximum size of history records to keep track of."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param maxSize the maximum number of records in the history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryManager(int maxSize) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assert maxSize \u003e\u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.maxSize \u003d maxSize;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Records the specified command and state in the history. The {@code addressBook} represents the state before the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@code command} was executed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command the command that caused the change in state"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param addressBook the state before the command was executed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void pushRecord(MutatorCommand command, AddressBook addressBook) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (history.size() \u003d\u003d maxSize) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            history.remove(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        history.add(new HistoryRecord(command, addressBook));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Removes the most recent record from the history and returns it as an {@code Optional}, or an empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@code Optional} if there are no records in the history."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return an {@code Optional} describing the most recent record in the history, or an empty {@code Optional} if"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *         the history is empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Optional\u003cHistoryRecord\u003e popRecord() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return history.isEmpty() ? Optional.empty() : Optional.of(history.remove(history.size() - 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Reverts history to the state just before the specified record."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param record the record to revert to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws NoSuchElementException if the specified record does not exist in the history"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecordsTo(HistoryRecord record) throws NoSuchElementException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int index \u003d history.indexOf(record);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new NoSuchElementException(\"Cannot pop to specified record: record not found in history\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord curRecord \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        while (curRecord !\u003d record) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            curRecord \u003d popRecord().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns an unmodifiable view of the history */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ObservableList\u003cHistoryRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableList(history));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the number of records in the history"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return history.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Optional\u003cHistoryRecord\u003e getLastRecord() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return history.size() \u003e\u003d 1 ? Optional.of(history.get(history.size() - 1)) : Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return collectionToString(history);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/HistoryRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Record of the command and data of one atomic commit in the command history. It consists of the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * {@link MutatorCommand} responsible for the commit and the state of the {@link AddressBook} before the commit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final MutatorCommand command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a HistoryRecord representing the specified command and state. The state is deeply copied and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * decoupled from the given reference."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command the command that caused the change in state"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param addressBook the state before the execution of the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryRecord(MutatorCommand command, AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.addressBook \u003d addressBook.deepCopy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns the command stored in this record */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public MutatorCommand getCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a read-only reference to the state stored in this record. This method is preferred over"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link #getCopyOfAddressBook()} if the state does not need to be modified as it avoids copying the entire state."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ReadOnlyAddressBook getReadOnlyAddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the state stored in this record. If the state does not need to be modified, it is"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * recommended to use {@link #getReadOnlyAddressBook()} instead."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public AddressBook getCopyOfAddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return addressBook.deepCopy();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return command.getClass().getSimpleName() + \", \" + addressBook.toString()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                + \" \" + addressBook.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void setStagedAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Replaces all persons in address book with new persons from the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    void replaceStagedAddressBook(List\u003cPerson\u003e persons);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns the current AddressBook */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    ReadOnlyAddressBook getStagedAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record a new ongoing visit of person in the model."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will be saved until the visit is finished."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Ongoing visit must be from a Patient unmodified for this to work without throwing an exception,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * so only use this to begin visits."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setNewOngoingVisit(Visit visit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Update an ongoing visit in the model. This will update the ongoing visit"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * AND update the visit in the patient."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Use this to update an ongoing visit when there is already a visit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void updateOngoingVisit(Visit updatedVisit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Set the ongoing visit of person in the model to null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void unsetOngoingVisit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get optional pair of current person and visit if there is an ongoing visit."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Optional\u003cVisit\u003e getOngoingVisit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return true if the person has an ongoing visit."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Note: The current implementation only checks if this person is the one being tracked using the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * currentPersonAndVisit."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    boolean patientHasOngoingVisit(Person personToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns an unmodifiable view of the entire person list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    ObservableList\u003cPerson\u003e getStagedPersonList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    FilteredList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the list of ongoing visits."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The current constraint is only one ongoing visit at one time."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cVisit\u003e getObservableOngoingVisitList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns true if there are changes to the address book that have not been {@code commit()}ed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return true if there are uncommitted changes"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    boolean hasStagedChanges();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Commits the changes made to the address book since the last call to this method, making them permanent and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * updating the UI data. The committing {@code MutatorCommand} is stored for history record purposes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command the {@code MutatorCommand} making this commit"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void commit(MutatorCommand command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Discards staged but uncommitted changes */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void discardStagedChanges();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Reverts current model state to the {@link AddressBook} contained in the specified {@link HistoryRecord}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * (i.e. the state before the {@link MutatorCommand} was executed)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void revertTo(HistoryRecord record);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns an unmodifiable view of the history */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    ObservableList\u003cHistoryRecord\u003e getHistory();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 29,
      "cheongsiuhong": 5,
      "crazoter": 45,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final int MAX_HISTORY_SIZE \u003d 20;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private AddressBook baseAddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private AddressBook stagedAddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final HistoryManager historyManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final ObservableList\u003cPerson\u003e stagedPersons; // Modifiable list containing current stagedAddressBook persons"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons; // Unmodifiable view for the UI linked to stagedPersons"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Placing ongoingVisitList here so that any changes to the ongoing visit will be reflected"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //in the UI"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final ObservableList\u003cVisit\u003e ongoingVisitList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Previous predicate variable to keep track of the predicate used by FindCommands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Predicate\u003cPerson\u003e previousPredicate \u003d PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.baseAddressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.stagedAddressBook \u003d this.baseAddressBook.deepCopy();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.historyManager \u003d new HistoryManager(MAX_HISTORY_SIZE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedPersons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(stagedPersons));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Initializing ongoingVisitList here instead of in AddressBook as it is a wrapper of the data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e ongoingVisit \u003d this.stagedAddressBook.getOngoingVisit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisit.ifPresent(ongoingVisitList::add);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void setStagedAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.stagedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void replaceStagedAddressBook(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        AddressBook newBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            newBook.addPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        setStagedAddressBook(newBook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ReadOnlyAddressBook getStagedAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return stagedAddressBook;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record ongoing visit of person in the model."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will be saved until the visit is finished."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setNewOngoingVisit(Visit visit) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitList.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitList.add(visit);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedAddressBook.setOngoingVisit(visit);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void unsetOngoingVisit() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitList.clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedAddressBook.unsetOngoingVisit();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void updateOngoingVisit(Visit updatedVisit) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(updatedVisit);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e optionalOngoingVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (optionalOngoingVisit.isPresent()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Visit ongoingVisit \u003d optionalOngoingVisit.get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ongoingVisit.getPatient().updateVisit(ongoingVisit, updatedVisit);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            setNewOngoingVisit(updatedVisit);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalStateException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cVisit\u003e getOngoingVisit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedAddressBook.getOngoingVisit();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean patientHasOngoingVisit(Person patientToDelete) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patientToDelete);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e optionalVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return optionalVisit.isPresent()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patientToDelete.equals(optionalVisit.get().getPatient());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return stagedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshFilteredPersonList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns an unmodifiable view of the full list of {@code Person} backed by {@code stagedPersons}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ObservableList\u003cPerson\u003e getStagedPersonList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(stagedPersons));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean hasStagedChanges() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return !baseAddressBook.equals(stagedAddressBook);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void commit(MutatorCommand command) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(command, baseAddressBook);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        changeBaseTo(stagedAddressBook);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void discardStagedChanges() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedAddressBook \u003d baseAddressBook.deepCopy();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void revertTo(HistoryRecord record) throws NoSuchElementException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.popRecordsTo(record);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        changeBaseTo(record.getCopyOfAddressBook());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ObservableList\u003cHistoryRecord\u003e getHistory() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return historyManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private void changeBaseTo(AddressBook addressBook) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        baseAddressBook \u003d addressBook;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedAddressBook \u003d baseAddressBook.deepCopy();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedPersons();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private void refreshStagedPersons() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        stagedPersons.setAll(stagedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by {@code stagedPersons}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FilteredList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Refreshes the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will update the indexes of patients if a patient outside of the filtered list has been removed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void refreshFilteredPersonList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //In order to refresh predicate, need to reset it to show all persons first."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Otherwise it will not change anything"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        filteredPersons.setPredicate(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        filteredPersons.setPredicate(previousPredicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        previousPredicate \u003d predicate;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns true if the current state of this {@code ModelManager} is the same as {@code obj}."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * It does NOT take into account {@code baseAddressBook} or {@code historyManager}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cVisit\u003e getObservableOngoingVisitList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return FXCollections.unmodifiableObservableList(ongoingVisitList);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return stagedAddressBook.equals(other.stagedAddressBook)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 73,
      "cheongsiuhong": 10,
      "crazoter": 78,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a {@code Pair\u003cInteger, Integer\u003e} containing the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * PatientIndex and AppointmentIndex respectively to indicate the ongoing visit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If there is no ongoing visit, returns {@code new Pair\u003c\u003e(-1,-1)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Pair\u003cInteger, Integer\u003e getIndexPairOfOngoingPatientAndVisit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of this {@code readOnlyAddressBook}. Changes made to the copy will not affect this object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * and vice versa."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    ReadOnlyAddressBook deepCopy();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 7,
      "crazoter": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.RecurringDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Represents an Appointment in the application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final RecurringDateTime frequency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Person patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // private final List\u003cMedicine\u003e medicinePackingList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Appointment(DateTime startDateTime, DateTime endDateTime, RecurringDateTime frequency,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                       Person patient, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireAllNonNull(startDateTime, endDateTime, frequency, patient, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public RecurringDateTime getFrequency() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Person getPatient() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return patient.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns true if both appointments of the same date and time have at least one other identity field that is the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * This defines a weaker notion of equality between two appointments."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean isSameTimeSlot(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (otherAppointment \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return otherAppointment !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 (otherAppointment.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    || otherAppointment.getFrequency().equals(getFrequency()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * This defines a stronger notion of equality between two appointments."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return otherAppointment.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getFrequency().equals(getFrequency())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatient().equals(getPatient())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return Objects.hash(startDateTime, endDateTime, frequency, patient, description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        builder.append(\" Start Date and Time: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" End Date and Time \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getEndDateTime())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Frequency: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getFrequency())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Patient: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getPatient())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s datetime in the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_BODY \u003d \"Date Time should be of the format dd-MM-yyyy HHmm \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"1. The values that substitute \u0027dd\u0027, \u0027MM\u0027, \u0027yyyy\u0027, \u0027HH\u0027 and \u0027mm\u0027 must all be numerical numbers.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    static final DateTimeFormatter DATE_DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    static final DateTimeFormatter DATE_PARSER_VALIDATOR \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param dateTime A valid dateTime string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS_BODY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.dateTime \u003d parseDateTime(dateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DateTime(Date date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Instant current \u003d date.toInstant();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.dateTime \u003d LocalDateTime.ofInstant(current, ZoneId.systemDefault());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the parsed dateTimeTime if a given string is a valid dateTime; else calls checkArgument"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * which will throw an IllegalArgumentException."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static LocalDateTime parseDateTime(String value) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return LocalDateTime.parse(value, DATE_PARSER_VALIDATOR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            // This should not happen as we have already validated the value above"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            checkArgument(isValidDateTime(value), MESSAGE_CONSTRAINTS_BODY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns if a given string is a valid dateTime."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            DATE_PARSER_VALIDATOR.parse(test);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Convert date to a string for JSON storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return dateTime as a string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toJacksonJsonString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return DATE_PARSER_VALIDATOR.format(dateTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return DATE_DISPLAY_FORMATTER.format(dateTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 dateTime.equals(((DateTime) other).dateTime)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 12,
      "crazoter": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/EndDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s end time in the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EndDateTime extends DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"End \" + DateTime.MESSAGE_CONSTRAINTS_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final EndDateTime UNFINISHED_VISIT_END_DATE_TIME \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Constructs an {@code EndDateTime}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param dateTime A valid dateTime address."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EndDateTime(String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EndDateTime(Date date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns if a given string is a valid dateTime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidEndDateTime(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isValidDateTime(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/RecurringDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Represents the frequency of a recurring appointment"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class RecurringDateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Recurring \" + DateTime.MESSAGE_CONSTRAINTS_BODY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long days;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long weeks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long months;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long years;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long hours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long minutes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Constructs an {@code RecurringDateTime}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param days, months, years, hours, minutes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public RecurringDateTime(long days, long weeks, long months, long years, long hours, long minutes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireAllNonNull(days, months, years, hours, minutes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.months \u003d months;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.years \u003d years;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Gets recurring appointment\u0027s next date and time based on current one"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateTime getNextAppointmentDateTime(StartDateTime currentAppointmentDateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LocalDateTime nextAppointmentDateTime \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            currentAppointmentDateTime.dateTime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusYears(years)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusMonths(months)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusWeeks(weeks)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusDays(days)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusHours(hours)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusMinutes(minutes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new DateTime(nextAppointmentDateTime.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/datetime/StartDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package seedu.address.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s end time in the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class StartDateTime extends DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Start \" + DateTime.MESSAGE_CONSTRAINTS_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs an {@code StartDateTime}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param dateTime A valid dateTime address."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StartDateTime(String dateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StartDateTime(Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns if a given string is a valid dateTime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidStartDateTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isValidDateTime(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 1,
      "crazoter": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.exceptions.VisitNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final List\u003cVisit\u003e PLACEHOLDER_NO_VISITS \u003d Collections.unmodifiableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Collection\u003cVisitTodo\u003e visitTodos \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cVisit\u003e visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                  Collection\u003cVisitTodo\u003e visitTodos, List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, visitTodos);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodos.addAll(visitTodos);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visits.addAll(visits);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an immutable visitTodo collection, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Collection\u003cVisitTodo\u003e getVisitTodos() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Collections.unmodifiableCollection(visitTodos);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an immutable visit list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cVisit\u003e getVisits() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Collections.unmodifiableList(visits);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherPerson.getVisits().equals(getVisits())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getVisitTodos(), otherPerson.getVisitTodos());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, visitTodos, visits);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Visit Todos: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getVisitTodos().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Visits: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getVisits().forEach(builder::append);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return index of visit from the visit list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int indexOfVisit(Visit visit) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visits.indexOf(visit);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add visit to patient\u0027s visit list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void addVisit(Visit visit) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits.add(visit);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add a list of visits to patient\u0027s visit list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void addVisits(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visits);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visits.addAll(visits);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Update a visit in the patient\u0027s list of visits."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void updateVisit(Visit target, Visit updatedVisit) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(target, updatedVisit);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int indexOf \u003d this.visits.indexOf(target);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (indexOf \u003e -1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visits.set(indexOf, updatedVisit);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //This should not happen under normal circumstances (code error)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new VisitNotFoundException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get visit by index from the visit list (Optional object)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cVisit\u003e getVisitByIndex(int value) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (value \u003e\u003d 0 \u0026\u0026 value \u003c visits.size()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.of(visits.get(value));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 91,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the index of a person from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int indexOf(Person toFind) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalList.indexOf(toFind);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get a person by index (Optional object)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cPerson\u003e getByIndex(int key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (key \u003e\u003d 0 \u0026\u0026 key \u003c internalList.size()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.of(internalList.get(key));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 19,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonHasOngoingVisitException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PersonHasOngoingVisitException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.Detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person[] resultPersonArr \u003d new Person[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getTagSet(\"friends\"), getVisitTodos(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Blood Pressure\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getTagSet(\"neighbours\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Body Temperature\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new Person(new Name(\"David Li\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getTagSet(\"family\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Pain Level\", \"Check if patient has been exercising\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getTagSet(\"classmates\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Check cognitive abilities\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getTagSet(\"colleagues\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Check wounds\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Add Visits, as they need a reference to the person they are attached to"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resultPersonArr[0].addVisit(makeVisit(\"Alex is in good health.\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"10-11-2019 1500\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"10-11-2019 1700\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collateVisitTasks("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Apply Eyedrops\", \"\", true),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Top-up medicine\", \"\", true),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check his diet\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \"Stopped eating donuts\", true),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check his sleep cycle\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \"Could not sleep on Monday and Thursday\", true)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                resultPersonArr[0]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resultPersonArr[1].addVisit(makeVisit(\"Charlotte was very quiet.\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-11-2018 1500\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-11-2018 1700\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collateVisitTasks("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check bed for bugs\", \"\", true),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Top-up medicine\", \"\", true)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                resultPersonArr[1]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resultPersonArr[2].addVisit(makeVisit(\"\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-12-2018 1500\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-12-2018 1700\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collateVisitTasks("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Blood pressure\", \"140/90mmHg\", true),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check bed for bugs\", \"\", true),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Top-up medicine\", \"\", false),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Ask spouse about David\u0027s condition\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \"\", false)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                resultPersonArr[2]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return resultPersonArr;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a visitTodo collection containing the list of strings given."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Collection\u003cVisitTodo\u003e getVisitTodos(String... strings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(VisitTodo::new)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a visit task list containing the list of visit tasks given."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cVisitTask\u003e collateVisitTasks(VisitTask... visitTasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Arrays.stream(visitTasks).collect(Collectors.toList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper function to return a visit task."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static VisitTask makeVisitTask(String description, String detail, boolean isDone) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTask(new VisitTodo(description), new Detail(detail), isDone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper function to return a visit."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Visit makeVisit(String remark, String start, String end, List\u003cVisitTask\u003e visitTasks, Person patient) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new Visit(new Remark(remark), new StartDateTime(start),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    EndDateTime.UNFINISHED_VISIT_END_DATE_TIME, visitTasks, patient);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Visit(new Remark(remark), new StartDateTime(start),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new EndDateTime(end), visitTasks, patient);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a visit list containing the list of visits given."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cVisit\u003e collateVisits(Visit... visits) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Arrays.stream(visits).collect(Collectors.toList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 122,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s remark in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Commented but kept it here for developer understanding"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final String remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark \u003d\u003d null ? \"\" : remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 remark.equals(((Remark) other).remark)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/Visit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit in the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Visit {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Pointer fields (not actually stored as a variable in JSON or CSV files)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Person patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final StartDateTime startDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final EndDateTime endDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cVisitTask\u003e visitTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Every field must be present and not null, with the exception of endDateTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * to accommodate for visits that have not finished."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Visit(Remark remark, StartDateTime startDateTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                 EndDateTime endDateTime, List\u003cVisitTask\u003e visitTasks, Person patient) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(remark, startDateTime, visitTasks, patient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTasks \u003d visitTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StartDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cEndDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return endDateTime \u003d\u003d null ? Optional.empty() : Optional.of(endDateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an immutable visit task list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cVisitTask\u003e getVisitTasks() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Collections.unmodifiableList(visitTasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Person getPatient() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both visits have the same data fields and visit tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a stronger notion of equality between two visits."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof Visit)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit otherVisit \u003d (Visit) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherVisit.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisit.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisit.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(otherVisit.getVisitTasks(), getVisitTasks());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(remark, startDateTime, endDateTime, visitTasks, patient);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Start Time: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" End Time: \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cEndDateTime\u003e endDateTime \u003d getEndDateTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(endDateTime.equals(Optional.empty()) ? \"Ongoing\" : endDateTime)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getVisitTasks().forEach(builder::append);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Remarks\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visit/exceptions/VisitNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.visit.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation could not find a visit (e.g. index out of bounds)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(\"Visit could not be found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visittask/Detail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.visittask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s detail in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDetail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Detail {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Details can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The first character of the detail must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final String detail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code Detail}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param detail A valid detail."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Detail(String detail) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(detail);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        checkArgument(isValidDetail(detail), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if a given string is a valid detail."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidDetail(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof Detail // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 detail.equals(((Detail) other).detail)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return detail.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visittask/VisitTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.visittask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a task of a Visit in the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * As the name suggests, Visit \"Tasks\" are \"Tasks\" that the community nurse has to do during a visit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTasks are tasks to be done during a visit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * This is in contast to Visit \"Todos\" which are \"Todos\" for the community nurse when he/she goes on a visit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTodos are template VisitTasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTask {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final VisitTodo visitTodo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Detail detail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTask(VisitTodo visitTodo, Detail detail, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(visitTodo, detail);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodo \u003d visitTodo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTodo getVisitTodo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitTodo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Detail getDetail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isSameVisitTask(VisitTask otherVisitTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (otherVisitTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherVisitTask !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisitTask.getDetail().equals(getDetail())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 (otherVisitTask.getVisitTodo().equals(getVisitTodo())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || otherVisitTask.getDetail().equals(getDetail()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof VisitTask)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask otherVisitTask \u003d (VisitTask) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherVisitTask.getDetail().equals(getDetail())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisitTask.getVisitTodo().equals(getVisitTodo())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisitTask.isDone() \u003d\u003d isDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(visitTodo, detail, isDone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Visit Todo: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getVisitTodo())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" Details: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getDetail());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isDone()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            builder.append(\" (done)\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            builder.append(\" (unfinished)\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visittodo/VisitTodo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.model.visittodo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a VisitTodo in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * As the name suggests, Visit \"Todos\" are \"Todos\" for the community nurse when he/she goes on a visit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTodos are template VisitTasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * This is in contrast to Visit \"Tasks\" which are \"Tasks\" that the community nurse has to do during a visit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTasks are tasks to be done during a visit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; description is valid as declared in {@link #isValidVisitTodoDescription(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTodo {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visit Todo descriptions can \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code VisitTodo}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param description A valid visitTodo description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTodo(String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        checkArgument(isValidVisitTodoDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if a given string is a valid visitTodo description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidVisitTodoDescription(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isSameVisitTodo(VisitTodo otherVisitTodo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (otherVisitTodo \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherVisitTodo !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisitTodo.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof VisitTodo // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 description.equals(((VisitTodo) other).description)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \u0027[\u0027 + description + \u0027]\u0027;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonPropertyOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "@JsonPropertyOrder({\"name\", \"phone\", \"email\", \"address\", \"tagged\", \"visitTodos\", \"visits\"})"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"name\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"phone\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"email\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"address\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"tagged\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"visitTodos\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedVisitTodo\u003e visitTodos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"visits\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedVisit\u003e visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"visitTodos\") List\u003cJsonAdaptedVisitTodo\u003e visitTodos,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"visits\") List\u003cJsonAdaptedVisit\u003e visits) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTodos !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visitTodos.addAll(visitTodos);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visits !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visits.addAll(visits);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodos.addAll(source.getVisitTodos().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisitTodo::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits.addAll(source.getVisits().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cVisitTodo\u003e visitTodoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedVisitTodo visitTodo : visitTodos) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visitTodoList.add(visitTodo.toModelType());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Collection\u003cVisitTodo\u003e modelVisitTodos \u003d new LinkedHashSet\u003cVisitTodo\u003e(visitTodoList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cVisit\u003e modelVisits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person result \u003d new Person(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                modelTags, modelVisitTodos, modelVisits);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedVisit visit : visits) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            result.addVisit(visit.toModelType(result));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 10,
      "crazoter": 44,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVisit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link Visit}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedVisit {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Visit\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String END_DATE_EARLIER_THAN_START_DATE \u003d \"Visit\u0027s start date is earlier \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"than its end date\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String startDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisit} with the given visit details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisit(@JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            @JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            @JsonProperty(\"visitTasks\") List\u003cJsonAdaptedVisitTask\u003e visitTasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTasks !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visitTasks.addAll(visitTasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code Visit} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisit(Visit source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remark \u003d source.getRemark().remark;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().toJacksonJsonString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cEndDateTime\u003e endDateTime \u003d source.getEndDateTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (endDateTime.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.endDateTime \u003d endDateTime.get().toJacksonJsonString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.endDateTime \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasks.addAll(source.getVisitTasks().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisitTask::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted visit object into the model\u0027s {@code Visit} object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * with a reference to its patient object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Because this patient object is not saved together with the Visit, it is only passed in when the visit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * object needs to be converted to its model type."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted visit."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Visit toModelType(Person patient) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cVisitTask\u003e modelVisitTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedVisitTask visitTask : visitTasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            modelVisitTasks.add(visitTask.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    StartDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!StartDateTime.isValidStartDateTime(startDateTime)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(StartDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final StartDateTime modelStartDateTime \u003d new StartDateTime(startDateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final EndDateTime modelEndDateTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            modelEndDateTime \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!EndDateTime.isValidEndDateTime(endDateTime)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new IllegalValueException(EndDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            modelEndDateTime \u003d new EndDateTime(endDateTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Other constraints e.g. EndDateTime cannot be earlier than startDateTime"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (modelEndDateTime.dateTime.isBefore(modelStartDateTime.dateTime)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new IllegalValueException(END_DATE_EARLIER_THAN_START_DATE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Visit(modelRemark, modelStartDateTime, modelEndDateTime, modelVisitTasks, patient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "sandydays": 3,
      "crazoter": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVisitTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.Detail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link VisitTask}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedVisitTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"VisitTask\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final JsonAdaptedVisitTodo visitTodo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String detail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisitTask} with the given visit detail."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTask(@JsonProperty(\"visitTodo\") JsonAdaptedVisitTodo visitTodo,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    @JsonProperty(\"detail\") String detail,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    @JsonProperty(\"isDone\") Boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodo \u003d visitTodo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code VisitTask} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTask(VisitTask source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodo \u003d new JsonAdaptedVisitTodo(source.getVisitTodo());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        detail \u003d source.getDetail().detail;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isDone \u003d source.isDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted visit object into the model\u0027s {@code VisitTask} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted visit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTask toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTodo \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    VisitTodo.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final VisitTodo modelVisitTodo \u003d visitTodo.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (detail \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    Detail.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!Detail.isValidDetail(detail)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(Detail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Detail modelDetail \u003d new Detail(detail);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"IsDone\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTask(modelVisitTodo, modelDetail, isDone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "crazoter": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVisitTodo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link VisitTodo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedVisitTodo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisitTodo} with the given {@code description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTodo(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code VisitTodo} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTodo(VisitTodo source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        description \u003d source.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getVisitTodoDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code VisitTodo} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTodo toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!VisitTodo.isValidVisitTodoDescription(description)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(VisitTodo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTodo(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "crazoter": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final int ongoingVisitPatientIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final int ongoingVisitIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonSerializableAddressBook("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @JsonProperty(\"ongoingVisitPatientIndex\") Integer ongoingVisitPatientIndex,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @JsonProperty(\"ongoingVisitIndex\") Integer ongoingVisitIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Integer resultingPatientIndex \u003d ongoingVisitPatientIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Integer resultingVisitIndex \u003d ongoingVisitIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (ongoingVisitPatientIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            resultingPatientIndex \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (ongoingVisitIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            resultingVisitIndex \u003d -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitPatientIndex \u003d resultingPatientIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitIndex \u003d resultingVisitIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Pair\u003cInteger, Integer\u003e indexPairOfCurrentPersonAndVisit \u003d source.getIndexPairOfOngoingPatientAndVisit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitPatientIndex \u003d indexPairOfCurrentPersonAndVisit.getKey();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitIndex \u003d indexPairOfCurrentPersonAndVisit.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            JsonAdaptedPerson jsonAdaptedPerson \u003d persons.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (ongoingVisitPatientIndex \u003d\u003d i) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Optional\u003cVisit\u003e optionalVisit \u003d person.getVisitByIndex(ongoingVisitIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                optionalVisit.ifPresent(addressBook::setOngoingVisit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 28,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "import seedu.address.autocomplete.AutoCompleteWord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": " * An UI component that displays information of a {@code AutoCompleteWord}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final String FXML \u003d \"AutoCompleteListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public final AutoCompleteWord acWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private Label suggestedWord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteCard(AutoCompleteWord acWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.acWord \u003d acWord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "        suggestedWord.setText(acWord.getSuggestedWord());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (!(other instanceof AutoCompleteCard)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "        AutoCompleteCard card \u003d (AutoCompleteCard) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return acWord.equals(card.acWord);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompletePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "import seedu.address.autocomplete.AutoCompleteWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "import seedu.address.autocomplete.AutoCompleteWordHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Panel containing the list of suggested words."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompletePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AutoCompletePanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final String FXML \u003d \"AutoCompletePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private int selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompleteWordHandler autoCompleteWordHandler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ListView\u003cAutoCompleteWord\u003e autoCompleteWordListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompletePanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordHandler \u003d new AutoCompleteWordHandler();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.setItems(autoCompleteWordHandler.getOListAutoCompleteWords());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.setCellFactory(listView -\u003e new AutoCompleteListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code AutoCompleteWord} using a {@code AutoCompleteCard}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "    class AutoCompleteListViewCell extends ListCell\u003cAutoCompleteWord\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "        protected void updateItem(AutoCompleteWord autoCompleteWord, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "            super.updateItem(autoCompleteWord, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (empty || autoCompleteWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "                setGraphic(new AutoCompleteCard(autoCompleteWord).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteWord getSelected() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return autoCompleteWordListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void setSelected(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.selectedIndex \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public int getSelectedIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return selectedIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public int getTotalItems() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return autoCompleteWordListView.getItems().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Delegate update list to autocomplete handler"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param currentPhraseInCommandBox current String in command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void updateListView(String currentPhraseInCommandBox) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "francislow"
        },
        "content": "        logger.info(\"Updated list\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordHandler.updateList(currentPhraseInCommandBox);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private final AutoCompletePanel autoCompletePanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, AutoCompletePanel autoCompletePanel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.autoCompletePanel \u003d autoCompletePanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void setOnButtonPressedListener() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "francislow"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "francislow"
        },
        "content": "            int newIndex;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "francislow"
        },
        "content": "            switch (event.getCode()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "francislow"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "francislow"
        },
        "content": "                newIndex \u003d (autoCompletePanel.getSelectedIndex() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (newIndex \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    newIndex \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "francislow"
        },
        "content": "                autoCompletePanel.setSelected(newIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "francislow"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "francislow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "francislow"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "francislow"
        },
        "content": "                newIndex \u003d (autoCompletePanel.getSelectedIndex() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (newIndex \u003e autoCompletePanel.getTotalItems() - 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    newIndex \u003d autoCompletePanel.getTotalItems() - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "francislow"
        },
        "content": "                autoCompletePanel.setSelected(newIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "francislow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "francislow"
        },
        "content": "            case SHIFT:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "francislow"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    commandTextField.setText(autoCompletePanel.getSelected().getSuggestedWord());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "francislow"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    logger.info(\"Nothing is selected thus shift key does not work\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "francislow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "francislow"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "francislow"
        },
        "content": "                autoCompletePanel.updateListView(commandTextField.getText() + event.getText());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "francislow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 41,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DataPanelsTabPaneManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Manages the TabPane and adds programmatic controls to it"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DataPanelsTabPaneManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final TabPane tabPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Tab patientTabPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Tab ongoingVisitTabPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DataPanelsTabPaneManager(TabPane pane, Tab patientTabPage, Tab ongoingVisitTabPage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(pane, patientTabPage, ongoingVisitTabPage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        tabPane \u003d pane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientTabPage \u003d patientTabPage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitTabPage \u003d ongoingVisitTabPage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Change the current tab to patient tab."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void changeToPatientTab() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        selectionModel.select(patientTabPage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Change the current tab to ongoing visit tab."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void changeToOngoingVisitTab() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        selectionModel.select(ongoingVisitTabPage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private OngoingVisitListPanel ongoingVisitListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompletePanel autoCompletePanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private DataPanelsTabPaneManager dataPanelsTabPaneManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private StackPane autoCompletePanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TabPane dataPanelsTabPane;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Tab patientTabPage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Tab ongoingVisitTabPage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StackPane ongoingVisitPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListPanel \u003d new OngoingVisitListPanel(logic.getObservableOngoingVisitList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitPanelPlaceholder.getChildren().add(ongoingVisitListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompletePanel \u003d new AutoCompletePanel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompletePanelPlaceholder.getChildren().add(autoCompletePanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "francislow"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, autoCompletePanel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dataPanelsTabPaneManager \u003d new DataPanelsTabPaneManager(dataPanelsTabPane,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                patientTabPage,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ongoingVisitTabPage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public OngoingVisitListPanel getOngoingVisitListPanel() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ongoingVisitListPanel;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AutoCompletePanel getAutoCompletePanel() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return autoCompletePanel;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DataPanelsTabPaneManager getDataPanelsTabPaneManager() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return dataPanelsTabPaneManager;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Set listeners for all individual components in main window"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void setAllListeners() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "francislow"
        },
        "content": "        commandBox.setOnButtonPressedListener();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 31,
      "francislow": 16,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OngoingVisitCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An UI component that displays information of a {@code Visit}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class OngoingVisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"OngoingVisitListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final Visit visit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VBox visitTasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public OngoingVisitCard(Visit visit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Todo: Make it look nicer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person person \u003d this.visit.getPatient();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        startDateTime.setText(visit.getStartDateTime().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visit.getEndDateTime().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime.setText(visit.getEndDateTime().get().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime.setText(\"Ongoing Visit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remark.setText(this.visit.getRemark().remark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visit.getVisitTasks()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .forEach(visitTask -\u003e visitTasks.getChildren()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .add(new Label(visitTask.toString())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof OngoingVisitCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        OngoingVisitCard card \u003d (OngoingVisitCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visit.equals(card.visit);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OngoingVisitListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Panel containing the list of ongoing visits (current maximum is 1)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class OngoingVisitListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"OngoingVisitListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ListView\u003cVisit\u003e ongoingVisitListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public OngoingVisitListPanel(ObservableList\u003cVisit\u003e visitList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListView.setItems(visitList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListView.setCellFactory(listView -\u003e new VisitListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Visit} using a {@code VisitCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    class VisitListViewCell extends ListCell\u003cVisit\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        protected void updateItem(Visit visit, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            super.updateItem(visit, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (empty || visit \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(new OngoingVisitCard(visit).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VBox visitTodos;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // TODO: Make this more beautiful or extend list/find with a prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // that optionally shows these fields"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int visitTodoIndex \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (VisitTodo visitTodo : person.getVisitTodos()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visitTodos.getChildren().add("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Label(visitTodoIndex + \". \" + visitTodo.getDescription()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visitTodoIndex++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 12,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PersonListPanel(FilteredList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Modify index such that the displayed index is the source index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                FilteredList\u003cPerson\u003e personList \u003d (FilteredList\u003cPerson\u003e) personListView.getItems();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                int index \u003d personList.getSourceIndex(personList.indexOf(person));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(new PersonCard(person, index + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Main window listener"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "            mainWindow.setAllListeners();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/CommNurseTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/AutoCompleteListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"25\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "        \u003cLabel fx:id\u003d\"suggestedWord\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "francislow": 24
    }
  },
  {
    "path": "src/main/resources/view/AutoCompletePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "  \u003cListView fx:id\u003d\"autoCompleteWordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "francislow": 8
    }
  },
  {
    "path": "src/main/resources/view/CommNurseTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #DEF2F1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #FEFEFE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".table-row-cell:filled:selected {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #75a2c7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #75a2c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #61bfba;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 39
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background: #FFFFFF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-text-fill: darkGray;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cURL value\u003d\"@CommNurseTheme.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "            \u003c!--Menu bar--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "                \u003c!--Command Box--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "                \u003c!--Auto Complete Panel--\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "                \u003cVBox fx:id\u003d\"autoCompletePanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "                      VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"autoCompletePanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": "                \u003c!--Result Displayer--\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cTabPane fx:id\u003d\"dataPanelsTabPane\" styleClass\u003d\"pane-with-border\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003cTab fx:id\u003d\"patientTabPage\" text\u003d\"Patients\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003c!--List Of Person Cards--\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                  VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003cTab fx:id\u003d\"ongoingVisitTabPage\" text\u003d\"Current Visit\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \u003c!--Current Visit--\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \u003cVBox fx:id\u003d\"ongoingVisitList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                  VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"ongoingVisitPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c!--Status Bar--\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22,
      "francislow": 14,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/OngoingVisitListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cVBox fx:id\u003d\"visitTasks\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remarks\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 38
    }
  },
  {
    "path": "src/main/resources/view/OngoingVisitListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cListView fx:id\u003d\"ongoingVisitListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003cVBox fx:id\u003d\"visitTodos\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void collectionToString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e list \u003d List.of(1, 2, 3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(CollectionUtil.collectionToString(list), \"1\\n2\\n3\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e emptyList \u003d List.of();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(CollectionUtil.collectionToString(emptyList), \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 10,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CopyUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CopyUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void deepCopy_noExceptionThrown() throws CopyError {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        SerializableTestClass copy \u003d CopyUtil.deepCopy(serializableTestClass);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(serializableTestClass, copy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(serializableTestClass, copy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void deepCopyOfObservableList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Test with immutable elements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cInteger\u003e originalInts \u003d FXCollections.observableArrayList(1, 2, 3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cInteger\u003e copiedInts \u003d CopyUtil.deepCopyOfObservableList(originalInts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(originalInts, copiedInts);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(originalInts, copiedInts);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        originalInts.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(copiedInts.get(0), 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        copiedInts.add(4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(originalInts.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Test with mutable elements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cMutable\u003e originalMutables \u003d FXCollections.observableArrayList(new Mutable());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cMutable\u003e copiedMutables \u003d CopyUtil.deepCopyOfObservableList(originalMutables);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(originalMutables, copiedMutables);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(originalMutables, copiedMutables);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        copiedMutables.get(0).setData(100);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(originalMutables.get(0).getData() \u003d\u003d 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        originalMutables.get(0).setData(50);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(copiedMutables.get(0).getData() \u003d\u003d 100);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(originalMutables.get(0).getData() \u003d\u003d 50);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static class Mutable {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        private int data \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public int getData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void setData(int data) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.data \u003d data;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (other instanceof Mutable) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Mutable o \u003d (Mutable) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return this.getData() \u003d\u003d o.getData();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withVisitTodos().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 1,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Person personInList \u003d model.getStagedAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.model.HistoryRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void setStagedAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        public void replaceStagedAddressBook(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public ReadOnlyAddressBook getStagedAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public FilteredList\u003cPerson\u003e getStagedPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public FilteredList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public ObservableList\u003cVisit\u003e getObservableOngoingVisitList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setNewOngoingVisit(Visit visit) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void updateOngoingVisit(Visit updatedVisit) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void unsetOngoingVisit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Optional\u003cVisit\u003e getOngoingVisit() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public boolean patientHasOngoingVisit(Person personToDelete) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public boolean hasStagedChanges() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void commit(MutatorCommand command) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void discardStagedChanges() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void revertTo(HistoryRecord record) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public ObservableList\u003cHistoryRecord\u003e getHistory() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public ReadOnlyAddressBook getStagedAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 31,
      "cheongsiuhong": 2,
      "crazoter": 42,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        expectedModel.setStagedAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALID_VISIT_TODO \u003d \"Record Blood Pressure\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VISIT_TODO \u003d \" \" + PREFIX_PATIENT_VISIT_TODO + VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getStagedAddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getStagedAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Executes the {@code command} with the given {@code model} and commits it if it is a {@link MutatorCommand}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static CommandResult executeAndCommitCommand(Command command, Model model) throws CommandException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (command instanceof MutatorCommand) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            model.commit((MutatorCommand) command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 13,
      "crazoter": 5,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getStagedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getStagedAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getStagedAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getStagedAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getStagedAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Person personInList \u003d model.getStagedAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 5,
      "crazoter": 5,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getStagedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISIT_TODO;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + VISIT_TODO, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + VISIT_TODO, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + VISIT_TODO, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + VISIT_TODO, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + VISIT_TODO, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + VISIT_TODO, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withVisitTodos().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 13,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static seedu.address.commons.util.CopyUtil.deepCopyOfObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void deepCopy() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        AddressBook copy \u003d addressBook.deepCopy();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(copy, addressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(copy, addressBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void deepCopy_changes_areIndependent() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        AddressBook copy \u003d addressBook.deepCopy();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        copy.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotEquals(copy, addressBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(copy.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Pair\u003cInteger, Integer\u003e getIndexPairOfOngoingPatientAndVisit() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new Pair\u003c\u003e(-1, -1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public AddressBookStub deepCopy() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new AddressBookStub(deepCopyOfObservableList(persons));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 26,
      "crazoter": 6,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/HistoryManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.testutil.DummyMutatorCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void pushRecord() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.asUnmodifiableObservableList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void pushRecord_overMaxSize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        DummyMutatorCommand targetCommand \u003d new DummyMutatorCommand(\"2\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        AddressBook targetAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(targetCommand, targetAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e historyList \u003d historyManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyList.get(0).getCommand(), targetCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyList.get(0).getCopyOfAddressBook(), targetAddressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecord_hasRecords() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        DummyMutatorCommand targetCommand \u003d new DummyMutatorCommand(\"2\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        AddressBook targetAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new AddressBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(targetCommand, targetAddressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord record \u003d historyManager.popRecord().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(record.getCommand(), targetCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(record.getCopyOfAddressBook(), targetAddressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecord_noRecords_emptyOptional() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyManager.popRecord(), Optional.empty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new AddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.popRecord();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyManager.popRecord(), Optional.empty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecordsTo_hasRecord() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e historyList \u003d historyManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        DummyMutatorCommand targetCommand \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(targetCommand, new AddressBook());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"2\"), new AddressBook());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"3\"), new AddressBook());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.popRecordsTo(historyList.get(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyList.get(0).getCommand(), targetCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Pop to end of history"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.popRecordsTo(historyList.get(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecordsTo_noSuchRecord() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord outsideRecord \u003d new HistoryRecord(new DummyMutatorCommand(\"!!!\"), new AddressBook());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e historyManager.popRecordsTo(outsideRecord));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new AddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e historyManager.popRecordsTo(outsideRecord));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.testutil.DummyMutatorCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getStagedAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model actualModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        actualModelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(actualModelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        actualModelManager.commit(new DummyMutatorCommand(\"add Alice\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(actualModelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        actualModelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertFalse(actualModelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        actualModelManager.commit(new DummyMutatorCommand(\"delete Alice\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertFalse(actualModelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 17,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).withPreviousVisits()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_VISIT_TODO \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final List\u003cJsonAdaptedVisitTodo\u003e VALID_VISIT_TODOS \u003d BENSON.getVisitTodos().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .map(JsonAdaptedVisitTodo::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final List\u003cJsonAdaptedVisit\u003e VALID_VISITS \u003d BENSON.getVisits().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null, VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        INVALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, invalidTags, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_invalidVisitTodo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTodo\u003e invalidTodo \u003d new ArrayList\u003c\u003e(VALID_VISIT_TODOS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        invalidTodo.add(new JsonAdaptedVisitTodo(INVALID_VISIT_TODO));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, invalidTodo, VALID_VISITS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 34,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedVisitTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.TypicalVisitTasks.SAMPLE_VISIT_TASK_NO_DETAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.TypicalVisitTasks.SAMPLE_VISIT_TASK_SPECIAL_CHARS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.TypicalVisitTasks.SAMPLE_VISIT_TASK_WITH_DETAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.Detail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonAdaptedVisitTaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_VISIT_TODO \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final List\u003cJsonAdaptedVisitTodo\u003e VALID_VISIT_TODOS \u003d BENSON.getVisitTodos().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .map(JsonAdaptedVisitTodo::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_validVisitTaskDetails_returnsVisitTask() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask visitTask \u003d new JsonAdaptedVisitTask(SAMPLE_VISIT_TASK_NO_DETAIL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(SAMPLE_VISIT_TASK_NO_DETAIL, visitTask.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask visitTask2 \u003d new JsonAdaptedVisitTask(SAMPLE_VISIT_TASK_WITH_DETAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(SAMPLE_VISIT_TASK_WITH_DETAIL, visitTask2.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask visitTask3 \u003d new JsonAdaptedVisitTask(SAMPLE_VISIT_TASK_SPECIAL_CHARS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(SAMPLE_VISIT_TASK_SPECIAL_CHARS, visitTask3.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullVisitTodo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask person \u003d new JsonAdaptedVisitTask(null, \"\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisitTask.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTodo.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullDetail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask person \u003d new JsonAdaptedVisitTask(new JsonAdaptedVisitTodo(\"Work\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisitTask.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Detail.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullDone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask person \u003d new JsonAdaptedVisitTask(new JsonAdaptedVisitTodo(\"Work\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"\", null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisitTask.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"IsDone\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedVisitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import seedu.address.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonAdaptedVisitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"12/12/12 1400\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_REMARK \u003d \"Remark\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_START \u003d \"10-12-2019 2100\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_END \u003d \"11-12-2019 2100\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_VISIT_TASK \u003d \"10-12-2019 2100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Visit VALID_VISIT \u003d BENSON.getVisits().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private static final Visit VALID_COMPLETED_VISIT \u003d CARL.getVisits().get(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final JsonAdaptedVisit VALID_JSON_VISIT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new JsonAdaptedVisit(BENSON.getVisits().get(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void toModelType_validVisitDetailsAndNullEnd_returnsVisitTask() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Visit visit : BENSON.getVisits()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            JsonAdaptedVisit visitTask \u003d new JsonAdaptedVisit(visit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assertEquals(visit, visitTask.toModelType(BENSON));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void toModelType_validVisitDetailsAndNonNullEnd_returnsVisitTask() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (Visit visit : CARL.getVisits()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            JsonAdaptedVisit visitTask \u003d new JsonAdaptedVisit(visit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assertEquals(visit, visitTask.toModelType(CARL));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a list of valid JsonAdaptedVisitTasks for testing purposes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cJsonAdaptedVisitTask\u003e generateValidJsonAdaptedVisitTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasks.addAll(VALID_VISIT.getVisitTasks().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisitTask::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitTasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullRemark_doNotThrowIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(null,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullVisitStart_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisit.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                StartDateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullEndDateTime_doNotThrowIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullVisitTasks_doNotThrowIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_startDateNotDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_1,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, StartDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_startDateInvalidFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_2,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, StartDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_endDateNotDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_1,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, EndDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_endDateInvalidFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_2,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, EndDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_endDateEarlierThanStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedVisit.END_DATE_EARLIER_THAN_START_DATE, () -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 12,
      "crazoter": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DummyMutatorCommand.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Dummy {@link MutatorCommand} for testing history functionality"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DummyMutatorCommand extends Command implements MutatorCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String RESULT_PREAMBLE \u003d \"This is a dummy command with data \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private String dummyData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DummyMutatorCommand(String dummyData) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.dummyData \u003d dummyData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new CommandResult(RESULT_PREAMBLE + dummyData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the {@code visitTodos} into a {@code Collection\u003cVisitTodo\u003e}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPersonDescriptorBuilder withVisitTodos(String... visitTodos) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cVisitTodo\u003e collection \u003d Stream.of(visitTodos)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(VisitTodo::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setVisitTodos(collection);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 14,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.collateVisitTasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.collateVisits;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.makeVisit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.makeVisitTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visit.Visit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Collection\u003cVisitTodo\u003e visitTodos;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cVisit\u003e visits;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Because visits need a reference to their person in order to be created, this allows one to call the functions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //\"withOngoingVisits()\" etc before calling build"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cConsumer\u003cPerson\u003e\u003e visitsConsumerList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodos \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodos \u003d new LinkedHashSet\u003c\u003e(personToCopy.getVisitTodos());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits \u003d new ArrayList\u003c\u003e(personToCopy.getVisits());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the {@code visitTodos} into a {@code Collection\u003cVisitTodo\u003e}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PersonBuilder withVisitTodos(String ... visitTodos) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodos \u003d SampleDataUtil.getVisitTodos(visitTodos);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds finished visits to the list of visits."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PersonBuilder withPreviousVisits() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList.add(person -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            person.addVisits(collateVisits(makeVisit(\"\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"10-11-2019 1500\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"10-11-2019 1700\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisitTasks("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            makeVisitTask(\"Apply Eyedrops\", \"\", true),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            makeVisitTask(\"Top-up medicine\", \"\", true),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            makeVisitTask(\"Check his diet\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \"Stopped eating donuts\", true),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            makeVisitTask(\"Check his sleep cycle\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \"Could not sleep on Monday and Thursday\", true)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    person),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    makeVisit(\"Patient was very quiet.\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \"12-11-2018 1500\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \"12-11-2018 1700\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            collateVisitTasks("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    makeVisitTask(\"Check bed for bugs\", \"\", true),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    makeVisitTask(\"Top-up medicine\", \"\", true)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            ),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            person"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds finished visits to the list of visits."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PersonBuilder withOngoingVisit() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList.add(person -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            person.addVisits(collateVisits(makeVisit(\"\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"10-11-2019 1500\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisitTasks("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            makeVisitTask(\"Apply Eyedrops\", \"\", true),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            makeVisitTask(\"Top-up medicine\", \"Need more Vit. D\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    false)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    person"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            )));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Builds and returns a Person based on the functions called on this PersonBuilder object prior."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tags, visitTodos, visits);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //populate with visits"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Consumer\u003cPerson\u003e consumer : visitsConsumerList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            consumer.accept(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 91,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!(o instanceof SerializableTestClass)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        SerializableTestClass s \u003d (SerializableTestClass) o;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return this.name.equals(s.name)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u0026\u0026 this.listOfLocalDateTimes.equals(s.listOfLocalDateTimes)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u0026\u0026 this.mapOfIntegerToString.equals(s.mapOfIntegerToString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 11,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withOngoingVisit().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withPreviousVisits().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withVisitTodos(\"Check first aid kit\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 1,
      "crazoter": 8,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVisitTasks.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class containing a list of {@code VisitTask} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TypicalVisitTasks {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask SAMPLE_VISIT_TASK_NO_DETAIL \u003d SampleDataUtil"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .makeVisitTask(\"Descript!\", \"\", true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask SAMPLE_VISIT_TASK_WITH_DETAIL \u003d SampleDataUtil"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .makeVisitTask(\"test Description\", \"with detail\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask SAMPLE_VISIT_TASK_SPECIAL_CHARS \u003d SampleDataUtil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .makeVisitTask(\"Ensure he drinks 100% of it and pays $10.20!\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"I don\u0027t think it worked\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVisitTodos.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class containing a list of {@code VisitTodo} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TypicalVisitTodos {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withVisitTodos(\"Check first aid kit\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TypicalVisitTodos() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 79
    }
  }
]
