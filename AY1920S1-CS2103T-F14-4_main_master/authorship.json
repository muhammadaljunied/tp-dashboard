[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d Deliveria - a delivery task manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103T-F14-4/main[image:https://travis-ci.com/AY1920S1-CS2103T-F14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "* See below for a detailed introduction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The code base is developed based on the `AddressBook-Level3` project by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tysng": 5,
      "-": 27
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria was developed by the AY1920S1-CS2103T-F14-4 team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Chee You"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::cheeyou.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[https://github.com/cheeyou[github]][\u003c\u003ccheeyou#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Kris Kunthamas"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::argvampir.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[https://github.com/ArgVampir[github]][\u003c\u003cargvampir#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Sam Yong Jek"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::samyj2606.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/SamYJ2606[github]][\u003c\u003csamyj2606#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Song Tianyi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::tysng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/tysng[github]][\u003c\u003ctysng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Tan Jun Bang"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::junnbang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/junnbang[github]][\u003c\u003cjunnbang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "junnbang": 23,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Email us* : You can also reach us at `tsong1 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "\u003d Deliveria - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "By: `Team Team CS2103T-F14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* has a need to manage a significant number of delivery tasks and drivers"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "*Value proposition*: manage delivery tasks faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |view all unfinished delivery tasks |know which tasks have yet to be delivered"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |view all delivered tasks |keep track of all delivered tasks in the past month"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |sort and display delivery tasks by their starting time |view pending tasks in an orderly manner"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery Manager |search for tasks by a keyword |find a task more easily"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* *` |Delivery Manager |toggle dark or light theme for the interface |the UI can change according to user preference"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`*` |Delivery Manager |see the image of the drivers |can identify them easily"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junnbang"
        },
        "content": "(For all use cases below, the *System* is the `Deliveria` and the *Actor* is the `Delivery Manager`, unless specified otherwise)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Driver"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1.  Delivery Manager requests the list of drivers"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2.  Deliveria shows a list of drivers"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3.  Delivery Manager requests to delete a specific driver in the list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4.  Deliveria deletes the driver"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a1. Deliveria shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a new task"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1.  User creates a delivery task"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2.  Deliveria adds the task to a list of delivery tasks"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3.  Deliveria prints to assure that the task is added"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* 1a. Task given in invalid format"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 1a1. Deliveria shows an error message"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 1a2. Use case resumes at step 1"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use Case: Assign Driver to delivery task"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. Delivery Manager view the incomplete task list."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. Deliveria shows the incomplete task list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. User assign a driver to one of the task"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4. Deliveria shows the confirmation of driver being assigned to the task."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junnbang"
        },
        "content": "5. Deliveria indicate the incomplete task as On-going."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* 3a. If driver is unavailable to take up the task"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a1. Deliveria prompts that driver is busy"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a2. Deliveria shows the available time of the driver"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should be able to maintain up to 100 drivers and 1000 tasks without performance degradation."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should comply with the company\u0027s privacy regulations and safely store the data files."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should be able to scale quickly and adaptable for different companies."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tysng"
        },
        "content": "Windows 10, MacOS Mojave, Ubuntu"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 2,
      "cheeyou": 2,
      "junnbang": 51,
      "ArgVampir": 6,
      "tysng": 6,
      "-": 405
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "\u003d Deliveria - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Group Name: `CS2103-F14-4`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "By: `Chee You, Rushagrid Kunthamas, Sam Yong Jek, Song Tianyi, Tan Jun Bang`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently. While it consists of a _Graphical User Interface_ (GUI) that is user-friendly, Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Draft UI mockup"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::/images/Ui.png[Ui]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[caption\u003d\"Figure 1: \",link\u003d\"/images/Ui.png\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Download the latest release deliveria.jar https://github.com/AY1920S1-CS2103T-F14-4/main/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Some example commands you can try"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Lists all contacts: `list`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Adds a contact named John Doe to the Address Book: `Add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Deletes the 3rd contact shown in the current list: `Delete 3`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Exits the app: `exit`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e  for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* [action] [parameter 1] [parameter 2] [parameter 3]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Parameter consists of a delimiter and a word. For example, to tag a person on index 1: `edit 1 t/ College`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Commands are case sensitive"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Order of parameter is can be reordered freely."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "List all available commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003d\u003d\u003d View delivery tasks: `view`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Lists all delivery tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Format: `list delivery`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003d\u003d\u003d Get delivery details: `read`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Retrieves the details of 3rd task shown in the current list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Format: `list delivery`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Delete delivery tasks: `delete`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Deletes an existing task shown in the current list +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `delete delivery INDEX`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* Deletes the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1,2,3,..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Update driver field for a delivery task: `update`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Attach an existing task shown in the current list to Driver: `DriverName` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `update delivery INDEX n/DriverName`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* Attaches the task at the specified `INDEX` to Driver: `DriverName`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1,2,3,..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* `update delivery 3 n/John Doe`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d View list of drivers: `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "List all drivers +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `list drivers`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Get driver details: `read`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Retrieves the details of an existing driver shown in current list +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `read driver INDEX`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* Retrives the details of driver at specified `INDEX`. The index refers to the index number shown in the displayed driver list. The index *must be a positive integer* 1,2,3,..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Delete a driver : `delete driver`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "Deletes the specified driver from the driver list. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `delete driver INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Deletes the driver at the specified `INDEX`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The driver cannot be deleted if it\u0027s already assigned to a task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The index refers to the index numbers shown in the displayed driver\u0027s list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, .."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "`delete driver 2` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "Deletes the 2nd driver in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Editing a driver : `update driver`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "Edits an existing driver in the address book. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `update driver INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Edits the driver at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Assign a task to a driver: `assign`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "Assign an existing task a driver. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `assign TASK_INDEX DRIVER_INDEX`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "* If the driver is not available for that task, an error message will be shown."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The indices refer to the numbers shown in the displayed lists."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `assign 1 3` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "Assigns the task at index 1 to the driver at index 3."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "*Q*: Where is the saved file at? +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "*A*:  It is located in the same folder where the .jar file is. There will be a folder called `data`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "*Q*: How do I know the list of commands? +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": "*A*: The `help` command will give a list of available commands."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 17,
      "cheeyou": 6,
      "junnbang": 13,
      "ArgVampir": 11,
      "tysng": 50,
      "-": 97
    }
  },
  {
    "path": "docs/diagrams/add-remark/CommandInterface.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ {abstract} execute(Model) : CommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class CommandException LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class RemarkCommand LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ COMMAND_WORD : String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ MESSAGE_USAGE : String"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ MESSAGE_NOT_IMPLEMENTED_YET: String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u0027Empty spaces to ensure that box resizes to fit text"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "　　　　　　　　　　　　　　　　　　　　　　　　"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u0027Do _not_ change the previous line"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "---"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "+ execute(Model) : CommandResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommand -up[hidden]-|\u003e Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommand .right.\u003e CommandException : \u003e throws"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "Command .right.\u003e CommandException : \u003e throws"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classFontColor #000000"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "show members"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "hide CommandException members"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 34
    }
  },
  {
    "path": "docs/diagrams/add-remark/ParserInterface.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "Interface Parser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class RemarkCommandParser LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "+parse : RemarkCommand"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "Class ParserException LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "RemarkCommandParser -up-|\u003e Parser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "Parser .right.\u003e ParserException : throws"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "show members"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classFontColor #000000"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 19
    }
  },
  {
    "path": "docs/team/argvampir.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Kris Kunthamas - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/cheeyou.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Chee you - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/junnbang.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Tan Jun Bang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/samyj2606.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Chee you - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/tysng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Song Tianyi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tysng"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tysng"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tysng"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tysng"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tysng"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tysng"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tysng"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tysng"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tysng"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tysng"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tysng"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tysng"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tysng"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tysng"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tysng"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tysng"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tysng"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tysng"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tysng"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tysng"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tysng"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tysng"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tysng"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tysng"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tysng"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tysng"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tysng"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tysng"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tysng"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tysng"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tysng"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tysng"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tysng"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tysng"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tysng"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tysng"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tysng"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tysng"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tysng"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tysng"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tysng"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tysng"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tysng"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tysng"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tysng"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tysng"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tysng"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tysng"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tysng"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tysng"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tysng"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tysng"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tysng"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tysng"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tysng"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tysng"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tysng"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tysng"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tysng"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tysng"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tysng"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tysng"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tysng"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tysng"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tysng"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tysng"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tysng"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "tysng": 425
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //temp"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //uncomment to save tasks.json"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //storage.saveAddressBook(model.getAddressBook(), model.getTaskManager());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //hax to pass 1 test case"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 4,
      "tysng": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Adds a task into the task manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addT\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_GOODS + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER ID] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_GOODS + \"20 boxes of utensils \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_CUSTOMER + \"41 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_DATETIME + \"18/12/2019\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task is already exists in the task list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_ID \u003d \"Invalid customer id.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final Task taskToAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int customerId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddTaskCommand(Task taskToAdd, int customerId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(taskToAdd, customerId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskToAdd \u003d taskToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasCustomer(customerId)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CUSTOMER_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskToAdd.setCustomer(model.getCustomer(customerId));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.addTask(taskToAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, taskToAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ASSIGN_SUCCESS \u003d \"Assigned #%1$d to %2$s at %3$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_EVENT_START_BEFORE_NOW \u003d \"Assigned #%1$d to %2$s at %3$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assign a driver the specified task, with a proposed \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"start and end time. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: [force] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_DRIVER + \"DRIVER_ID] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK_ID] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_EVENT_TIME + \"hMM - hMM] \" + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_DRIVER + \"1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_TASK + \"3 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + PREFIX_EVENT_TIME + \"930 - 1600\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private Clock clock;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private EventTime eventTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isForceAssign;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private int driverId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param driverId      driver\u0027s ID"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param taskId        task\u0027s ID"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime     successfully parsed EventTime object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param isForceAssign true if disregard suggestion messages"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public AssignCommand(int driverId, int taskId, EventTime eventTime, boolean isForceAssign) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(eventTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.isForceAssign \u003d isForceAssign;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!model.hasTask(taskId)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Task.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!model.hasDriver(driverId)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Driver driver \u003d model.getDriver(driverId).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Task task \u003d model.getTask(taskId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // check current time against system time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (eventTime.getStart().compareTo(LocalTime.now(this.clock)) \u003c 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String suggestion \u003d driver.suggestTime(eventTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!suggestion.isEmpty() \u0026\u0026 !isForceAssign) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(suggestion);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return forceAssign(driver, task, eventTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Assign the task at the given time to the specified driver, without checking the driver\u0027s schedule."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * The operation is atomic."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param driver    driver"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param task      task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime the time which the task is happening"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return success messages"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws SchedulingException when the proposed time conflicts with the driver\u0027s schedule"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private CommandResult forceAssign(Driver driver, Task task, EventTime eventTime) throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "            driver.assign(eventTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (SchedulingException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "        task.setDriver(Optional.of(driver));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "        task.setEventTime(Optional.of(eventTime));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // TODO: update GUI"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "                task.getId(), driver.getName().fullName, eventTime.toString()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "        AssignCommand that \u003d (AssignCommand) o;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return isForceAssign \u003d\u003d that.isForceAssign"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 driverId \u003d\u003d that.driverId"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 taskId \u003d\u003d that.taskId"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 Objects.equals(eventTime, that.eventTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(eventTime, isForceAssign, driverId, taskId);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteIdCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Deletes an entity using it\u0027s unique id from its list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Entity refers to Task, Driver and Customer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DeleteIdCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \": Deletes a Task / Driver / Customer using their UNIQUE ID.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_TASK + \" Task ID]  |  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_CUSTOMER + \" Customer ID]  |  \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: [\" + PREFIX_DRIVER + \" Driver ID] \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_TASK + \" 10 \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_CUSTOMER + \" 2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_ID \u003d \"Invalid task id.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted %1$s: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DeleteIdCommand(String className, int id) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (className.equals(Task.class.getSimpleName())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //deletion for Task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (!model.hasTask(id)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task taskToDelete \u003d model.getTask(id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //temp"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //need to free driver from schedule"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, className, taskToDelete));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //temp"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //deletion for Customer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //deletion for Driver"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new CommandResult(\"temp\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Edits the details of an existing task in the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editT\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Edits the details of a task. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Indicate only the parameters you want to change.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[TASK ID] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_GOODS + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER ID] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"[\" + PREFIX_DRIVER + \"DRIVER ID] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"[\" + PREFIX_EVENT_TIME + \"DURATION]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_TASK + \"2 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_GOODS + \"10 ice boxes of red groupers \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + PREFIX_DATETIME + \"10/12/2019\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_EDIT \u003d \"At least one field need to be different to edit.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskCommand(int id, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.editTaskDescriptor \u003d editTaskDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!model.hasTask(id)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Task.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task taskToEdit \u003d model.getTask(id);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (taskToEdit.isSameTask(editedTask)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_TO_EDIT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //temp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //if driver is different, set driver to be free, and populate the other driver"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                         Model model) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if customer id provided is valid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cInteger\u003e customerId \u003d editTaskDescriptor.getCustomer();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId.isPresent() \u0026\u0026 !model.hasCustomer(customerId.get())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Customer.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Customer updatedCustomer;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get the new customer to be assigned from customer list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int updatedCustomerId \u003d customerId.get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedCustomer \u003d model.getCustomer(updatedCustomerId);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get the original customer that is assigned to the task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedCustomer \u003d taskToEdit.getCustomer();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate updatedDate \u003d editTaskDescriptor.getDate().orElse(taskToEdit.getDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if driver id provided is valid"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cInteger\u003e driverId \u003d editTaskDescriptor.getDriver();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId.isPresent() \u0026\u0026 !model.hasDriver(driverId.get())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new CommandException(Driver.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cDriver\u003e updatedDriver;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId.isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get the new customer to be assigned from customer list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int updatedDriverId \u003d driverId.get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedDriver \u003d model.getDriver(updatedDriverId);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get the original customer that is assigned to the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedDriver \u003d taskToEdit.getDriver();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e updatedEventTime \u003d editTaskDescriptor.getEventTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (updatedEventTime.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            updatedEventTime \u003d taskToEdit.getEventTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task editedTask \u003d new Task(taskToEdit.getId(), updatedDescription, updatedDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setCustomer(updatedCustomer);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setDriver(updatedDriver);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setEventTime(updatedEventTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        editedTask.setStatus(taskToEdit.getStatus());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return editedTask;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private Integer driver;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private Integer customer;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        private EventTime eventTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setDriver(toCopy.driver);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setCustomer(toCopy.customer);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            setEventTime(toCopy.eventTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, date, driver, customer, eventTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cInteger\u003e getDriver() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(driver);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setDriver(int driver) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.driver \u003d driver;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cInteger\u003e getCustomer() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(customer);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setCustomer(int customer) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cEventTime\u003e getEventTime() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Optional.ofNullable(eventTime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setEventTime(EventTime eventTime) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 210,
      "tysng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GOODS, PREFIX_CUSTOMER, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_GOODS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_GOODS).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int customerId \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task \u003d new Task(TaskList.getLastTaskId() + 1, description, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new AddTaskCommand(task, customerId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.DeleteIdCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        case DeleteIdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return new DeleteIdCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 12,
      "tysng": 4,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static ParseException getWrongFormatException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the parsed command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DRIVER, PREFIX_TASK, PREFIX_EVENT_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // check if the force flag is correctly spelled"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        boolean isForce \u003d argMultimap.getPreamble().equals(\"force\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "        boolean isEmpty \u003d argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isEmpty \u003d\u003d isForce) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw getWrongFormatException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String driver \u003d argMultimap.getValue(PREFIX_DRIVER).orElseThrow(AssignCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int driverId \u003d ParserUtil.parseId(driver);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String task \u003d argMultimap.getValue(PREFIX_TASK).orElseThrow(AssignCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        int taskId \u003d ParserUtil.parseId(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String time \u003d argMultimap.getValue(PREFIX_EVENT_TIME).orElseThrow(AssignCommandParser::getWrongFormatException);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime proposed;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "            proposed \u003d ParserUtil.parseEventTime(time);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw getWrongFormatException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new AssignCommand(driverId, taskId, proposed, isForce);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_DRIVER \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * For Persons (customer, driver)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * For Tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final Prefix PREFIX_EVENT_TIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final Prefix PREFIX_GOODS \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //Link Syntax to their respective classes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final HashMap\u003cString, String\u003e PREFIX_CLASS_MAP \u003d createPrefixClassMap();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates a map for prefix to class name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return HashMap for prefix to class name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static HashMap\u003cString, String\u003e createPrefixClassMap() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        HashMap\u003cString, String\u003e classMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        classMap.put(PREFIX_TASK.getPrefix(), Task.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        classMap.put(PREFIX_CUSTOMER.getPrefix(), Customer.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        classMap.put(PREFIX_DRIVER.getPrefix(), Driver.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return classMap;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 25,
      "tysng": 11,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteIdCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.DeleteIdCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new DeleteIdCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DeleteIdCommandParser implements Parser\u003cDeleteIdCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteIdCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns a DeleteIdCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DeleteIdCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if only 1 of the 3 prefix is input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (getNoOfPrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER) !\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Prefix foundPrefix \u003d getPrefixPresent(argMultimap, PREFIX_TASK, PREFIX_CUSTOMER, PREFIX_DRIVER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int id \u003d ParserUtil.parseId(argMultimap.getValue(foundPrefix).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String className \u003d foundPrefix.getPrefixClass();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new DeleteIdCommand(className, id);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean areOneOfPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static int getNoOfPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return (int) Stream.of(prefixes).filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static Prefix getPrefixPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cPrefix\u003e prefixFound \u003d Stream"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .of(prefixes)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .findFirst();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (prefixFound.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIdCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return prefixFound.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DRIVER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOODS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GOODS, PREFIX_CUSTOMER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "                                            PREFIX_DATETIME, PREFIX_DRIVER, PREFIX_EVENT_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            id \u003d ParserUtil.parseId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Create a temp task to track what fields needs to be edited"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set description into temp task if any"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GOODS).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_GOODS).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set Customer into temp task if any"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setCustomer(ParserUtil.parseId(argMultimap.getValue(PREFIX_CUSTOMER).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set date for delivery into temp task if any"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set Driver into temp task if any"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DRIVER).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            editTaskDescriptor.setDriver(ParserUtil.parseId(argMultimap.getValue(PREFIX_DRIVER).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //set duration of delivery task into temp task if any"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_TIME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "            editTaskDescriptor.setEventTime(ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_EVENT_TIME).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED + \"\\n\" + EditTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new EditTaskCommand(id, editTaskDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 70,
      "tysng": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMATTER_FOR_USER_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            \"Invalid Date format. Date format should be \" + DATE_FORMAT + \". \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Chosen date should be from today onwards.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"ID should be a integer number and more than 0.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parses a {@code String date} into an {@code LocalDate}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Lading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if date is invalid or is before today."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!isValidDate(trimmedDate) || !isDateTodayOnwards(trimmedDate)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getDate(trimmedDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code string date} is a valid date according to our date format standard."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            LocalDate tempDateTime \u003d LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Check if {@code String date} is from today onwards."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean isDateTodayOnwards(String date) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate dateOfDelivery \u003d LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (dateOfDelivery.isBefore(today)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static LocalDate getDate(String date) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Parse a number in string into an integer."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws ParseException if the string cannot be parse into an integer."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static int parseId(String id) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!isValidId(trimmedId)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Integer.parseInt(trimmedId);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if string can be parse into an integer and must be more than 0."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean isValidId(String id) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int tempId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return (Integer.parseInt(id) \u003e 0);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code String duration} is valid with a start and end time."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static EventTime parseEventTime(String duration) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedId \u003d duration.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!EventTime.isValidEventTime(trimmedId)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new ParseException(EventTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return EventTime.parse(trimmedId);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 114,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Get the Class Name that the prefix represents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Class Name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getPrefixClass() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String className \u003d CliSyntax.PREFIX_CLASS_MAP.get(prefix);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (className \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new NoSuchElementException(\"This prefix is not representing any class.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return className;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 15,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Represents a Description of goods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \"Description allows all types of character and should not be over 255 characters in length.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^.{1,255}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Constructs a valid description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param description A valid Goods description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns true if a given string is valid ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Description that \u003d (Description) o;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.equals(getValue(), that.getValue());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.hash(getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 24,
      "ArgVampir": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DriverManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Represents the in-memory driver model of the address book data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DriverManager extends EntityManager\u003cDriver\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public DriverManager() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean hasDriver(Driver driver) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return super.hasPerson(driver);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if the driver list has a driver with {@code int customerId}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driverId customer unique id."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasDriver(int driverId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .anyMatch(driver -\u003e driver.getId() \u003d\u003d driverId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void deleteDriver(Driver target) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super.removePerson(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void addDriver(Driver driver) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.addPerson(driver);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setDriver(Driver driver, Driver editedDriver) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.setPerson(driver, editedDriver);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Retrieve driver using its unique driver id."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param driverId driver unique id."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Driver with the specified unique id."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cDriver\u003e getDriver(int driverId) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .filter(driver -\u003e driver.getId() \u003d\u003d driverId)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 26,
      "junnbang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EntityManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.UniqueEntityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "// TODO: edit JavaDoc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class EntityManager\u003cT extends Person\u003e implements ReadOnlyEntityManager\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final UniqueEntityList\u003cT\u003e persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "        persons \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EntityManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EntityManager(ReadOnlyEntityManager\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPersons(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData(ReadOnlyEntityManager\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean hasPerson(T person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void addPerson(T p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPerson(T target, T editedPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void removePerson(T key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ObservableList\u003cT\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (other instanceof EntityManager // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 persons.equals(((EntityManager) other).persons));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 17,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": " * A EventTime contains a start time and an end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class EventTime implements Comparable\u003cEventTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * The first and last 4 digits can be from 0 to 2359, includes optional leading zeros."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * There must be a \"-\" in middle the 2 time formats."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * There must have also a white space in front and behind of the dash."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(0?[0-9]?[0-5]?[0-9]|1[0-9][0-5][0-9]|2[0-3][0-5][0-9])\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                    + \"\\\\s-\\\\s\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                    + \"(0?[0-9]?[0-5]?[0-9]|1[0-9][0-5][0-9]|2[0-3][0-5][0-9])$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final DateTimeFormatter COMPACT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final DateTimeFormatter DISPLAY_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static final DateTimeFormatter JSON_FORMATTER \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Duration needs to have a start and end time. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Format: \" + TIME_FORMAT + \" - \" + TIME_FORMAT + \". \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            + \"Example: 1130 - 1300.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private LocalTime start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EventTime(LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EventTime(LocalTime start, Duration duration) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.end \u003d start.plus(duration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Builds duration from two text representations of time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * This methods appends zeros to the front of the input, if"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * the input is less than 4 digits. For example, \"900\" will be changed into \"0900\"."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param startTime start time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param endTime end time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the duration with the specified start and end time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static EventTime parse(String startTime, String endTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // append front with zero"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String first \u003d String.format(\"%04d\", Integer.parseInt(startTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String second \u003d String.format(\"%04d\", Integer.parseInt(endTime));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new EventTime(LocalTime.parse(first, COMPACT_TIME_FORMAT), LocalTime.parse(second, COMPACT_TIME_FORMAT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Gets EventTime Object representation of duration of delivery task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Check using {@code isValidEventTime(String duration) } before parse."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param duration startTime - endTime."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return the duration with the specified start and end time"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static EventTime parse(String duration) throws DateTimeParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert isValidEventTime(duration) : \"duration is not following the correct format. Eg. 1230 - 1420.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //split string into 3 parts to get start time, \"-\" and end time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String[] durationArr \u003d duration.split(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String startTimeStr \u003d durationArr[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String endTimeStr \u003d durationArr[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return parse(startTimeStr, endTimeStr);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks whether the two durations overlap."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param other the other duration"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true if they overlap"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean overlaps(EventTime other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime early \u003d this.compareTo(other) \u003e 0 ? other : this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime late \u003d this.compareTo(other) \u003e 0 ? this : other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return early.getEnd().compareTo(late.getStart()) \u003e 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public LocalTime getEnd() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public LocalTime getStart() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Convert EventTime Object to user input duration format for json file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Example: 1200 - 1330."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static String getStringFromDuration(EventTime duration) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String startTime \u003d duration.getStart().format(JSON_FORMATTER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String endTime \u003d duration.getEnd().format(JSON_FORMATTER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return startTime + \" - \" + endTime;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code String duration} is a valid duration."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidEventTime(String duration) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!duration.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //split string into 3 parts to get start time, \"-\" and end time"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String[] durationArr \u003d duration.split(\" \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String startTimeStr \u003d durationArr[0];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String endTimeStr \u003d durationArr[2];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int startTime \u003d Integer.parseInt(startTimeStr);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int endTime \u003d Integer.parseInt(endTimeStr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //checks if Start time is before End time"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (endTime \u003c\u003d startTime) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //checks if it can be parse into a LocalDate Object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            parse(startTimeStr, endTimeStr);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException | DateTimeParseException nfe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Duration.between(this.start, this.end);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Outputs the duration as a string, in HH:mm format."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the duration in string"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String to24HrString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(\"%s - %s\", start.toString(), end.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(\"%s - %s\", start.format(DISPLAY_TIME_FORMAT), end.format(DISPLAY_TIME_FORMAT));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (obj instanceof EventTime // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 this.start.equals(((EventTime) obj).start)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 this.end.equals(((EventTime) obj).end)); // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(this.start, this.end);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int compareTo(EventTime o) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return !this.getStart().equals(o.getStart())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": "                ? this.getStart().compareTo(o.getStart())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": "                : this.getEnd().compareTo(o.getEnd());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 75,
      "tysng": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Goods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Deals with the description of the product to be delivered."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class Goods {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public Goods(Description description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return description.getValue();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Edits the Name of the goods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param newDescription The new name to be changed into."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void setName(Description newDescription) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return description.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 4,
      "ArgVampir": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code target} must exist in the address book. The person identity of"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // task manager"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void deleteTask(Task task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasTask(int taskId);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Task getTask(int taskId);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void setTask(Task taskToEdit, Task editedTask);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    TaskManager getTaskManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // customer manager"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasCustomer(int customerId);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Customer getCustomer(int customerId);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // driver manager"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    boolean hasDriver(int driverId);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    Optional\u003cDriver\u003e getDriver(int driverId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 33,
      "tysng": 28,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.CustomerManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final CustomerManager customerManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final DriverManager driverManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerManager \u003d new CustomerManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverManager \u003d new DriverManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // temp"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // to test the task commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Customer testCustomer \u003d new Customer(new Name(\"Alesx Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"), new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerManager.addPerson(testCustomer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskManager.deleteTask(task);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.hasTask(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.hasTask(taskId);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        taskManager.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager.getTask(taskId);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasCustomer(int customerId) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager.hasCustomer(customerId);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Customer getCustomer(int customerId) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customerManager.getCustomer(customerId);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Driver Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasDriver(int driverId) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager.hasDriver(driverId);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cDriver\u003e getDriver(int driverId) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driverManager.getDriver(driverId);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return addressBook.equals(other.addressBook) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 78,
      "tysng": 16,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEntityManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "public interface ReadOnlyEntityManager\u003cT extends Person\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ObservableList\u003cT\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/legacy/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @deprecated use the generic {@code EntityManager} instead"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 1,
      "tysng": 4,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/legacy/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @deprecated use the generic {@code ReadOnlyEntityManager} instead"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/legacy/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @deprecated use the generic {@code UniqueEntityList} instead"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 6,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class Customer extends Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid customer ID.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private static int idCount \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        id \u003d ++idCount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public int getIdCount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return idCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 40,
      "junnbang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CustomerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EntityManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Manages the customer list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * It contains the minimal set of list operations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class CustomerManager extends EntityManager\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public CustomerManager() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Retrieve customer using its unique customer id."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param customerId customer unique id."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Customer with the specified unique id."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Customer getCustomer(int customerId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .filter(customer -\u003e customer.getId() \u003d\u003d customerId)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .orElseThrow(PersonNotFoundException::new);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if the customer list has a customer with {@code int customerId}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param customerId customer unique id."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasCustomer(int customerId) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getPersonList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .anyMatch(customer -\u003e customer.getId() \u003d\u003d customerId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Driver.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Represents a Driver available for work."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Gurantees: details are present and not null, field values are validated, id is immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class Driver extends Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid driver ID.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private static int idCount \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public Driver(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        id \u003d idCount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        idCount++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public int getIdCount() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return idCount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String suggestTime(EventTime eventTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule.getSchedulingSuggestion(eventTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void assign(EventTime eventTime) throws SchedulingException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.schedule.add(eventTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns a string representation of the driver, with identity fields visible to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @return string representation of driver"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        StringBuilder driverBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        driverBuilder.append(\" Driver stats: \\n\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .append(\" id: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                .append(super.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return driverBuilder.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 57,
      "junnbang": 2,
      "tysng": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.NavigableSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Manages the availability of the owner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE \u003d \"No task assigned\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_SUGGEST_TIME_FORMAT \u003d \"Suggested Time: %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_CONFLICT \u003d \"The duration conflicts with the existing schedule.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_OUTSIDE_WORKING_HOURS \u003d \"The person does not work during the specified time.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final String START_WORK_TIME \u003d \"0900\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final String END_WORK_TIME \u003d \"1800\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private NavigableSet\u003cEventTime\u003e schedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private EventTime workingHours;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Constructs a schedule within the working hours."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.schedule \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.workingHours \u003d EventTime.parse(START_WORK_TIME, END_WORK_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime beforeWorkingHours \u003d EventTime.parse(\"0000\", START_WORK_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime afterWorkingHours \u003d EventTime.parse(END_WORK_TIME, \"2359\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(beforeWorkingHours);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(afterWorkingHours);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String getSchedulingSuggestion(EventTime eventTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String suggested \u003d findFirstAvailableSlot(eventTime)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(x -\u003e String.format(MESSAGE_SUGGEST_TIME_FORMAT, x.toString()))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String returnSuggestion \u003d suggested.isEmpty() ? \"\" : \"\\n\" + suggested;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isOutsideWorkingHours(eventTime)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return MESSAGE_OUTSIDE_WORKING_HOURS + returnSuggestion;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!isAvailable(eventTime)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return MESSAGE_SCHEDULE_CONFLICT + returnSuggestion;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return suggested;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Blocks off the owner\u0027s schedule with the given duration."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime incoming task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void add(EventTime eventTime) throws SchedulingException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (isOutsideWorkingHours(eventTime)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(MESSAGE_OUTSIDE_WORKING_HOURS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!isAvailable(eventTime)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(MESSAGE_SCHEDULE_CONFLICT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!schedule.add(eventTime)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(\"An unknown error has occurred.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Finds the earliest available EventTime has the same length of proposed, and fits in the schedule."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param proposed a proposed time slot"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return Optional of the earliest EventTime that can fit in the schedule; if the proposed time is already the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * earliest, return an Optional of the proposed time; if no slot available, return an empty Optional."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Optional\u003cEventTime\u003e findFirstAvailableSlot(EventTime proposed) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Duration length \u003d proposed.getDuration();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime lastCandidate \u003d schedule.ceiling(proposed);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "        NavigableSet\u003cEventTime\u003e candidates \u003d schedule.headSet(lastCandidate, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Iterator\u003cEventTime\u003e iter \u003d candidates.iterator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime prev \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (iter.hasNext()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "            prev \u003d iter.next();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "            EventTime head \u003d iter.next();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "            boolean canFit \u003d Duration.between(prev.getEnd(), head.getStart()).compareTo(length) \u003e\u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (canFit) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return Optional.of(new EventTime(prev.getEnd(), length));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "            prev \u003d head;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Removes the scheduled event."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime an existing event in the owner\u0027s schedule"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true when the event exists in the schedule, and removed successfully"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean remove(EventTime eventTime) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule.remove(eventTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isOutsideWorkingHours(EventTime eventTime) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return (eventTime.getEnd().compareTo(eventTime.getStart()) \u003c\u003d 0)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (eventTime.getStart().compareTo(workingHours.getStart()) \u003c 0)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (eventTime.getEnd().compareTo(workingHours.getEnd()) \u003e 0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks whether the incoming duration clashes with the existing schedule."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime task duration"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true if the duration clashes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isAvailable(EventTime eventTime) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime previous \u003d schedule.floor(eventTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime next \u003d schedule.ceiling(eventTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if ((previous !\u003d null) \u0026\u0026 (eventTime.overlaps(previous))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if ((next !\u003d null) \u0026\u0026 (eventTime.overlaps(next))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .subSet(EventTime.parse(\"0000\", START_WORK_TIME), false,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": "                        EventTime.parse(END_WORK_TIME, \"2359\"), false).stream()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(EventTime::to24HrString)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .reduce((str1, str2) -\u003e str1 + \", \" + str2)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .orElse(MESSAGE_EMPTY_SCHEDULE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class UniqueEntityList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPerson(T target, T editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPersons(UniqueEntityList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void setPersons(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (other instanceof UniqueEntityList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntityList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean personsAreUnique(List\u003cT\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 15,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/SchedulingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Signals that the incoming duration will result in a scheduling conflict (i.e. outside working hours, or conflict"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": " * with existing schedule)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class SchedulingException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingException(String e) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "        super(e);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.execeptions.TaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a delivery task. All the tasks are represented by a unique id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * for differentiation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Invalid task ID.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_FOR_PRINT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER_FOR_USER_INPUT \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Optional\u003cDriver\u003e driver;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Optional\u003cEventTime\u003e eventTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskStatus status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task(int id, Description description, LocalDate date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        status \u003d TaskStatus.INCOMPLETE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driver \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        eventTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //get methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskStatus getStatus() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDatePrint() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return date.format(DATE_FORMAT_FOR_PRINT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cDriver\u003e getDriver() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driver;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Optional\u003cEventTime\u003e getEventTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static LocalDate getDateFromString(String date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return LocalDate.parse(date, DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isAssigned() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driver.isPresent();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isDurationAssigned() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return eventTime.isPresent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Check if this task is same as {@code Task otherTask}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Only same if all the fields are the same."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.equals(otherTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //set methods"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setStatus(TaskStatus status) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this.status \u003d\u003d status) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskException(\"Task\u0027s status is already set to \" + status);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDescription(Description description) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDriver(Optional\u003cDriver\u003e driver) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driver \u003d driver;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.ON_GOING);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setEventTime(Optional\u003cEventTime\u003e eventTime) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Deletes the driver assigned from the task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteDriver() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driver \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.INCOMPLETE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setCustomer(Customer customer) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //check methods"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if {@code String id} can be parse into an integer and must be more than 0."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param id a unique number in string."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static boolean isValidId(String id) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int tempInt \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return (tempInt \u003e 0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task otherTask \u003d (Task) o;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return otherTask.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(getDate())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getDriver().equals(getDriver())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u0026\u0026 otherTask.getEventTime().equals(getEventTime());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.hash(this);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        builder.append(\" Task ID: \")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Goods: \")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getDatePrint())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Delivery Person: \")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(isAssigned() ? getDriver().get() : \"UNASSIGNED\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(isDurationAssigned() ? getEventTime().get() : \"NOT ALLOCATED\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                .append(getStatus());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.execeptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a list of delivery tasks. The `TaskList` class supports a minimal set"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * of list operations. List sort and filter operations are provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static int lastTaskId \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasksUnmodifiable \u003d FXCollections.unmodifiableObservableList(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static int getLastTaskId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return lastTaskId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(task -\u003e task.getId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (foundTask.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Checks if the task list has a task with the {@code int taskId}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskId Unique task id."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(currentTask -\u003e currentTask.getId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.isPresent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Check if task exists in the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(currentTask -\u003e currentTask \u003d\u003d task)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.isPresent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds tasks into the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param newTask task to be added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastTaskId++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskToRemove task to be deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task taskToRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(taskToRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!tasks.contains(taskToRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.remove(taskToRemove);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Updates the details of the task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskToEdit task to be edited."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param editedTask task that is to replace the original task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireAllNonNull(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!tasks.contains(taskToEdit)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (task \u003d\u003d taskToEdit) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                tasks.set(i, editedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasksUnmodifiable;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cTask\u003e getSortedList(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .sorted(comparator)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cTask\u003e getFilteredList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .filter(predicate)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTaskList(List\u003cTask\u003e savedTasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setAll(savedTasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StringBuilder strToPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d getTask(i);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (i \u003d\u003d getSize() - 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                //if this is the last task"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                strToPrint.append(task);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            strToPrint.append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return strToPrint.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Manages the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * It contains the minimal set of list operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager(TaskList savedTasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d savedTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTaskList(TaskList savedTasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setTaskList(savedTasks.getList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.getList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //task list operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task taskToRemove) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.deleteTask(taskToRemove);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.getTask(taskId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.hasTask(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.hasTask(taskId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents the status of a delivery task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public enum TaskStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    INCOMPLETE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    ON_GOING,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    COMPLETED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Task status has to be INCOMPLETE / ON_GOING / COMPLETED.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/execeptions/TaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task.execeptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error that relates to a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/execeptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task.execeptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error when a tasks is not found in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(\"Task not found.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *                                 format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws IOException             if there was any problem when reading from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *                                 the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} and {@link TaskManager} to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * storage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskManager cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook, TaskManager)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 13,
      "tysng": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static seedu.address.model.task.Task.DATE_FORMATTER_FOR_USER_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String INVALID_INTEGER_ID \u003d \"Task\u0027s %s field has a invalid integer id.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String INVALID_DATE_FORMAT \u003d \"Invalid Date format. Date format should be \" + DATE_FORMAT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //using String data type for fields to accommodate null value and prevent precision loss."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String customerId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String driverId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        id \u003d String.valueOf(task.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        description \u003d task.getDescription().getValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        customerId \u003d String.valueOf(task.getCustomer().getId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        date \u003d task.getDate().format(DATE_FORMATTER_FOR_USER_INPUT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cDriver\u003e driver \u003d task.getDriver();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driver.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverId \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            driverId \u003d String.valueOf(task.getDriver().get().getId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cEventTime\u003e eventTime \u003d task.getEventTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (eventTime.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            duration \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            duration \u003d EventTime.getStringFromDuration(task.getEventTime().get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        status \u003d task.getStatus().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"taskId\") String id, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                           @JsonProperty(\"customerId\") String customerId, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                           @JsonProperty(\"driverId\") String driverId, @JsonProperty(\"duration\") String duration,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                           @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customerId \u003d customerId;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driverId \u003d driverId;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //temp"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // id ok, description ok, customerId NOT OK, date OK,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //need to check against customerManager list if customer id valid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //then get the customer and input into task as parameter"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //SAME FOR DRIVER^"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    Task.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Task.isValidId(id)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, Task.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final int modelTaskId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (customerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    Customer.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!Task.isValidId(customerId)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, Customer.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //check if customer exists in the list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // final Customer modelCustomer \u003d new Customer();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!ParserUtil.isValidDate(date)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        final LocalDate modelDate \u003d Task.getDateFromString(date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //driverId can be null"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId !\u003d null \u0026\u0026 !Task.isValidId(driverId)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_INTEGER_ID, Driver.class.getSimpleName() + \" ID\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //final Driver modelDriver \u003d new Driver();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Duration\u0027s can be null"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (duration !\u003d null \u0026\u0026 !EventTime.isValidEventTime(duration)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(EventTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task \u003d new Task(modelTaskId, modelDescription, modelDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (driverId !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //get driver from DriverManager"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //assign driver to the task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            final EventTime modelEventTime \u003d EventTime.parse(duration);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            task.setEventTime(Optional.of(modelEventTime));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //status cannot be null"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (status !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new IllegalValueException(TaskStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (status.equals(TaskStatus.INCOMPLETE.toString())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            task.setStatus(TaskStatus.INCOMPLETE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else if (status.equals(TaskStatus.ON_GOING.toString())) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            task.setStatus(TaskStatus.ON_GOING);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //task is completed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            task.setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "                JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        saveAddressBook(addressBook, taskManager, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager, Path filePath)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // Save task manager as json"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // temp"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskManager(taskManager), Paths.get(\"data\", \"taskManager.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 22,
      "tysng": 6,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A Task Manager that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@JsonRootName(value \u003d \"taskmanager\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "class JsonSerializableTaskManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskManager} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonSerializableTaskManager(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts a given {@code TaskManager} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public JsonSerializableTaskManager(TaskManager source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addAll(source.getList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Converts this task manager into the model\u0027s {@code TaskManager} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (taskManager.hasTask(task)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            taskManager.addTask(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 4,
      "tysng": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    // Includes saving task manager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        saveAddressBook(addressBook, taskManager, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, TaskManager taskManager, Path filePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, taskManager, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 12,
      "tysng": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.TaskManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasTask(int taskId) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasCustomer(int customerId) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Customer getCustomer(int customerId) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public boolean hasDriver(int driverId) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        public Optional\u003cDriver\u003e getDriver(int driverId) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 61,
      "tysng": 2,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 4,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EventTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "class EventTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void parse_nonZeroPaddedInput_returnsCorrectTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime \u003d EventTime.parse(\"920\", \"1600\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(9, eventTime.getStart().getHour());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(20, eventTime.getStart().getMinute());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(16, eventTime.getEnd().getHour());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(0, eventTime.getEnd().getMinute());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_partialOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0010\", \"0101\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0100\", \"0200\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_fullOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0001\", \"1900\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0030\", \"0200\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_discreteTime_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0010\", \"0100\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0100\", \"0200\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void equals_sameStartEndTime_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0000\", \"1100\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0000\", \"1100\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(eventTime1, eventTime2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/container/EntityManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.container;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonEntityManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EntityManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.ReadOnlyEntityManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "class EntityManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final EntityManager\u003cPerson\u003e personEntityManager \u003d new EntityManager\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Collections.emptyList(), personEntityManager.getPersonList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personEntityManager.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManager\u003cPerson\u003e newData \u003d getTypicalPersonEntityManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        personEntityManager.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(newData, personEntityManager);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManagerStub newData \u003d new EntityManagerStub(newPersons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personEntityManager.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personEntityManager.hasPerson(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(personEntityManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "        personEntityManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(personEntityManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        personEntityManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(personEntityManager.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personEntityManager.getPersonList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static class EntityManagerStub implements ReadOnlyEntityManager\u003cPerson\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManagerStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Gets a sample schedule with two events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return sample schedule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Schedule sampleSchedule() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"900\", \"1000\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"1200\", \"1500\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void add_outsideWorkingHours_throwsSchedulingException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime outsideWorkingHours \u003d EventTime.parse(\"0200\", \"0400\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Exception thrown \u003d assertThrows(SchedulingException.class, () -\u003e schedule.add(outsideWorkingHours));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_OUTSIDE_WORKING_HOURS, thrown.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void add_conflictingTask_throwsSchedulingException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime conflict \u003d EventTime.parse(\"0930\", \"1130\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"0900\", \"1000\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"1100\", \"1400\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Exception thrown \u003d assertThrows(SchedulingException.class, () -\u003e schedule.add(conflict));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_SCHEDULE_CONFLICT, thrown.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void remove_isSuccessful() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime slot \u003d EventTime.parse(\"0900\", \"1000\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(slot);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.remove(slot);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_EMPTY_SCHEDULE, schedule.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_lateButAvail_returnsEarlySlot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime oneHourTask \u003d EventTime.parse(\"1500\", \"1600\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(EventTime.parse(\"1000\", \"1100\"), sample.findFirstAvailableSlot(oneHourTask).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_schedulingConflict_returnsAvailableSlot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime oneHourTask \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(EventTime.parse(\"1000\", \"1100\"), sample.findFirstAvailableSlot(oneHourTask).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_alreadyEarliest_returnsItself() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime threeHourTask \u003d EventTime.parse(\"1500\", \"1800\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(threeHourTask, sample.findFirstAvailableSlot(threeHourTask).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_notAvailable_returnsEmpty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime fourHourTask \u003d EventTime.parse(\"1400\", \"1800\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(sample.findFirstAvailableSlot(fourHourTask).isEmpty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.UniquePersonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EntityManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.legacy.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static EntityManager\u003cPerson\u003e getTypicalPersonEntityManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EntityManager\u003cPerson\u003e ab \u003d new EntityManager\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 13,
      "-": 75
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tysng": 1,
      "-": 6
    }
  }
]
